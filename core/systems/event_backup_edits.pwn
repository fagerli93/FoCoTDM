/*********************************************************************************
*                                                                                *
*             ______     _____        _______ _____  __  __                      *
*            |  ____|   / ____|      |__   __|  __ \|  \/  |                     *
*            | |__ ___ | |     ___      | |  | |  | | \  / |                     *
*            |  __/ _ \| |    / _ \     | |  | |  | | |\/| |                     *
*            | | | (_) | |___| (_) |    | |  | |__| | |  | |                     *
*            |_|  \___/ \_____\___/     |_|  |_____/|_|  |_|                     *
*                                                                                *
*                                                                                *
*                                                                                *
*			######## ##     ## ######## ##    ## ########  ######                *
*			##       ##     ## ##       ###   ##    ##    ##    ##               *
*			##       ##     ## ##       ####  ##    ##    ##                     *
*			######   ##     ## ######   ## ## ##    ##     ######                *
*			##        ##   ##  ##       ##  ####    ##          ##               *
*			##         ## ##   ##       ##   ###    ##    ##    ##               *
*			########    ###    ######## ##    ##    ##     ######                *
*                                                                                *
*                                                                                *
*                        (c) Copyright                                           *
*  Owners: Simon Fagerli (pEar) - Lee Percox (Shaney) - Warren Bickley (WazzaJB) *
*         Developers: Marcel, RakGuy, FKu, Chilco, dr_vista, Fletcher            *
*                                                                                *
* Filename: events.pwn                                                           *
* Author: Marcel, dr_vista & pEar                                                *
*********************************************************************************/
#include <YSI\y_hooks>
#include <YSI\y_timers>

/* TO DO:

	- Add Gun Game
	
	- Put a different V-World for army vs terrorists
	-Navy seals event doesnt end when the last (second last player) suicided
	- you are already at the event during a rejoinable event when a player died and tried to rejoin
*/

/* Event types:

	- FFA
	- TDM
	- Sumo
	- Pursuit
	- Races
*/

/* Events list:

	- FFA:

		- Mad Dogg's Mansion
		- Big Smoke
		- Minigun Wars
		- Brawl
		- Hydra Wars
		- Gun Game

	- TDM:

		- Jefferson Motel
		- Area 51
		- Army vs. Terrorists
		- Navy Seals vs. Terrorists (Ship)
		- Compound Attack
		- Oil Rig Terrorists
		- Team Drug Run
		- Construction

	- Sumo:

	    - Monster Sumo
	    - Banger Sumo
	    - SandKing Sumo
	    - SandKing Sumo (Reloaded)
	    - Destruction Derby

	- Pursuit:

		- Pursuit

	- Races:

		- TBA



*/
forward Edit_Event_InProgress(value);
/* File Structure

	\events
	|
	|	events.pwn
	|
 	|	\subfiles
 	|   |
	|	|    area51.pwn
	|	|    armyvsterrorists.pwn
	|	|    bigsmoke.pwn
	|	|    brawl.pwn
	|   |    compound.pwn
	|   |    drugrun.pwn
	|   |    hydra.pwn
	|   |    jefftdm.pwn
	|   |    md.pwn
    |   |    minigun.pwn
    |   |    navyvsterrorists.pwn
    |   |    oilrig.pwn
    |   |    pursuit.pwn
    |   |    SUMO.pwn
	|	|	 plane.pwn
	| 	|	 construction.pwn
    |


*/

/* Structure:

	- Includes
	- Defines
	- Forwards
	- Enumerations
	- Variables
	- Callbacks
	- Functions
	- Commands
*/
#define MAX_EVENT_PLAYERS 200
#define EVENTLIST "Mad Dogg's Mansion\nBig Smoke\nMinigun Wars\nBrawl\nHydra Wars\nGun Game\nJefferson Motel TDM\nArea 51 TDM\nArmy vs. Terrorists\nNavy Seals vs. Terrorists\nCompound Attack\nOil Rig Terrorists\nTeam Drug Run\nMonster Sumo\nBanger Sumo\nSandKing Sumo\nSandKing Sumo (Reloaded)\n Destruction Derby\nPursuit\nPlane-Survival\nConstruction-TDM\nHighSpeed Pursuit\nLabyrinth of Doom\nHotLava\nDeathRace\nDomination\nCustom Event Maker"

#define MAX_EVENTS 27
#define MAX_EVENT_VEHICLES 50

#define SUMO_EVENT_SLOTS 15
#define AREA51_EVENT_SLOTS 42
#define ARMY_EVENT_SLOTS 18
#define COMPOUND_EVENT_SLOTS 32
#define DRUGRUN_EVENT_SLOTS 58
#define HYDRA_EVENT_SLOTS 11
#define JEFFTDM_EVENT_SLOTS 28
#define MINIGUN_EVENT_SLOTS 16
#define SEALS_EVENT_SLOTS 31
#define OILRIG_EVENT_SLOTS 32
#define PURSUIT_EVENT_SLOTS 26
#define PLANE_EVENT_SLOTS 30
#define CONSTRUCTION_SLOTS 30
#define HIGHSPEED_PURSUIT_EVENT_SLOTS 26
#define LOD_EVENT_SLOTS 50
#define MAX_LOD_PICKUPS 24
#define DEATHRACE_EVENT_SLOTS 50
#define DOMINATION_EVENT_SLOTS 80
#define GUNGAME_EVENTSLOT MAX_PLAYERS

#define VIP_EVENT_SLOTS 2

#define HOTLAVA_OBJECTS_AMT 100			// Amount of objects	
#define HOTLAVA_INT 0					// Interior
#define HOTLAVA_WORLD 1300				// World
#define HOTLAVA_PICKUPS 5				// Amount of pickups
#define HOTLAVA_PICKUPS_ROTATE 8		// Time interval for when to rotate pickups
#define HOTLAVA_MAXDISCO 10 			// Amount of floors that are "disco" at the same time, aka can be removed.


#define DOMINATION_PLANE_SPAWNS 40
#define DOMINATION_AIR_SPAWNS 47
#define DOMINATION_ZONES 3


enum events
{
	eventID,
	eventName[30]
};

new const event_IRC_Array[MAX_EVENTS][ events ] = {
 {0, "Mad Doggs Mansion"},
 {1, "Bigsmoke"},
 {2, "Minigun Wars"},
 {3, "Brawl"},
 {4, "Hydra Wars"},
 {5, "Gun Game"},
 {6, "Jefferson TDM"},
 {7, "Area 51 TDM"},
 {8, "Army vs. Terrorists"},
 {9, "Navy Seals Vs. Terrorists"},
 {10, "Compound Attack"},
 {11, "Oil Rig Terrorists"},
 {12, "Team Drug Run"},
 {13, "Monster Sumo"},
 {14, "Banger Sumo"},
 {15, "SandKing Sumo"},
 {16, "SandKing Sumo Reloaded"},
 {17, "Destruction Derby"},
 {18, "Pursuit"},
 {19, "Plane-ram"},
 {20, "Construction-TDM"},
 {21, "High-speed pursuit"},
 {22, "Labyrinth of Doom"},
 {23, "HotLava"},
 {24, "DeathRace"},
 {25, "Domination"},
 {26, "CEM"}
};
/* Enumerations */

	/* Master event enum */

enum
{
	MADDOGG,            // 0
	BIGSMOKE,           // 1
	MINIGUN,            // 2
	BRAWL,              // 3
	HYDRA,              // 4
	GUNGAME,            // 5
	JEFFTDM,            // 6
	AREA51,             // 7
	ARMYVSTERRORISTS,   // 8
	NAVYVSTERRORISTS,   // 9
	COMPOUND,           // 10
	OILRIG,             // 11
	DRUGRUN,            // 12
	MONSTERSUMO,        // 13
	BANGERSUMO,         // 14
	SANDKSUMO,          // 15
	SANDKSUMORELOADED,  // 16
	DESTRUCTIONDERBY,   // 17
	PURSUIT,            // 18
	PLANE,              // 19
	CONSTRUCTION,       // 20
	HIGHSPEEDPURSUIT,   // 21
	LOD,				// 22
	HOTLAVA,			// 23
	EVENT_DRACE,		// 24
	DOMINATION,			// 25
	CEM 				// 26
};

new const eventSlots[MAX_EVENTS] = {-1, -1, 16, -1, 11, -1, 28, 42, 18, 31, 32, 32, 58, 15, 15, 15, 15, 15, 26, 33, 30, 26, 50, 100, 50, 80, -1}; /* -1 = unlimited slots */



	/* Drug Run */

enum e_DrugRunVehicles
{
	modelID,
	Float:dX,
	Float:dY,
	Float:dZ,
	Float:Rotation
};

/* Variables */

	/* Master event variables */

new
	Event_Players[MAX_PLAYERS],
	Iterator:Event_Vehicles<50>;
	
new
	Position[3];

new
	Event_InProgress = -1;
	
new
	Event_FFA = 0,
	Maze_Killer = -1,
	rotate_pickups_lod = 0,
	event_count = 0,
	Event_Kills[MAX_PLAYERS],
	Event_Died[MAX_PLAYERS],
	AutoJoin[MAX_PLAYERS],
	LOD_Pickups[MAX_LOD_PICKUPS];
	
	
 /* Event_InProgress values:

	- 0 : Event has been started and can be joined
	- 1 : Event has been started but cannot be joined (30 secs after event start)
	- (-1) : No event is running
*/

new EventPlayers[MAX_EVENT_PLAYERS];
new EventCount;

new
	Event_ID,
	DialogIDOption[MAX_PLAYERS];

new
	Float:BrawlX,
	Float:BrawlY,
	Float:BrawlZ,
	Float:BrawlA,
	BrawlInt,
	BrawlVW;

new
	team_issue;

new
    Event_Delay,
    E_Pursuit_Criminal,
    E_HSPursuit_Criminal;

new
    FoCo_Event_Died[MAX_PLAYERS];
	
new 
	Float:Maze_X,
	Float:Maze_Y,
	Float:Maze_Z,
	Timer_MazeKiller;

new
	FFAArmour,
	FFAWeapons;

//new DrugEventVehicles[128], /unused
new	Event_PlayerVeh[MAX_PLAYERS] = -1;

new
	 Motel_Team = 0,
	 Team1_Motel = 0,
	 Team2_Motel = 0;
	 
// Domination
new 
	Team,
	inc_t1,
	inc_t2,
	Ticks,
	Ticks_t1,
	Ticks_t2;

new dom_gangzones[DOMINATION_ZONES];
new dom_zonestatus[DOMINATION_ZONES][3];
new dom_playercapture[DOMINATION_EVENT_SLOTS];


new
    EventDrugDelay[MAX_PLAYERS];

/*new
	//lastGunGameWeapon[MAX_PLAYERS] = 38,
	GunGameKills[MAX_PLAYERS];
*/
new
    spawnSeconds[MAX_PLAYERS];

new
	lastKillReason[MAX_PLAYERS];


new	winner,
	FoCo_Criminal = -1,
	FoCo_Event_Rejoin;
//new Pursuit_Car;
	
new
	eventVehicles[MAX_EVENT_VEHICLES] = {0},
	caridx;
	
//new reservedSlotsQueue[VIP_EVENT_SLOTS];

	/* Timer Definitions */
	
new
		Timer:DelayTimer,
		Timer:DrugDelayTimer,
		Timer:SumoFallCheckTimer,
		Timer:HydraFallCheckTimer,
		Timer:OilrigFallCheckTimer,
		Timer:HotLavaFallCheckTimer,
		Timer:HotLavaDiscoTimer,
		Timer:HotLavaDiscoRepeatTimer,
		Timer:hydraTime,
		Timer:PursuitTimer,
		Timer:HSPursuitTimer,
		Timer:PlaneFallCheckTimer,
		Timer:ZoneCaptureDomination,
		Timer:domination_TickDecreaserTimer,
		Timer:dom_AutoZoneDecreaserTimer;

/* Event stats */

enum e_PlayerEventStats
{
	joinedevent,
	pteam,
	kills,
	damage
};		

static
		PlayerEventStats[MAX_PLAYERS][e_PlayerEventStats];

enum e_TeamName
{
	team_a[30],
	team_b[30]
};
new HotLava_Objects[HOTLAVA_OBJECTS_AMT];		// To save the ObjectID	
new HotLava_Pickups[HOTLAVA_PICKUPS][3];		// To save the pickupid, what floor its on + weapontype
new HotLava_Disco[HOTLAVA_MAXDISCO];			// For the floors that is about to disappear
new eCounter;
new Timer_RotateHLPickups, Timer_Disco1D;

static
		TeamNames[e_TeamName];

	/* Event spawns */
new Float:domination_plane_spawns[DOMINATION_PLANE_SPAWNS][4] = {
	{315.4087,974.6028,1961.3041,0.7736},
	{316.4497,974.7056,1961.2815,358.1937},
	{317.7576,976.3836,1960.9003,358.1104},
	{314.0477,976.3767,1960.9019,359.5706},
	{311.9565,976.2875,1960.9225,336.7902},
	{319.5702,976.1236,1960.9603,28.9935},
	{319.4602,983.3795,1959.2859,88.1334},
	{312.0700,983.4366,1959.2727,271.1944},
	{314.7975,986.2848,1958.6155,358.7163},
	{316.8375,986.3325,1958.6044,357.6391},
	{318.0925,988.2977,1958.1509,90.9955},
	{314.8445,989.8060,1957.8029,359.1227},
	{316.6807,989.9067,1957.7795,359.6155},
	{313.3102,991.4483,1957.4238,268.9242},
	{314.9509,993.8108,1956.8787,2.7917},
	{316.4761,993.8923,1956.8599,358.2433},
	{316.6108,997.4207,1956.0457,357.6767},
	{314.8005,997.5490,1956.0160,357.1144},
	{317.6604,999.0147,1955.6777,87.0003},
	{314.8354,1001.6468,1955.0703,358.6082},
	{316.8354,1001.6712,1955.0647,356.4835},
	{313.7228,1004.8372,1954.3341,272.7771},
	{314.9947,1007.4227,1953.7374,2.2215},
	{316.5298,1007.4923,1953.7214,357.6963},
	{315.0181,1011.1069,1952.8872,1.0151},
	{316.4738,1011.1596,1952.8751,357.7414},
	{319.2982,1021.3441,1950.5248,169.0123},
	{319.2184,1018.4615,1951.1901,180.2636},
	{319.2298,1015.7487,1951.8160,180.2636},
	{318.9427,1012.7178,1952.5155,91.2238},
	{312.2876,1020.7947,1950.6516,182.0810},
	{312.3728,1018.4623,1951.1898,182.0810},
	{312.4522,1016.3028,1951.6882,182.0810},
	{312.7545,1012.9118,1952.4707,264.8881},
	{314.5562,1015.9891,1951.7606,1.2939},
	{317.0087,1016.0710,1951.7417,356.8265},
	{317.1201,1018.9007,1951.0887,358.1216},
	{314.4798,1019.0489,1951.0544,357.5644},
	{314.4935,1022.7593,1950.1982,359.2642},
	{316.9847,1022.9308,1950.1587,358.0092}
};

new Float:domination_air_spawns[DOMINATION_AIR_SPAWNS][4] = {
	{-10.9854,9.0132,253.8257,150.1709}, 
	{-90.0191,-62.9310,252.6739,119.7648}, 
	{-71.2513,-177.7139,199.5119,245.1837},
	{31.8333,-220.2452,264.0313,278.1088},
	{105.2418,-168.1348,274.0311,326.2402},
	{141.7440,-267.7461,217.8861,123.1333},
	{34.5839,-30.4569,214.3688,10.6007}, 
	{61.7917,72.9043,217.2660,284.6537},
	{183.1703,80.8731,184.4436,253.9516},
	{270.4294,-6.2015,378.5861,210.0681},
	{246.2623,-97.5843,376.2831,132.1479},
	{150.9315,-167.1493,378.5729,129.6527},
	{-11.3628,-280.3474,363.0977,123.5733},
	{-116.4550,-268.6776,299.8438,78.5328},
	{-114.8175,-162.6472,244.8591,334.4229},
	{-78.7892,-95.5485,242.9933,337.6450},
	{-11.0907,31.9064,233.1460,312.9083},
	{101.5078,156.0317,220.5737,320.8105},
	{180.9295,35.8180,230.2159,194.9974},
	{211.7143,-23.4572,440.8362,224.3149},
	{278.5929,-91.5706,419.5550,215.4464},
	{273.0583,-186.4786,218.2666,103.5649},
	{155.2224,-164.9203,203.1214,52.0565},
	{18.5780,-41.9095,198.7331,47.0543},
	{-83.9629,15.7071,195.9364,82.4694},
	{-209.8860,15.5208,310.8411,193.0461},
	{-240.7832,-59.0859,300.3275,152.1249},
	{-166.5319,-209.5621,291.9350,251.8941},
	{-41.9729,-173.0344,341.9632,332.7654},
	{-7.7899,-77.7135,330.7826,337.9658},
	{9.1292,-27.9286,317.4919,338.1175},
	{232.9908,-159.0638,1.9994,145.7968},
	{-88.6547,-160.3669,369.6605,73.3910},
	{-92.6783,-91.8560,339.5888,333.9543},
	{-75.1994,-9.8799,317.9454,317.3775},
	{52.0821,31.2747,235.3102,272.5967},
	{285.0696,51.0406,149.9165,282.5727},
	{463.2846,5.3336,330.7197,186.8450},
	{526.6206,36.4430,295.6360,273.4907},
	{648.9200,73.1611,260.1120,277.4297},
	{300.7239,-124.2161,255.0341,96.5690},
	{199.4805,-140.0650,290.1134,104.5626},
	{118.0707,-167.8230,278.6439,121.2120},
	{69.4173,-193.5840,302.8743,106.3506},
	{-41.4779,-230.6063,298.0139,92.1233},
	{-128.1668,-227.4068,300.4341,357.0283},
	{-172.4844,-131.3030,287.1215,353.2486}
};

// WestX, SouthY, EastX, NorthY
new Float:domination_gangzones[3][5] = {
	{143.3613, -128.9776, 219.1944, -82.1687, 1.5781}, 	// Apartments
	{68.4201, -277.2408, 170.5893, -221.8798, 1.5781},	// Construction
	{-124.1657, -68.0437, -54.4423, 29.2063, 3.1172} 	// Farm 
};

new PlayerText:domination_textDraws[DOMINATION_EVENT_SLOTS][5];

	
new HotLava_Weapons[5][2] = {
	{16, 1},
	{39, 1},
	{42, 100},
	{41, 100},
	{5, 1}
};

new Float:HotLavaSpawns[100][3] = {
	{-1325.04236, -38.99037, 316.83129},
	{-1325.06238, -43.00336, 316.83129},
	{-1325.03809, -50.95611, 316.83129},
	{-1325.04590, -46.95227, 316.83129},
	{-1325.03052, -54.90028, 316.83129},
	{-1325.05591, -58.83403, 316.83129},
	{-1325.07178, -35.13192, 316.83129},
	{-1325.03296, -31.16065, 316.83129},
	{-1325.05676, -27.14945, 316.83129},
	{-1332.91614, -23.24766, 316.83129},
	{-1328.99780, -23.25156, 316.83129},
	{-1325.07678, -23.26660, 316.83129},
	{-1360.57532, -23.26512, 316.83129},
	{-1356.60547, -23.25020, 316.83129},
	{-1336.87549, -23.25648, 316.83129},
	{-1340.83655, -23.27451, 316.83129},
	{-1344.75415, -23.24675, 316.83129},
	{-1348.70227, -23.25860, 316.83129},
	{-1352.66785, -23.27390, 316.83129},
	{-1360.57263, -27.19129, 316.83129},
	{-1360.58142, -31.11603, 316.83129},
	{-1360.60205, -35.10261, 316.83129},
	{-1360.60657, -39.06613, 316.83129},
	{-1360.59290, -43.00441, 316.83129},
	{-1360.56750, -46.99152, 316.83129},
	{-1360.57483, -50.97253, 316.83129},
	{-1360.60913, -54.95314, 316.83129},
	{-1360.62622, -58.91488, 316.83129},
	{-1356.66577, -58.90964, 316.83129},
	{-1356.59583, -27.16965, 316.83129},
	{-1356.59863, -31.12849, 316.83129},
	{-1356.62146, -35.10458, 316.83129},
	{-1356.63574, -39.08411, 316.83129},
	{-1356.60486, -42.99942, 316.83129},
	{-1356.61926, -46.98406, 316.83129},
	{-1356.63391, -50.95860, 316.83129},
	{-1356.64868, -54.95394, 316.83129},
	{-1352.67297, -58.90933, 316.83129},
	{-1352.65759, -54.93424, 316.83129},
	{-1352.64905, -50.95204, 316.83129},
	{-1352.64941, -46.97109, 316.83129},
	{-1352.67664, -42.99039, 316.83129},
	{-1352.65308, -39.08185, 316.83129},
	{-1352.63306, -35.06963, 316.83129},
	{-1352.62805, -31.11941, 316.83129},
	{-1352.63843, -27.19353, 316.83129},
	{-1348.68518, -58.90380, 316.83129},
	{-1348.67834, -54.92022, 316.83129},
	{-1348.67139, -50.93648, 316.83129},
	{-1348.66736, -46.97561, 316.83129},
	{-1348.67566, -43.00715, 316.83129},
	{-1348.67041, -39.08803, 316.83129},
	{-1348.66541, -35.10290, 316.83129},
	{-1348.63843, -31.13586, 316.83129},
	{-1348.69275, -27.20925, 316.83129},
	{-1344.70605, -58.87401, 316.83129},
	{-1344.70361, -54.90023, 316.83129},
	{-1344.68091, -50.93701, 316.83129},
	{-1344.69983, -46.93708, 316.83129},
	{-1344.70959, -42.99032, 316.83129},
	{-1344.74475, -39.07287, 316.83129},
	{-1344.72156, -35.11003, 316.83129},
	{-1344.76147, -31.14415, 316.83129},
	{-1344.75623, -27.22277, 316.83129},
	{-1340.72791, -54.91198, 316.83129},
	{-1340.72949, -50.92691, 316.83129},
	{-1340.72437, -58.89553, 316.83129},
	{-1340.79260, -46.92686, 316.83129},
	{-1340.80676, -42.99842, 316.83129},
	{-1340.80688, -39.03880, 316.83129},
	{-1340.82788, -35.11507, 316.83129},
	{-1340.83276, -31.12970, 316.83129},
	{-1340.84412, -27.22088, 316.83129},
	{-1336.87573, -27.20867, 316.83129},
	{-1336.89172, -31.10860, 316.83129},
	{-1336.86145, -35.05815, 316.83129},
	{-1336.84412, -39.01952, 316.83129},
	{-1336.82239, -43.02003, 316.83129},
	{-1336.82703, -46.96984, 316.83129},
	{-1336.82239, -50.89503, 316.83129},
	{-1336.81750, -54.90057, 316.83129},
	{-1336.84839, -58.88559, 316.83129},
	{-1332.99707, -58.88642, 316.83129},
	{-1332.91614, -54.87609, 316.83129},
	{-1332.92065, -50.94764, 316.83129},
	{-1332.94360, -46.99157, 316.83129},
	{-1332.93738, -43.02204, 316.83129},
	{-1332.93823, -39.02057, 316.83129},
	{-1332.95605, -35.09764, 316.83129},
	{-1332.95435, -31.13017, 316.83129},
	{-1332.91235, -27.20729, 316.83129},
	{-1329.00403, -58.87101, 316.83129},
	{-1328.97424, -54.88081, 316.83129},
	{-1328.94080, -50.97627, 316.83129},
	{-1328.98938, -46.95166, 316.83129},
	{-1329.00708, -42.98401, 316.83129},
	{-1329.02161, -38.99137, 316.83129},
	{-1328.97424, -35.12236, 316.83129},
	{-1328.97266, -31.15610, 316.83129},
	{-1328.98511, -27.15332, 316.83129}
};	

new LOD_Pickups_Wpns[24][2]={
	{38, 250},			// Weapons...
	{4, 1},				// Knife		
	{4, 1},
	{5, 1},				// Baseball bat
	{5, 1},
	{5, 1},
	{8, 1},				// Katana
	{8, 1},
	{8, 1},
	{16, 1},			// Grenade
	{22, 16},			// Colts	
	{22, 16},
	{24, 6},			// Deagle
	{24, 6},
	{24, 6},
	{25, 4},			// Shotgun
	{25, 4},
	{27, 4},			// Spaz
	{28, 16},			// Uzi	
	{29, 16},			// Tec9
	{29, 12},
	{33, 4},			// Rifle
	{-2, -1},			// Health
	{-3, -2}			// Armour	
};
	
new Float:LODSpawns[][] = {
//       {X,           Y,        Z,      F.Angle},
	{-1269.31079, -184.90305, 14.48314, 316.20010},
	{-1290.38855, -194.80191, 14.48314, 288.60019},
	{-1295.84851, -186.64136, 14.48314, 278.34042},
	{-1314.94373, -190.27203, 14.48314, 371.76038},
	{-1313.26184, -179.47920, 14.48314, 472.74030},
	{-1326.71619, -169.87340, 14.48314, 559.02032},
	{-1333.54614, -163.37999, 14.48314, 687.72015},
	{-1324.27710, -141.02721, 14.48314, 658.86047},
	{-1313.45068, -171.29492, 14.48314, 921.24042},
	{-1316.32080, -152.14087, 14.48314, 658.86047},
	{-1311.41321, -136.53891, 14.48314, 853.20038},
	{-1313.51331, -125.69548, 14.48314, 658.86047},
	{-1289.26099, -120.86032, 14.48314, 613.74091},
	{-1289.46631, -125.68723, 14.48314, 483.42111},
	{-1294.40320, -139.28931, 14.48314, 433.44128},
	{-1281.11902, -139.04866, 14.48314, 433.44128},
	{-1285.06506, -156.10376, 14.48314, 734.40088},
	{-1275.04504, -158.18692, 14.48314, 909.90088},
	{-1258.81458, -159.21292, 14.48314, 986.58105},
	{-1265.82983, -182.27867, 14.48314, 228.84012},
	{-1295.44727, -177.97021, 14.48314, 846.48071},
	{-1301.97693, -146.63158, 14.48314, 1064.52026},
	{-1305.83057, -163.73715, 14.48314, 1041.12012},
	{-1313.37573, -185.90051, 14.48314, 460.62039},
	{-1318.69202, -161.32632, 14.48314, 821.94043},
	{-1266.31335, -167.60268, 14.48314, 965.28082},
	{-1283.51465, -181.74178, 14.48314, 288.60019},
	{-1318.03076, -174.03755, 14.48314, 678.66016},
	{-1272.98914, -181.81252, 14.48314, 228.84012},
	{-1279.70813, -165.89082, 14.48314, 709.92096},
	{-1272.47229, -137.41809, 14.48314, 404.64114},
	{-1299.66858, -142.83426, 14.48314, 1224.78015},
	{-1301.51013, -126.38577, 14.48314, 1289.99988},
	{-1322.37671, -143.40271, 14.48314, 798.60046},
	{-1279.20776, -173.71681, 14.48314, 528.06079},
	{-1274.75757, -192.12358, 14.48314, 299.16016},
	{-1327.66943, -152.61955, 14.48314, 658.86047},
	{-1286.42285, -139.81818, 14.48314, 445.20129},
	{-1302.89551, -181.95766, 14.48314, 846.48071},
	{-1289.26941, -152.22482, 14.48314, 1284.06055},
	{-1293.30994, -165.06348, 14.48314, 1065.12048},
	{-1298.57678, -130.32242, 14.48314, 488.94128},
	{-1273.75208, -127.14831, 14.48314, 397.08121},
	{-1336.02368, -157.08954, 14.48314, 715.86035},
	{-1263.15369, -167.18446, 14.48314, 1072.92114},
	{-1285.36133, -126.66288, 14.48314, 1141.80090},
	{-1268.06006, -142.97409, 14.48314, 758.76086},
	{-1302.00891, -172.96091, 14.48314, 952.20056},
	{-1301.86499, -153.43987, 14.41613, 1130.22021},
	{-1312.75818, -153.16017, 14.48314, 797.82080}
};

new Float:LODWeapSpawns[][]=
{
//       {X           Y          Z},
	{-1300.97205, -159.67439, 13.83044},//Minigun
	{-1313.61536, -175.36996, 13.83044},
	{-1279.37183, -181.09349, 13.83044},
	{-1282.68872, -152.78357, 13.83044},
	{-1290.02942, -128.65575, 13.83044},
	{-1313.65784, -143.80534, 13.83044},
	{-1313.74316, -164.69156, 13.83044},
	{-1308.84253, -192.16008, 13.83044},
	{-1290.51270, -159.48505, 13.83044},
	{-1290.82776, -186.10498, 13.83044},
	{-1275.25024, -172.27773, 13.83044},
	{-1317.84070, -157.21277, 13.83044},
	{-1325.45667, -185.79550, 13.83044},
	{-1264.94653, -163.76163, 13.83044},
	{-1302.67725, -165.69922, 13.83044},
	{-1269.81775, -147.92334, 13.83044},
	{-1294.41589, -171.37044, 13.83044},
	{-1331.27710, -144.20746, 13.83044},
	{-1293.93787, -133.99074, 13.83044},
	{-1322.97827, -160.46480, 13.83044},
	{-1286.4387,-143.4553,13.83044},
	{-1305.2832,-123.7546,13.83044},
	{-1328.6385,-152.8032,13.83044},
	{-1274.6973,-160.9594,13.83044}
};


	/* Area 51*/

new Float:area51SpawnsCrim[][] = {
	{279.3872,1853.4196,8.7649,46.6290}, // scientists
	{279.3697,1857.1285,8.7578,86.3993}, // scientists
	{280.2726,1859.4811,8.7578,87.3393}, // scientists
	{280.0467,1863.3972,8.7578,132.7731}, // scientists
	{276.7597,1863.0476,8.7578,183.9194}, // scientists
	{273.2761,1862.8348,8.7649,176.0860}, // scientists
	{270.2394,1862.8462,8.7649,177.3394}, // scientists
	{266.1837,1862.7073,8.7649,177.3394}, // scientists
	{265.0922,1860.5519,8.7649,267.3394}, // scientists
	{264.8591,1858.8806,8.7578,267.3394}, // scientists
	{264.7762,1856.1311,8.7578,267.3394}, // scientists
	{264.8020,1853.6237,8.7578,267.2669}, // scientists
	{266.6061,1853.9335,8.7578,357.2668}, // scientists
	{268.2514,1852.7816,8.7578,357.2668}, // scientists
	{270.1913,1854.0057,8.7649,357.2668}, // scientists
	{272.4178,1854.2007,8.7649,357.2668}, // scientists
	{273.9746,1853.4885,8.7649,357.2668}, // scientists
	{275.8936,1854.1243,8.7649,357.2668}, // scientists
	{278.6028,1854.1470,8.7649,357.2668}, // scientists
	{271.3033,1857.2720,8.7578,356.8086}, // scientists
	{277.1699,1857.9691,8.7578,7.7753}, // scientists
	{274.6574,1870.0833,8.7578,188.0887} // scientists
};

new Float:area51SpawnsAF[][] = {
	{249.1421,1858.6547,14.0840,31.2755}, // specialforces
	{246.4541,1857.9417,14.0840,356.8085}, // specialforces
	{242.3931,1858.0775,14.0840,357.4352}, // specialforces
	{239.4496,1858.6327,14.0840,357.4352}, // specialforces
	{239.4159,1862.8751,14.0579,177.4352}, // specialforces
	{242.6534,1866.6704,11.4609,87.4352}, // specialforces
	{242.8867,1870.2795,11.4609,87.4352}, // specialforces
	{243.0420,1873.9398,11.4531,87.4352}, // specialforces
	{242.8285,1878.4154,11.4609,87.4352}, // specialforces
	{240.5322,1879.2211,11.4609,177.4352}, // specialforces
	{238.9083,1877.0898,11.4609,267.4352}, // specialforces
	{239.2016,1873.7242,11.4609,267.4352}, // specialforces
	{224.1701,1868.5939,13.1406,96.7394}, // specialforces
	{224.1644,1864.7734,13.1406,96.7394}, // specialforces
	{223.9597,1860.0316,13.1470,96.7394}, // specialforces
	{220.4644,1855.2480,12.9439,96.7394}, // specialforces
	{211.6315,1857.9827,13.1406,276.7394}, // specialforces
	{205.3705,1860.3811,13.1406,276.7394}, // specialforces
	{205.6592,1864.9984,13.1406,276.7394}, // specialforces
	{205.0756,1870.8951,13.1406,276.7394}, // specialforces
	{210.2287,1873.6332,13.1406,186.7395}, // specialforces
	{213.9226,1873.4716,13.1406,186.7395} // specialforces
};

	/* Army vs. Terrorists */

new Float:armySpawnsType1[][] = {
	{-536.6452,1309.3185,3.7102,143.2186},
	{-535.7869,1307.3175,3.6655,144.8415},
	{-534.9776,1304.9730,3.5959,138.3177},
	{-534.4557,1302.6029,3.6028,133.0472},
	{-880.8651,1621.5620,30.8952,152.0271},
	{-880.4622,1617.4822,33.4015,245.7476},
	{-873.7017,1618.7975,33.4030,60.9587},
	{-883.3175,1615.1110,35.7468,240.8466},
	{-854.6778,1376.1045,1.2741,311.1262},
	{-851.0994,1372.8354,1.2741,315.1996}
};

new Float:armySpawnsType2[][] = {
	{-726.8176,1533.9048,40.1724,353.1638},
	{-729.1471,1534.0126,40.1633,356.0400},
	{-731.5231,1535.9725,40.2617,268.3620},
	{-729.3406,1538.0480,40.3969,2.6762},
	{-732.8348,1538.6995,40.4118,263.7181},
	{-730.0102,1539.9668,40.5042,164.1335},
	{-734.8888,1544.8472,39.0736,264.7473},
	{-734.6887,1547.8004,38.9713,266.9969},
	{-734.5697,1545.9861,41.5462,266.4031},
	{-734.1703,1555.2683,39.8209,272.7589}
};

	/* Big Smoke */

new Float:BigSmokeSpawns[][] = {
	{2532.9614,-1281.3271,1048.2891},
	{2524.3040,-1281.9133,1048.2891},
	{2520.3289,-1280.6376,1054.6406},
	{2542.9700,-1282.7721,1054.6406},
	{2542.3420,-1300.4220,1054.6406},
	{2546.8904,-1288.1726,1054.6406},
	{2553.3010,-1281.7985,1054.6470},
	{2568.7739,-1306.1091,1054.6406},
	{2581.2690,-1301.6436,1060.9922},
	{2579.9753,-1285.3286,1065.3594},
	{2551.5872,-1294.1041,1060.9844},
	{2568.3835,-1283.0282,1044.1250},
	{2575.8843,-1283.1638,1044.1250},
	{2566.9451,-1297.7665,1037.7734},
	{2566.3384,-1282.9639,1031.4219},
	{2572.0032,-1304.9718,1031.4219},
	{2546.4976,-1301.6432,1031.4219},
	{2530.7329,-1289.0771,1031.4219},
	{2527.4521,-1289.3014,1031.4219},
	{2543.1543,-1321.8826,1031.4219}
};

	/* Compound */

new Float:terroristcoumpoundattack[][] = {
	{-2180.1060,-268.1125,36.5156,273.4774}, // terrorits
	{-2180.0811,-265.7807,36.5156,269.0100}, // terrorits
	{-2180.0684,-263.1395,36.5156,271.2192}, // terrorits
	{-2179.9485,-260.2129,36.5156,267.1994}, // terrorits
	{-2179.9487,-257.7114,36.5156,267.1044}, // terrorits
	{-2184.7568,-253.8005,36.5156,267.2739}, // terrorits
	{-2184.5247,-251.0279,36.5156,265.7572}, // terrorits
	{-2184.3416,-248.1582,36.5156,266.0979}, // terrorits
	{-2184.1201,-245.0245,36.5156,264.3055}, // terrorits
	{-2183.7273,-242.0624,36.5156,263.6901}, // terrorits
	{-2185.4993,-238.8463,36.5220,268.0169}, // terrorits
	{-2185.2302,-235.9542,36.5220,264.1762}, // terrorits
	{-2184.8584,-232.8474,36.5156,267.1653}, // terrorits
	{-2184.5327,-230.1497,36.5156,262.6979}, // terrorits
	{-2181.9202,-227.0722,36.5156,260.0210}, // terrorits
	{-2170.1748,-237.7798,36.5156,357.3499}, // terrorits
	{-2166.4485,-237.7726,36.5156,358.0706} // terrorits
};

new Float:swatcompoundattack[][] = {
	{-1572.7030,748.0657,-5.2422,93.3019}, // cop
	{-1572.6538,744.2728,-5.2422,93.1385}, // cop
	{-1572.8400,740.5297,-5.2422,85.7576}, // cop
	{-1573.1174,736.6428,-5.2422,85.6028}, // cop
	{-1573.5133,732.7161,-5.2422,82.8390}, // cop
	{-1573.8737,728.5589,-5.2422,83.8352}, // cop
	{-1574.3877,724.3843,-5.2422,82.0114}, // cop
	{-1574.6088,719.8906,-5.2422,84.5743}, // cop
	{-1574.9963,715.1602,-5.2422,83.6905}, // cop
	{-1575.2784,708.9619,-5.2422,91.8934}, // cop
	{-1575.7524,702.8419,-4.9063,83.4896}, // cop
	{-1575.9858,697.0717,-4.9063,87.6192}, // cop
	{-1576.4403,691.0716,-5.2422,86.7354}, // cop
	{-1582.4408,684.6136,-5.2422,87.4182}, // cop
	{-1582.5164,680.3119,-4.9063,85.9078}, // cop
	{-1583.1206,676.1038,-4.9063,80.6373}, // cop
	{-1592.8230,674.3566,-4.9140,352.2764} // cop
};

	/* Drug Run */

new Float:drugSpawnsType1[][] = {
	{386.3043,2548.5906,16.5391,174.1982},
	{386.2205,2546.2419,16.5391,177.9582},
	{386.1368,2543.9036,16.5391,177.9582},
	{386.0403,2541.1985,16.5391,177.9582},
	{385.9525,2538.7400,16.5391,177.9582},
	{385.8694,2536.4104,16.5391,177.9582},
	{385.7797,2533.8972,16.5391,177.9582},
	{385.6798,2531.1011,16.5491,177.9582},
	{383.5614,2530.6782,16.5759,177.9582},
	{383.5607,2533.7908,16.5391,177.9582},
	{383.8788,2536.5457,16.5391,177.9582},
	{383.9685,2539.5559,16.5391,177.9582},
	{383.9574,2542.3435,16.5391,177.9582},
	{383.9225,2544.8630,16.5391,177.9582},
	{383.7946,2547.6460,16.5391,177.9582},
	{381.6566,2547.5417,16.5391,177.9582},
	{381.5372,2544.2039,16.5391,177.9582},
	{381.4406,2541.4956,16.5391,177.9582},
	{381.3459,2538.8496,16.5391,177.9582},
	{381.2657,2536.6025,16.5391,177.9582},
	{381.1742,2534.0408,16.5482,177.9582},
	{381.0813,2531.4390,16.5880,177.9582},
	{379.1826,2531.0791,16.5973,177.9582},
	{379.3771,2533.8757,16.5763,177.9582},
	{379.3782,2536.8149,16.5391,177.9582},
	{378.6484,2539.3767,16.5391,177.9582},
	{379.3178,2540.9807,16.5391,177.9582},
	{379.2309,2544.4143,16.5391,177.9582},
	{379.1219,2547.0881,16.5391,177.9582},
	{379.1389,2548.8113,16.5391,177.9582}
};

new Float:drugSpawnsType2[][] = {
	{1754.4464,-1886.6516,13.5569,271.7347},
	{1756.4623,-1886.5906,13.5564,271.7347},
	{1759.0895,-1886.5109,13.5558,271.7347},
	{1761.2360,-1886.4458,13.5553,271.7347},
	{1763.8300,-1886.3678,13.5546,271.7347},
	{1766.9156,-1886.2738,13.5539,271.7347},
	{1769.2448,-1886.2031,13.5533,271.7347},
	{1769.6971,-1888.5441,13.5601,271.7347},
	{1767.4825,-1888.3868,13.5537,271.7347},
	{1765.1946,-1888.3080,13.5543,271.7347},
	{1762.0735,-1888.4391,13.5551,271.7347},
	{1758.4504,-1887.7513,13.5559,271.7347},
	{1755.7251,-1888.0513,13.5566,271.7347},
	{1752.6431,-1888.3499,13.5574,271.7347},
	{1752.7349,-1890.3278,13.5573,271.7347},
	{1755.6147,-1890.4915,13.5566,271.7347},
	{1758.5013,-1890.4045,13.5559,271.7347},
	{1761.5813,-1890.3114,13.5552,271.7347},
	{1764.6033,-1890.2196,13.5544,271.7347},
	{1767.3138,-1890.1372,13.5603,271.7347},
	{1770.0690,-1890.0535,13.5610,271.7347},
	{1770.9042,-1892.0048,13.5621,271.7347},
	{1768.0706,-1891.3242,13.5611,271.7347},
	{1765.2567,-1891.3208,13.5604,271.7347},
	{1763.0635,-1891.2950,13.5548,271.7347},
	{1760.6603,-1891.1453,13.5554,271.7347},
	{1758.0073,-1891.5461,13.5561,271.7347},
	{1755.7379,-1891.1418,13.5566,271.7347},
	{1753.4752,-1891.4116,13.5572,271.7347},
	{1753.9664,-1893.4374,13.5570,271.7347},
	{1755.9385,-1893.3779,13.5566,271.7347}
};

// Plane event

new Float:PlaneSpawnType1[][] = {
	{1328.5518,-1559.9976,85.5482,261.6124},    //Rooftop dawgs
	{1329.3683,-1557.3896,85.5463,261.6124},	//Rooftop dawgs
	{1330.0658,-1555.1370,85.5476,261.6124},    //Rooftop dawgs
	{1330.5431,-1552.1804,85.5474,261.6124},    //Rooftop dawgs
	{1331.0220,-1548.7018,85.5472,261.6124},    //Rooftop dawgs
	{1332.2554,-1546.1392,85.5466,261.6124},    //Rooftop dawgs
	{1332.7635,-1543.0079,85.5463,261.6124},    //Rooftop dawgs
	{1333.5088,-1540.2433,85.5416,261.6124},    //Rooftop dawgs
	{1334.3801,-1537.4669,85.5403,261.6124},    //Rooftop dawgs
	{1344.9246,-1538.3875,85.5469,261.6124},    //Rooftop dawgs
	{1344.9893,-1542.0388,85.5469,261.6124},    //Rooftop dawgs
	{1345.0310,-1545.0365,85.5469,261.6124},    //Rooftop dawgs
	{1345.0284,-1548.6929,85.5469,261.6124},    //Rooftop dawgs
	{1344.9261,-1553.1475,85.5469,261.6124},    //Rooftop dawgs
	{1345.2081,-1555.5400,85.5469,261.6124},    //Rooftop dawgs
	{1344.5015,-1558.4845,85.5469,261.6124},    //Rooftop dawgs
	{1344.6753,-1561.6006,85.5469,261.6124},    //Rooftop dawgs
	{1344.7461,-1564.0417,85.5469,261.6124},    //Rooftop dawgs
	{1355.2986,-1568.8292,85.5469,255.3456},    //Rooftop dawgs
	{1356.7955,-1566.4377,85.5469,255.3456},    //Rooftop dawgs
	{1358.2108,-1563.1442,85.5469,255.3456},    //Rooftop dawgs
	{1358.7550,-1560.6874,85.5469,255.3456},    //Rooftop dawgs
	{1359.8666,-1557.1820,85.5469,255.3456},    //Rooftop dawgs
	{1360.7386,-1553.7102,85.5469,255.3456},    //Rooftop dawgs
	{1362.2638,-1551.1743,85.5469,255.3456},    //Rooftop dawgs
	{1363.5792,-1548.6090,85.5469,255.3456},    //Rooftop dawgs
	{1363.4777,-1545.8019,85.5469,255.3456},    //Rooftop dawgs
	{1364.0255,-1543.0754,85.5469,255.3456},    //Rooftop dawgs
	{1365.5203,-1540.6907,85.5469,255.3456}    	//Rooftop dawgs
};

new Float:planeSpawnsType2[][] = {
	{1925.0658,-2493.0122,13.5391,357.6970},    //Plane boiis
	{1931.4568,-2492.7917,13.5391,357.6970},    //Plane boiis
	{1928.3070,-2500.7466,13.5391,5.5304}    	//Plane boiis
};

new Float:PlaneVehicles[][e_DrugRunVehicles] = { // 9 vehicles
	{476,1975.9609,-2465.9646,14.2023,1.1585},      //Rustler
	{476,1964.0143,-2466.1470,14.2526,358.0305},    //Rustler
	{513,1951.4690,-2465.6086,14.0839,4.4540},      //Stunt
	{513,1942.2288,-2467.2751,14.0909,5.0026},      //Stunt
	{511,1926.2672,-2467.2434,14.9142,0.1272},      //Bigugly shit
	{512,1909.5729,-2469.3928,13.8225,4.2735},      //Crop/farm plane
	{512,1897.4233,-2469.6670,13.8198,1.8400},      //Crop/farm plane
	{553,1902.1135,-2493.8718,14.8745,91.1515},     //Big one
	{519,1952.4246,-2493.4648,14.4610,270.0481}     //Shamal
};

new DrugRunVehicles[][e_DrugRunVehicles] =
{
	{431, 1804.9897, -1928.3383, 13.4915, 359.5247},
	{567,1805.2609,-1911.4696,13.2676,359.9748},
	{567,1796.8599,-1931.1780,13.2519,2.8630},
	{536,1785.3833,-1931.5442,13.1238,0.4821},
	{567,1790.4397,-1931.3499,13.2531,359.2782},
	{560,1778.6602,-1932.2065,13.0915,359.6266},
	{522,1775.8104,-1925.5791,12.9557,228.7756},
	{455,1776.7750,-1911.1565,13.8224,182.1264},
	{433,325.4319,2541.5896,17.2446,178.8733},
	{433,291.5707,2542.2861,17.2572,181.1078},
	{470,331.9542,2527.1885,16.7732,89.7045},
	{470,339.5666,2527.3247,16.7636,89.7131},
	{470,345.7501,2527.4158,16.7324,90.8450},
	{470,352.0356,2527.3730,16.7001,90.3715},
	{470,358.3670,2527.4417,16.6720,91.0383},
	{470,364.3454,2527.4082,16.6404,89.8504}
};

	/* Hydra */

new Float:hydraSpawnsType1[][] = {
	{1939.58178711,1365.82348633,16.76304626,272.00000000},
	{1939.77551270,1323.51635742,16.76304626,271.50000000},
	{1968.00170898,1185.41442871,63.80590057,0.00000000},
	{1955.27209473,1173.72131348,63.80590439,180.00000000},
	{2163.80175781,1502.10534668,32.08264542,320.00000000},
	{2164.01171875,1463.47900391,32.08404922,222.00000000},
	{2106.23974609,1462.88977051,32.08428955,124.00000000},
	{2106.60009766,1502.69543457,32.08437729,52.00000000},
	{1950.36877441,1628.54748535,23.68749237,272.00000000},
	{1953.65820312,1603.13574219,73.17739105,39.99572754},
	{1906.02832031,1628.63964844,73.17739105,270.00000000},
	{1955.29699707,1655.69946289,73.17520905,39.99572754}
};

	/* Jeff TDM */

new Float:motelSpawnsType1[][] = {
	{2189.9846,-1139.2814,1029.7969,238.2805},
	{2189.1294,-1143.9292,1029.7969,273.2783},
	{2191.0825,-1146.8323,1029.7969,3.2783},
	{2196.0771,-1147.2567,1029.7969,3.2783},
	{2199.7551,-1147.3477,1029.7969,3.2783},
	{2202.3135,-1144.9834,1029.7969,90.6991},
	{2201.8625,-1143.1967,1029.7969,90.6991},
	{2199.8345,-1142.1290,1029.7969,180.9399},
	{2199.4023,-1139.0775,1029.7969,180.9399},
	{2196.8816,-1138.9806,1029.7969,180.9399},
	{2194.9197,-1139.0475,1029.7969,180.9399},
	{2194.1277,-1143.8186,1029.7969,0.9399},
	{2197.0967,-1144.2506,1029.7969,267.8791},
	{2193.4351,-1145.3593,1029.7969,181.3983},
	{2190.3499,-1142.9524,1030.3516,265.8307}
};

new Float:motelSpawnsType2[][] = {
	{2221.1633,-1154.1404,1025.7969,357.2927}, // Spawn1
	{2219.7998,-1153.8639,1025.7969,351.7650}, // Spawn2
	{2218.6963,-1153.5408,1025.7969,346.4945}, // Spawn3
	{2216.5090,-1152.4301,1025.7969,305.1901}, // Spawn4
	{2215.8010,-1150.7072,1025.7969,268.6424}, // Spawn5
	{2215.8596,-1149.2339,1025.7969,270.2654}, // Spawn6
	{2216.0044,-1147.0659,1025.7969,269.3816}, // Spawn7
	{2218.3806,-1147.1096,1025.7969,178.2570}, // Spawn8
	{2219.6746,-1145.5049,1025.7969,272.0005}, // Spawn9
	{2224.2832,-1142.2668,1025.7969,178.9960}, // Spawn10
	{2225.2764,-1145.0853,1025.7969,138.9451}, // Spawn11
	{2226.0496,-1147.5005,1025.7969,108.6078}, // Spawn12
	{2226.9717,-1150.2124,1025.7969,90.1771}, // Spawn13
	{2224.8855,-1150.6051,1025.7969,83.0266},// Spawn14
	{2219.8657,-1149.2186,1025.7969,268.5779}, // Spawn15
	{2218.7021,-1150.7179,1025.7969,180.3060}, // Spawn16
	{2218.6985,-1148.3522,1025.7969,353.6372} // Spawn17
};

	/* Mad Doggs */

new Float:MadDogSpawns[][] = {
	{1263.6385,-785.9014,1091.9063,350.3100},
	{1286.0574,-773.1819,1091.9063,125.5029},
	{1273.1113,-786.8727,1089.9299,234.6888},
	{1287.5909,-787.6873,1089.9375,168.4299},
	{1275.2504,-806.2203,1089.9375,343.1032},
	{1287.5999,-803.9429,1089.9375,163.7300},
	{1274.9194,-812.7767,1089.9375,237.6540},
	{1287.4939,-817.5425,1089.9375,173.1067},
	{1283.2192,-836.4002,1089.9375,2.6517},
	{1278.3448,-811.8217,1085.6328,169.6600},
	{1291.7516,-826.0576,1085.6328,175.3000},
	{1258.6934,-836.8271,1084.0078,266.1441},
	{1247.4591,-828.0005,1084.0078,281.1843},
	{1241.9280,-821.6576,1083.1563,165.1048},
	{1231.1757,-808.4885,1084.0078,145.0280},
	{1243.5769,-817.6377,1084.0078,47.9172},
	{1267.7944,-812.7502,1084.0078,4.0501},
	{1245.6238,-803.8966,1084.0078,274.1459},
	{1270.5660,-795.3015,1084.1719,350.1416},
	{1253.7341,-793.5455,1084.2344,260.3591},
	{1234.2546,-756.3163,1084.0150,180.9400},
	{1256.3524,-767.4749,1084.0078,196.7027},
	{1261.5895,-779.9619,1084.0078,4.8685},
	{1276.6580,-765.4781,1084.0078,177.5891},
	{1303.3036,-781.4746,1084.0078,87.0349},
	{1297.5220,-794.7298,1084.0078,358.2882}
};

	/* Minigun  */

new Float:minigunSpawnsType1[][] = {
	{1360.8236,2197.9639,9.7578,171.2087},
	{1396.4573,2176.7610,9.7578,84.2131},
	{1397.0870,2157.2017,11.0234,188.2790},
	{1410.2015,2100.4004,12.0156,359.9406},
	{1406.4691,2123.8171,17.2344,90.5182},
	{1406.5967,2183.2200,17.2344,84.8548},
	{1296.8109,2212.5212,12.0156,265.6498},
	{1300.6083,2207.5505,17.2344,183.5323},
	{1359.4872,2208.0378,17.2344,179.7720},
	{1298.4968,2198.1011,11.0234,178.2052},
	{1304.8771,2101.3682,11.0156,275.3395},
	{1396.1423,2101.5391,11.0156,89.8678},
	{1384.2648,2185.5144,11.0234,134.6748},
	{1330.3446,2204.9385,13.3759,358.6869},
	{1403.9540,2153.5938,13.2266,274.7129},
	{1396.5599,2103.8850,39.0228,48.1240},
	{1302.0127,2197.8630,39.0228,225.1588}
};

	/* Navy vs. Terrorists */

new Float:navySealsBoat[][] = {
	{-1451.8934,489.2393,3.0414,0.9636},
	{-1439.5277,489.2123,3.0414,357.9584},
	{-1435.7106,491.3882,3.0391,93.1610}, // Boatspawn_3
	{-1436.4033,495.6390,3.0391,93.1610}, // Boatspawn_4
	{-1446.0100,501.4157,3.0414,87.9335}, // Boatspawn_5
	{-1439.6398,501.8853,3.0414,359.0356}, // Boatspawn_6
	{-1432.6844,504.3380,3.0414,88.6373}, // Boatspawn_7
	{-1433.0454,508.8413,3.0414,88.6373}, // Boatspawn_8
	{-1437.2540,513.3931,3.0414,174.5301}, // Boatspawn_9
	{-1453.8115,513.5035,3.0414,177.5172}, // Boatspawn_10
	{-1424.9127,513.7139,3.0391,88.2392}, // Boatspawn_11
	{-1424.7781,508.5562,3.0391,95.7319}, // Boatspawn_12
	{-1426.6696,503.5713,3.0391,89.7576 }, // Boatspawn_13
	{-1427.1627,497.9672,3.0391,89.7576}, // Boatspawn_14
	{-1428.3741,492.3010,3.0391,89.7576}, // Boatspawn_15
	{-1429.5172,488.9036,3.0391,103.5731}, // Boatspawn_16
	{-1347.6814,500.0701,18.2344,3.1124} // Boatspawn_17
};

new Float:navyVehicles[][e_DrugRunVehicles] = { // 9 vehicles
	{476,-1270.1177,499.6811,18.9408,269.5298},
	{476,-1293.3729,492.2342,18.9422,270.5231},
	{476,-1303.7994,508.0874,18.9414,269.9069},
	{476,-1404.7931,493.4467,18.9422,356.9377},
	{476,-1458.4177,501.1433,18.9834,270.8403},
	{497,-1418.0540,516.1037,18.4192,270.9501},
	{497,-1420.1477,492.0164,18.4092,357.8716},
	{430,-1445.0782,497.6998,-0.2108,89.1427},
	{430,-1438.6812,504.7648,-0.1138,93.3837},
	{430,-1438.7063,509.4692,-0.1682,91.9946},
	{430,-1471.4034,488.0244,-0.2879,90.2242},
	{473,-1444.8440,491.8952,-0.2713,90.8142}
};

new Float:NavyTerroristVehicles[][e_DrugRunVehicles] = {
	{473,-544.2135,1290.1025,-0.2869,60.3390},
	{473,-545.9045,1301.1432,-0.2776,69.1840},
	{473,-544.9697,1308.0038,-0.2525,64.3189}
};

new Float:compoundVehicles[][e_DrugRunVehicles] = {
 	{497,-1630.3750,654.6266,7.3591,268.2673},
 	{497,-1604.6624,655.1348,7.3591,273.0138},
 	{490,-1616.0300,742.7470,-4.9922,89.5245},
    {490,-1604.0100,741.7650,-4.9922,87.7661},
    {490,-1593.0900,741.0660,-4.9922,87.6814},
    {490,-1582.0300,740.5920,-4.9922,87.4882},
    {490,-1581.0500,724.7320,-4.9922,359.0400},
    {490,-1581.0800,710.8540,-4.9922,358.8570},
    {490,-1581.7600,699.9149,-4.9844,358.7741}
};
	

new Float:terroristsBoat[][] = {
	{-1434.3325,1481.8838,1.8672,276.5517},
	{-1434.2948,1484.1460,1.8672,268.4611},
	{-1434.2507,1486.6434,1.8672,268.5173},
	{-1434.2252,1489.7177,1.8672,268.5735},
	{-1434.3741,1494.6810,1.8672,267.6897},
	{-1433.8632,1498.0852,1.8672,263.3593},
	{-1413.2545,1497.2257,1.8672,265.6650},
	{-1406.1989,1497.3625,1.8672,271.3051},
	{-1394.2034,1497.2762,1.8735,271.3051},
	{-1390.7335,1493.5171,1.8735,86.3641},
	{-1390.7863,1490.1801,1.8735,88.0595},
	{-1391.1282,1486.5408,1.8672,82.7890},
	{-1391.2137,1483.8008,1.8672,84.7253},
	{-1391.6104,1480.9357,1.8672,85.0948},
	{-1400.5376,1482.9449,1.8672,90.7348},
	{-1408.2819,1483.0409,1.8672,90.7348}
};

	/* Oil Rig */

new Float:swatoilrigspawns1[][] = {
	{-4989.2671,-1060.4849,62.3481,268.9522}, // SWATspawn1
	{-4989.2139,-1058.8197,62.3481,269.9485}, // SWATspawn2
	{-4989.2607,-1056.6619,62.3481,265.9313}, // SWATspawn3
	{-4989.2803,-1054.1078,62.3481,269.1208}, // SWATspawn4
	{-4989.1377,-1051.6665,62.3481,267.9237}, // SWATspawn5
	{-4989.0537,-1049.2660,62.3481,268.2932}, // SWATspawn6
	{-4989.0015,-1046.9961,62.3481,268.3495}, // SWATspawn7
	{-4988.9907,-1044.8541,62.3481,269.0324}, // SWATspawn8
	{-4989.0864,-1042.5729,62.3481,269.0886}, // SWATspawn9
	{-4984.8403,-1042.4364,62.3481,269.1448}, // SWATspawn10
	{-4984.7739,-1044.3013,62.3481,268.5744}, // SWATspawn11
	{-4984.6982,-1046.3790,62.3481,268.6869}, // SWATspawn12
	{-4984.5972,-1048.5526,62.3481,268.7432}, // SWATspawn13
	{-4984.3262,-1051.0364,62.3481,268.4861}, // SWATspawn14
	{-4984.2212,-1053.4729,62.3481,271.9891}, // SWATspawn15
	{-4984.1616,-1055.9543,62.3481,269.2253}, // SWATspawn16
	{-4984.1226,-1058.9647,62.3481,267.7148} // SWATspawn17
};

new Float:terroristoilrigspawns1[][] = { // terrorissts
	{-4848.1548,-1105.7831,52.1931,89.7017}, // Terrorspawn1
	{-4848.2217,-1104.4656,52.1929,87.5171}, // Terrorspawn2
	{-4848.2749,-1102.7365,52.1956,89.8487}, // Terrorspawn4
	{-4848.3560,-1101.0161,52.2002,89.0294}, // Terrorspawn3
	{-4848.4229,-1099.3506,52.2047,88.4292}, // Terrorspawn5
	{-4848.5532,-1097.4938,52.2097,88.2838}, // Terrorspawn6
	{-4848.5591,-1095.4310,52.2152,88.8179}, // Terrorspawn7
	{-4848.6245,-1093.4357,52.2206,87.7901}, // Terrorspawn8
	{-4854.3359,-1106.2627,52.1862,93.3493}, // Terrorspawn9
	{-4854.3325,-1104.7566,52.1902,89.1057}, // Terrorspawn10
	{-4854.3599,-1103.3361,52.1940,87.8238}, // Terrorspawn11
	{-4854.4463,-1101.3271,52.1994,91.0379}, // Terrorspawn12
	{-4854.5317,-1099.6100,52.2040,89.9278}, // Terrorspawn13
	{-4854.5986,-1097.7080,52.2283,89.0495}, // Terrorspawn14
	{-4854.8691,-1095.8661,52.2276,93.9821}, // Terrorspawn15
	{-4854.9053,-1094.2699,52.2275,89.5147}, // Terrorspawn16
	{-4854.8970,-1092.4136,52.2275,85.0473} // Terrorspawn17
};

	/* Pursuit */

new Float:pursuitVehicles[][] = {
	{612.4984,-1224.6945,17.8323,289.7163}, // Pursuit vehicle  0
	{565.6188,-1244.3657,16.9157,295.8679}, // 
	{566.4626,-1238.9558,16.9824,294.7580},	// 
	{563.5314,-1232.3390,16.9785,293.8539}, //
	{562.1167,-1228.7739,16.9802,293.5553}, //
	{570.1106,-1219.6626,17.3587,264.5331}, //
	{581.5428,-1241.3715,17.4123,324.3894}, //
	{546.8007,-1234.5836,16.5933,301.3257}, //
	{548.7852,-1240.2753,16.5859,298.6667}, //
	{551.3083,-1245.8103,16.5883,298.6719}, //
	{550.2395,-1282.4430,17.4245,335.9597}, // Maverick 1   10
	{553.7662,-1248.9722,16.6187,302.2399}, //
	{544.7589,-1254.8802,16.3637,304.2602}, //
	{542.4852,-1250.9253,16.3521,300.5960}, //
	{540.0701,-1245.4398,16.3468,303.6496}, //
	{537.5844,-1241.2225,16.3265,301.9268}, //
	{530.2521,-1246.8922,16.1160,306.0346}, //
	{532.6643,-1250.7150,16.1437,305.6226}, //
	{536.0997,-1255.8051,16.1669,304.6418}, //
	{538.0214,-1259.7885,16.1732,306.9165}, //
	{523.6465,-1252.1454,15.9460,307.8360}, //
	{525.4552,-1256.6023,15.9496,307.9929}, //
	{529.3110,-1260.3461,16.0049,305.8422}, //
	{532.2231,-1264.5140,16.0315,306.3712}, //
	{535.8637,-1280.3307,17.4137,324.3655}  // Maverick 2 24
};

new Float:HSpursuitVehicles[][] = {
    {612.4984,-1224.6945,17.8323,289.7163}, // Pursuit vehicle  0
	{565.6188,-1244.3657,16.9157,295.8679}, // 
	{566.4626,-1238.9558,16.9824,294.7580}, //
	{563.5314,-1232.3390,16.9785,293.8539}, //
	{562.1167,-1228.7739,16.9802,293.5553}, //
	{570.1106,-1219.6626,17.3587,264.5331}, //
	{581.5428,-1241.3715,17.4123,324.3894}, //
	{546.8007,-1234.5836,16.5933,301.3257}, //
	{548.7852,-1240.2753,16.5859,298.6667}, //
	{551.3083,-1245.8103,16.5883,298.6719}, //
	{553.7662,-1248.9722,16.6187,302.2399}, //
	{544.7589,-1254.8802,16.3637,304.2602}, //
	{542.4852,-1250.9253,16.3521,300.5960}, //
	{540.0701,-1245.4398,16.3468,303.6496}, //
	{537.5844,-1241.2225,16.3265,301.9268}, //
	{530.2521,-1246.8922,16.1160,306.0346}, //
	{532.6643,-1250.7150,16.1437,305.6226}, //
	{536.0997,-1255.8051,16.1669,304.6418}, //
	{538.0214,-1259.7885,16.1732,306.9165}, //
	{523.6465,-1252.1454,15.9460,307.8360}, //
	{525.4552,-1256.6023,15.9496,307.9929}, //
	{529.3110,-1260.3461,16.0049,305.8422}, //
	{532.2231,-1264.5140,16.0315,306.3712}, //
	{550.2395,-1282.4430,17.4245,335.9597}, // Maverick 1  23
	{535.8637,-1280.3307,17.4137,324.3655}  // Maverick 2 24
};

	/* Sumo */

new Float:sumoSpawnsType1[15][4] =
{
	{3770.844238, -1525.422973, 36.218750, 165.782379},
	{3760.332275, -1526.346435, 36.218750, 165.782379},
	{3781.483886, -1496.333984, 36.218650, 165.782379},
	{3747.465820, -1493.134521, 36.218750, 165.782379},
	{3753.536376, -1434.557739, 36.169601, 165.782379},
	{3778.360351, -1435.679443, 36.169586, 165.782379},
	{3632.698974, -1549.674072, 36.247207, 170.496109},
	{3651.617675, -1549.627441, 36.247196, 170.496109},
	{3664.941894, -1527.715209, 36.247135, 170.496109},
	{3621.671630, -1490.709472, 36.247188, 170.496109},
	{3665.038574, -1485.096679, 36.247230, 170.496109},
	{3634.828857, -1405.810913, 36.234485, 170.496109},
	{3622.596191, -1338.279785, 36.238059, 170.496109},
	{3622.376708, -1264.447509, 36.170368, 170.496109},
	{3681.760498, -1316.780395, 36.240844, 170.496109}
};

new Float:sumoSpawnsType2[15][4] = {
	{4791.94726562,-2043.65002441,14.0,82.00000000},
	{4790.67578125,-2049.04931641,14.0,71.99597168},
	{4788.72070312,-2053.98779297,14.0,65.99340820},
	{4786.09472656,-2058.88867188,14.0,55.98986816},
	{4792.23144531,-2037.80468750,14.0,95.99597168},
	{4791.53466797,-2032.01013184,14.0,101.99304199},
	{4790.06250000,-2026.42871094,14.0,111.99157715},
	{4787.96728516,-2021.58862305,14.0,119.98913574},
	{4784.91601562,-2016.86865234,14.0,129.98718262},
	{4780.93212891,-2012.68615723,14.0,137.98461914},
	{4777.05224609,-2009.32250977,14.0,141.98266602},
	{4772.77148438,-2006.47973633,14.0,151.98132324},
	{4767.81347656,-2004.35412598,14.0,161.98144531},
	{4762.79931641,-2002.90576172,14.0,168.48138428},
	{4757.82128906,-2002.34020996,14.0,177.98120117}
};

new Float:sumoSpawnsType3[15][4] = {
	{1488.4178,6265.4429,27.5201,359.7072},
	{1488.2949,6232.3647,27.4989,359.8356},
	{1469.1898,6246.8521,27.2210,90.6164},
	{1502.7943,6247.6836,27.7414,88.2535},
	{1405.6884,6244.0596,25.9826,139.4007},
	{1320.5160,6202.5352,26.0507,96.7300},
	{1280.3342,6213.2788,26.0509,95.6704},
	{1257.2800,6277.6987,26.0462,358.0646},
	{1282.4304,6320.6533,26.0062,322.3025},
	{1401.2308,6351.6323,26.8068,275.0645},
	{1446.4875,6319.3984,23.5806,199.6965},
	{1478.3333,6296.5176,25.7071,270.5961},
	{1535.2900,6257.3018,25.6623,186.7137},
	{1531.9629,6193.7227,25.7719,16.0374},
	{1631.1805,6259.5181,25.7823,176.3534}
};

new Float:sumoSpawnsType4[15][4] = {
	{-1484.40002441,949.40002441,1037.90002441,334.00000000},
	{-1488.30004883,951.59997559,1037.90002441,333.99536133},
	{-1492.69995117,954.00000000,1037.90002441,333.99536133},
	{-1497.09997559,957.29998779,1037.90002441,333.99536133},
	{-1501.09997559,960.90002441,1037.90002441,327.99536133},
	{-1504.40002441,964.20001221,1038.00000000,333.99536133},
	{-1508.40002441,968.40002441,1037.80004883,333.99536133},
	{-1511.69995117,971.70001221,1038.09997559,333.99536133},
	{-1514.69995117,975.59997559,1038.19995117,325.99536133},
	{-1517.40002441,980.50000000,1038.19995117,309.99536133},
	{-1518.90002441,984.29998779,1038.19995117,293.99475098},
	{-1520.90002441,992.09997559,1038.30004883,283.99414062},
	{-1520.30004883,988.20001221,1038.19995117,289.99414062},
	{-1521.40002441,997.29998779,1038.40002441,277.99108887},
	{-1521.09997559,1002.00000000,1038.40002441,265.98706055}
};

new Float:sumoSpawnsType5[15][4] = {
	{4272.3604,999.4564,500.6275,86.5218},
	{4176.0195,945.9434,500.5341,101.3996},
	{4047.7341,999.1551,500.5143,86.9434},
	{4091.0955,1146.4822,500.4341,1.6999},
	{4012.9485,1277.9446,500.5084,89.1949},
	{4042.1272,1191.2253,476.9365,180.4632},
	{4213.5005,1279.0221,504.7436,266.9754},
	{4370.5264,1093.3694,500.5674,323.3853},
	{4194.9370,1094.6921,500.5842,179.4744},
	{4189.2437,907.8942,524.1190,273.7524},
	{4290.7930,913.4462,524.2849,2.1497},
	{4369.5400,1054.1501,524.1741,270.7135},
	{4169.1250,1095.0826,500.5882,182.0604},
	{4027.7532,999.4358,500.5151,357.7991},
	{4004.3616,1135.5791,500.4542,359.5936}
};

// Construction spawns
new Float:constructionspawn1[][] = {		// Worker spawns
	{-2105.8777,132.7461,35.2208,84.3999},  
	{-2105.9705,130.5837,35.2083,87.5895},  
	{-2105.9905,128.0861,35.2340,86.7057},  
	{-2106.1968,125.5368,35.2601,87.0752},  
	{-2106.2571,122.5485,35.2908,87.4448},  
	{-2110.0081,122.7282,35.2889,86.5610},  
	{-2110.0093,125.4053,35.2615,86.3038},  
	{-2110.1201,128.0304,35.2345,86.9867},  
	{-2110.0186,130.4566,35.2103,84.8496},  
	{-2109.9939,133.1890,35.1421,86.4725},  
	{-2114.4136,133.4627,35.1809,87.4687},  
	{-2114.6108,130.9634,35.2025,85.9582},  
	{-2114.6724,128.4339,35.2229,86.3278},  
	{-2114.8159,125.8313,35.2447,87.0106},  
	{-2115.0244,123.0371,35.2857,88.3202} 	 
};

new Float:constructionspawn2[][] = {  		// Engineer spawns
	{-2082.0339,307.5149,35.4293,179.7911},  
	{-2083.8347,307.5473,35.4263,178.5939},  
	{-2085.6150,307.4026,35.4396,176.4568},  
	{-2087.9150,307.3770,35.4419,176.5130},  
	{-2090.9116,307.0113,35.4163,181.2693},  
	{-2090.9827,303.5557,35.3750,175.9987},  
	{-2088.4480,303.3395,35.4003,178.8750},  
	{-2085.8662,303.3599,35.4289,178.9312},  
	{-2084.1682,303.5374,35.4496,182.1208},  
	{-2081.7195,303.2591,35.4733,178.7303},  
	{-2081.8494,299.1623,35.4740,177.2198},  
	{-2083.8821,299.1319,35.4131,177.9026},  
	{-2086.2539,298.6504,35.3755,174.5122},  
	{-2088.4631,298.8038,35.3470,178.6417},  
	{-2090.8367,298.9302,35.3224,173.3712}  
};
new GunGameKills[MAX_PLAYERS] = {0, ...};
new lastGunGameWeapon[MAX_PLAYERS] = {38, ...};

new GunGameWeapons[] = {22, 23, 24, 25, 26, 27, 29, 28, 32, 30, 31, 33, 34, 35, 38, 16, 9, 9};

new Float:GunGameSpawns[][] =
{
	{-2456.5081,2214.1875,4.9844,358.7890}, // lol
	{-2414.2305,2214.4863,4.9844,267.6081}, // lol
	{-2373.8191,2219.8115,4.9844,87.6081}, // lol
	{-2380.9719,2210.7732,4.9844,88.3798}, // lol
	{-2430.4836,2258.5200,4.9844,6.2856}, // lol
	{-2420.9299,2314.0828,2.9809,92.7431}, // lol
	{-2453.2185,2323.4922,4.9844,359.9230}, // lol
	{-2390.9724,2331.5977,4.9844,195.4214}, // lol
	{-2336.0908,2348.4878,4.9844,15.4215}, // lol
	{-2306.2417,2329.7493,4.9844,94.8404}, // lol
	{-2294.3179,2231.6108,4.9822,359.3687}, // lol
	{-2206.9412,2305.3926,4.9844,118.8948}, // lol
	{-2216.5806,2334.9287,7.5469,138.2493}, // lol
	{-2231.8623,2371.3862,5.0004,318.2492}, // lol
	{-2186.0159,2415.0398,5.1563,207.4240}, // lol
	{-2184.1174,2419.6570,5.0473,43.8858}, // lol
	{-2251.9146,2420.8433,2.4916,46.0792}, // lol
	{-2234.7212,2444.0486,2.4842,46.0792}, // lol
	{-2235.9070,2467.7222,4.9844,134.1031}, // lol
	{-2263.1914,2380.9399,5.0285,38.3907}, // lol
	{-2277.9131,2334.2668,4.9667,267.6570}, // lol
	{-2289.3533,2386.3770,5.9297,4.1891}, // lol
	{-2319.7876,2425.8550,7.0978,162.6168}, // lol
	{-2351.5076,2438.9341,7.7328,144.4433}, // lol
	{-2382.0354,2439.6230,9.3347,157.6034}, // lol
	{-2380.9709,2413.9385,8.6661,337.6034}, // lol
	{-2421.7363,2447.0999,12.9827,231.0691}, // lol
	{-2420.6978,2406.0027,13.0275,11.1304}, // lol
	{-2434.9287,2466.7512,13.7876,346.8351}, // lol
	{-2417.4956,2492.2520,12.8500,297.5688}, // lol
	{-2418.1672,2525.0959,14.8022,179.9953}, // lol
	{-2363.1748,2522.2708,7.2892,231.0212}, // lol
	{-2260.4663,2560.3806,4.5141,129.4032}, // lol
	{-2486.9966,2536.3103,18.0562,193.6371}, // lol
	{-2472.0525,2512.8438,17.7806,193.6371}, // lol
	{-2475.7617,2477.4893,17.6488,274.3095}, // lol
	{-2495.0547,2464.1948,17.7109,156.6634}, // lol
	{-2479.3552,2445.6931,16.2922,198.3373}, // lol
	{-2465.5393,2417.6917,16.0393,18.3373}, // lol
	{-2515.6936,2447.9912,17.6780,30.0757}, // lol
	{-2549.8699,2499.1770,20.9651,210.0757}, // lol
	{-2591.2854,2527.2295,23.8362,223.0909}, // lol
	{-2483.1318,2406.1250,16.7677,118.0506}, // lol
	{-2468.2471,2372.1321,9.6210,202.7238}, // lol
	{-2455.7520,2353.3545,5.3694,12.8421}, // lol
	{-2430.8010,2384.0981,8.9687,186.7204}, // lol
	{-2407.3948,2380.8262,7.2473,256.5944}, // lol
	{-2351.3652,2385.8589,6.0163,105.5663}, // lol
	{-2437.8240,2340.8721,4.9864,113.3997}, // lol
	{-2449.6042,2324.9941,4.9844,113.3997}, // lol
	{-2459.8601,2290.5608,4.9844,174.5003}, // lol
	{-2445.4707,2272.6934,14.8173,295.7616}, // lol
	{-2444.9065,2313.2571,15.4838,357.1755}, // lol
	{-2442.2791,2358.3809,10.4198,357.1755}, // lol
	{-2479.7449,2409.5493,26.6194,289.8082}, // lol
	{-2439.0566,2405.7456,19.2721,52.6360}, // lol
	{-2473.4792,2454.5310,26.9828,220.5609}, // lol
	{-2422.0898,2450.4080,21.0346,277.5880}, // lol
	{-2383.2002,2449.0330,19.3691,220.5609}, // lol
	{-2342.3396,2427.3438,18.7188,226.2009}, // lol
	{-2292.0576,2332.3523,15.0198,216.8242}, // lol
	{-2284.9619,2289.5313,9.1574,329.9386}, // lol
	{-2240.4309,2364.1514,10.1875,329.9386}, // lol
	{-2233.0652,2400.2524,2.4861,329.9386}, // lol
	{-2255.0164,2378.4507,13.1550,83.0765}, // lol
	{-2285.1592,2367.0417,5.4813,126.1964}, // lol
	{-2329.7678,2327.5969,3.4975,175.5107}, // lol
	{-2329.8657,2293.1345,3.5000,359.2707}, // lol
	{-2475.7100,2212.9753,4.9844,5.0792}, // lol
	{-2489.3633,2346.8818,14.1182,275.0791}, // lol
	{-2531.2134,2473.9387,19.2739,4.7658}, // lol
	{-2419.1948,2531.4717,16.3209,207.7842}, // lol
	{-2385.1016,2536.6514,20.5615,222.5109}, // lol
	{-2339.9102,2479.3450,4.9844,164.8570}, // lol
	{-2290.9878,2341.9534,5.5358,1.7772}, // lol
	{-2490.9321,2429.8167,16.3406,275.1279}, // lol
	{-2411.9167,2432.2395,11.9968,275.1279}, // lol
	{-2328.7693,2391.3042,5.7813,236.9009}, // lol
	{-2273.2246,2350.5732,4.8202,236.9009}, // lol
	{-2239.1506,2321.6653,7.5469,271.9945}, // lol
	{-2658.5195,2209.0815,57.2483,103.4196}, // lol
	{-2703.1396,2181.1892,57.0313,305.1848}, // lol
	{-2412.6726,2412.5210,12.4201,125.6430}, // lol
	{-2389.9258,2395.4841,8.7164,237.5041}, // lol
	{-2662.4031,2183.3875,57.0313,324.7195}, // 1
	{-2707.4944,2195.8193,56.3350,331.2997}, // 2
	{-2748.5977,2220.1050,70.3340,304.9795}, // 3
	{-2804.6956,2274.2969,86.8943,285.8661}, // 4
	{-2692.9329,2281.2603,60.4926,288.6859}, // 5
	{-2809.6262,2344.0195,90.6863,269.8857}, // 6
	{-2729.7383,2350.2512,71.8750,307.7996}, // 7
	{-2884.0969,2297.4353,160.5628,287.1194}, // 8
	{-2834.7922,2379.6128,108.8873,271.1390}, // 9
	{-2723.0168,2386.8328,75.2057,294.9526}, // 10
	{-2814.7639,2469.4224,112.7920,259.8593}, // 11
	{-2754.1365,2476.2139,95.5632,258.6058}, // 12
	{-2706.5632,2488.1619,76.7988,254.2191}, // 13
	{-2682.0166,2530.4858,76.3448,231.6589}, // 13
	{-2624.8728,2563.9338,57.4316,204.0853}, // 14
	{-2579.0007,2582.8108,64.1501,198.4453}, // 14
	{-2533.7561,2589.5579,57.4463,204.7120}, // 15
	{-2482.1626,2585.4644,48.7103,198.1319}, // 16
	{-2448.8479,2600.4783,54.9411,172.7516}, // 17
	{-2422.6357,2591.7622,46.3904,180.5852}, // 18
	{-2387.1611,2605.9788,52.7823,173.3785}, // 19
	{-2355.3052,2601.2537,47.0540,169.6184}, // 20
	{-2295.6853,2609.7351,51.9544,130.1379}, // 21
	{-2272.5298,2636.8130,73.5156,97.5744}, // 22
	{-2273.1765,2677.3857,73.5156,96.9477}, // 23
	{-2247.1047,2638.1521,55.3297,111.9884}, // 24
	{-2283.0496,2656.8308,59.9032,75.0147}, // 25
	{-2334.8232,2656.6780,57.8030,120.4485}, // 26
	{-2392.4353,2653.2192,59.4175,133.9219}, // 27
	{-2428.3406,2653.8372,61.2712,178.7290}, // 28
	{-2463.4819,2659.4634,63.5052,169.6423}, // 29
	{-2563.1089,2658.7097,74.2490,193.4558}, // 30
	{-2629.1714,2642.5483,80.5847,221.0294}, // 31
	{-2689.6921,2610.5461,85.5558,223.5361}, // 32
	{-2724.5295,2572.3660,92.1160,237.0095}, // 33
	{-2752.5618,2511.4766,96.3911,259.5697}, // 34
	{-2758.0632,2437.4019,92.7563,256.1230}, // 35
	{-2760.0020,2382.5933,83.2378,266.1498}, // 36
	{-2792.8828,2368.0613,87.8864,269.2598}, // 37
	{-2832.5994,2386.4248,108.9603,259.5229}, // 38
	{-2814.9292,2405.7573,103.5435,264.5363}, // 39
	{-2817.6064,2418.9871,107.3306,268.9231}, // 40
	{-2803.7441,2428.8772,103.2399,256.3896}, // 41
	{-2829.1677,2439.0120,116.5667,276.7563}, // 42
	{-2799.7085,2456.3301,105.0275,263.5963}, // 43
	{-2823.1238,2502.4307,121.5577,268.2964}, // 44
	{-2808.7625,2512.4558,113.1843,271.7431}, // 46
	{-2767.1509,2513.7231,95.9582,261.4031}, // 45
	{-2782.5203,2550.6716,103.6441,249.4963}, // 47
	{-2787.7122,2604.3044,109.4376,231.9495}, // 48
	{-2774.0559,2624.7695,106.4272,238.8428}, // 49
	{-2760.8503,2626.1575,101.9417,226.9361}, // 50
	{-2760.0332,2658.2373,109.2837,223.4894}, // 51
	{-2737.0105,2666.4307,102.7513,217.8492}, // 52
	{-2723.4658,2687.1616,104.6181,207.8224}, // 53
	{-2715.4351,2709.6165,109.5392,211.5824}, // 54
	{-2683.6270,2690.8069,96.0272,218.7893}, // 55
	{-2662.8882,2711.1538,96.9155,218.1626}, // 56
	{-2642.1887,2734.0889,99.9900,213.1490}, // 57
	{-2626.1240,2690.7195,86.9846,208.7623}, // 58
	{-2596.5032,2694.1333,84.7742,189.0222}, // 59
	{-2588.6814,2714.2500,89.7069,189.6489}, // 60
	{-2495.4802,2769.7158,145.7294,171.7887}, // 61
	{-2520.1426,2795.1648,156.4553,178.6821}, // 62
	{-2519.9526,2716.4565,88.5894,195.6022}, // 63
	{-2494.7734,2715.0486,88.3444,187.7689}, // 64
	{-2472.6316,2713.3718,86.3147,191.5289}, // 65
	{-2468.9333,2695.6741,77.9883,192.1556}, // 66
	{-2439.4578,2709.1921,82.1838,204.3754}, // 67
	{-2417.2949,2721.7695,86.5948,186.2020}, // 68
	{-2392.5339,2704.0383,77.0116,196.5421}, // 69
	{-2380.8806,2706.1226,77.2619,191.8419}, // 70
	{-2362.8530,2714.5620,80.0663,185.2618}, // 71
	{-2337.8525,2709.5933,76.5465,184.0085}, // 72
	{-2313.8711,2712.3323,76.4738,175.8618}, // 73
	{-2290.5103,2716.2520,76.9936,158.3149}, // 74
	{-2254.7283,2711.3250,81.6977,144.8416}, // 75
	{-2277.6489,2612.4731,53.4033,161.7618}, // 76
	{-2247.3916,2601.2981,49.7104,153.3017}, // 77
	{-2234.9368,2595.6404,48.6989,134.5016}, // 78
	{-2277.5271,2596.0857,39.2772,137.3217}, // 79
	{-2363.4690,2591.0583,40.7296,163.9552}, // 80
	{-2402.3689,2588.5212,40.2753,153.6151}, // 81
	{-2447.3201,2583.9373,43.4419,167.4019}, // 82
	{-2497.0081,2577.8774,43.0089,167.0885}, // 83
	{-2546.5515,2572.6140,46.8518,199.0489}, // 84
	{-2493.8977,2219.2681,4.9827,2.1702}, // gungamespawn1
	{-2528.2805,2231.4915,4.9861,153.3433}, // gungamespawn2
	{-2524.0396,2238.9756,5.3984,339.4183}, // gungamespawn3
	{-2569.7544,2243.3909,4.9922,286.9227}, // gungamespawn4
	{-2525.3008,2286.4373,4.9844,147.1748}, // gungamespawn5
	{-2488.5063,2291.9158,4.9844,263.7360}, // gungamespawn6
	{-2501.4854,2274.8611,4.9697,181.6418}, // gungamespawn7
	{-2581.5469,2300.4597,7.0029,272.0276}, // gungamespawn8
	{-2598.0657,2304.3000,7.0686,93.8091}, // gungamespawn9
	{-2563.5750,2251.6282,7.9042,332.0895}, // gungamespawn10
	{-2535.6648,2240.3931,8.5465,61.9936}, // gungamespawn11
	{-2620.3484,2240.3269,4.9844,266.9155}, // gungamespawn12
	{-2584.0049,2274.2991,7.1364,306.3957}, // gungamespawn13
	{-2639.1399,2251.3188,15.3408,280.0755}, // gungamespawn14
	{-2632.4534,2301.2778,8.5428,269.4222}, // gungamespawn15
	{-2627.1426,2318.6282,11.4049,266.1436}, // gungamespawn16
	{-2654.3181,2333.6941,11.8590,265.0353}, // gungamespawn17
	{-2636.7788,2334.4666,8.4738,94.7255}, // gungamespawn18
	{-2626.4160,2352.1545,8.5796,273.4723}, // gungamespawn19
	{-2630.3589,2358.9026,14.4078,271.2555}, // gungamespawn20
	{-2634.8123,2366.3323,21.7473,277.2323}, // gungamespawn21
	{-2636.2078,2373.3027,9.0000,6.9915}, // gungamespawn22
	{-2633.6709,2411.0366,13.9473,80.3124}, // gungamespawn23
	{-2635.2158,2400.4031,15.5640,357.5916}, // gungamespawn24
	{-2645.2488,2408.2930,13.9437,273.1359}, // gungamespawn25
	{-2635.7346,2426.3977,13.8950,166.6015}, // gungamespawn26
	{-2623.0066,2412.6794,13.8591,263.1087}, // gungamespawn27
	{-2602.8042,2377.9480,14.7308,314.4961}, // gungamespawn28
	{-2597.8408,2365.0659,9.8830,81.2290}, // gungamespawn29
	{-2598.5095,2353.8271,9.0254,140.9077}, // gungamespawn30
	{-2581.8625,2352.4912,9.5803,279.8839}, // gungamespawn31
	{-2574.5930,2370.4917,15.0901,203.1890}, // gungamespawn32
	{-2593.5315,2414.2405,13.9778,150.0668}, // gungamespawn33
	{-2597.3289,2302.9333,7.0146,95.6420}, // gungamespawn34
	{-2582.3440,2311.9487,6.0362,288.1757}, // gungamespawn35
	{-2580.9500,2304.4509,11.0954,272.1724}, // gungamespawn36
	{-2553.0903,2320.4038,7.6716,354.8932}, // gungamespawn37
	{-2498.7974,2363.8381,14.1182,90.9193}, // gungamespawn38
	{-2491.3640,2362.8972,10.2725,272.0276}, // gungamespawn39
	{-2507.0334,2344.7639,4.9781,185.4017}, // gungamespawn40
	{-2524.1492,2353.0769,6.4973,1.0151}, // gungamespawn41
	{-2552.0039,2351.7683,4.9844,173.4949}, // gungamespawn42
	{-2519.0730,2388.5173,17.0085,201.9852}, // gungamespawn43
	{-2537.1033,2425.8850,18.4278,122.7836}, // gungamespawn44
	{-2571.5308,2452.3882,19.8752,146.2113}, // gungamespawn45
	{-2600.1531,2468.0337,23.1085,162.5047}, // gungamespawn46
	{-2640.5732,2456.3953,28.2016,246.7688}, // gungamespawn47
	{-2653.1106,2411.8103,18.3732,245.5154}, // gungamespawn48
	{-2634.7346,2341.2666,20.3744,272.7524}, // gungamespawn49
	{-2628.1184,2249.2344,8.1858,312.3778}, // gungamespawn50
	{-2601.2891,2275.0396,8.3594,181.7399}, // gungamespawn51
	{-2535.4854,2300.8684,13.5234,5.3550}, // gungamespawn52
	{-2590.7598,2372.4856,20.2190,180.4900}, // gungamespawn53
	{-2594.7410,2339.9866,7.1582,175.1763}, // gungamespawn54
	{-2555.1792,2353.1592,7.0364,89.4670}, // gungamespawn55
	{-2555.1213,2395.7910,14.8439,249.5585}, // gungamespawn56
	{-2478.9971,2362.2063,8.9228,285.2788}, // gungamespawn57
	{-2472.2214,2303.0608,4.9844,274.1436}, // gungamespawn58
	{-2472.7263,2250.6638,4.9844,265.3702}, // gungamespawn59
	{-2473.8054,2222.0474,4.8438,1.3960}, // gungamespawn60
	{-2529.2256,2220.4932,4.9844,348.2360}, // gungamespawn61
	{-2562.6638,2232.4458,4.9844,334.4493}, // gungamespawn62
	{-2668.4077,2311.6077,23.8046,282.1454}, // gungamespawn63
	{-2659.0801,2276.5083,24.7218,276.5052}, // gungamespawn64
	{-2667.8650,2355.6973,22.5168,254.5716}, // gungamespawn65
	{-2662.7751,2413.2334,29.3339,247.0519}, // gungamespawn66
	{-2642.7629,2457.9451,30.3452,241.4117}, // gungamespawn67
	{-2625.2517,2486.0068,28.8241,206.9447}, // gungamespawn68
	{-2582.7815,2466.4583,20.6606,178.1180}, // gungamespawn69
	{-2536.4080,2446.3333,18.0919,324.7593}, // gungamespawn70
	{-2583.9194,2440.6057,15.9557,152.4243}, // gungamespawn71
	{-2502.0757,2313.9404,15.6119,11.2779}, // gungamespawn72
	{-2511.6201,2310.0828,13.5234,79.5852}, // gungamespawn73
	{-2543.8237,2298.0642,13.5234,332.5692}, // gungamespawn74
	{-2527.3162,2320.6716,13.5234,166.3560}, // gungamespawn75
	{-2512.1589,2285.8918,15.0469,29.5963}, // gungamespawn76
	{-2499.2329,2281.7883,19.1335,284.5070}, // gungamespawn77
	{-2479.8237,2286.1223,19.1335,183.4677}, // gungamespawn78
	{-2478.9700,2308.4385,13.5227,174.5493}, // gungamespawn79
	{-2488.3093,2318.0291,13.5227,96.2153}, // gungamespawn80
	{-2482.8325,2315.7939,16.0547,296.8954}, // gungamespawn81
	{-2504.1370,2246.6213,4.9177,2.0692} // gungamespawn82
};
/* Forwards */
	forward Event_EntranceFee(playerid, cost);

	/* Area 51 */
	
	forward area51_EventStart(playerid);
	forward area51_PlayerJoinEvent(playerid);
	forward area51_PlayerLeftEvent(playerid);
	forward area51_OneSecond();
	
	/* Army vs. Terrorists */
	
	forward army_EventStart(playerid);
	forward army_PlayerJoinEvent(playerid);
	forward army_PlayerLeftEvent(playerid);
	forward army_OneSecond();
	
	/* Big Smoke */
	
	forward bs_EventStart(playerid);
	forward bs_PlayerJoinEvent(playerid);
	
	/* Brawl */
	
	forward brawl_EventStart(playerid);
	forward brawl_PlayerJoinEvent(playerid);
	
	/* Compound */
	
	forward compound_EventStart(playerid);
	forward compound_PlayerJoinEvent(playerid);
	forward compound_PlayerLeftEvent(playerid);
	forward compound_OneSecond();
	
	/* Drug Run */
	
	forward drugrun_EventStart(playerid);
	forward drugrun_PlayerJoinEvent(playerid);
	forward drugrun_PlayerLeftEvent(playerid);
	forward drugrun_OneSecond();
	
	/* Hydra */
	
	forward hydra_EventStart(playerid);
	forward hydra_PlayerJoinEvent(playerid);
	forward hydra_PlayerLeftEvent(playerid);
	forward hydra_OneSecond();
	
	/* Jeff TDM */
	
	forward jefftdm_EventStart(playerid);
	forward jefftdm_PlayerJoinEvent(playerid);
	forward jefftdm_PlayerLeftEvent(playerid);
	forward jefftdm_OneSecond();
	
	/* Mad Doggs */
	
	forward md_EventStart(playerid);
	forward md_PlayerJoinEvent(playerid);
	
	/* Minigun */
	
	forward minigun_EventStart(playerid);
	forward minigun_PlayerJoinEvent(playerid);
	forward minigun_PlayerLeftEvent(playerid);
	forward minigun_OneSecond();
	
	/* Navy vs. Terrorists */
	
	forward navy_EventStart(playerid);
	forward navy_PlayerJoinEvent(playerid);
	forward navy_PlayerLeftEvent(playerid);
	forward navy_OneSecond();
	
	/* Oil Rig */
	
	forward oilrig_EventStart(playerid);
	forward oilrig_PlayerJoinEvent(playerid);
	forward oilrig_PlayerLeftEvent(playerid);
	forward oilrig_OneSecond();
	
	/* Pursuit */
	
	forward pursuit_EventStart(playerid);
	forward pursuit_PlayerJoinEvent(playerid);
	forward pursuit_PlayerLeftEvent(playerid);
	forward EndPursuit();
	forward pursuit_OneSecond();
	forward Random_Pursuit_Vehicle();
	
	forward hspursuit_EventStart(playerid);
	forward hspursuit_PlayerJoinEvent(playerid);
	forward hspursuit_PlayerLeftEvent(playerid);
	forward EndHSPursuit();
	forward hspursuit_OneSecond();
	forward RandomHS_Pursuit_Vehicle();
	
	/* Sumo */
	
	forward monster_EventStart(playerid);
	forward monster_PlayerJoinEvent(playerid);

	forward banger_EventStart(playerid);
	forward banger_PlayerJoinEvent(playerid);
	
	forward sandking_EventStart(playerid);
	forward sandking_PlayerJoinEvent(playerid);
	
	forward sandkingR_EventStart(playerid);
	forward sandkingR_PlayerJoinEvent(playerid);
	
	forward derby_EventStart(playerid);
    forward derby_PlayerJoinEvent(playerid);
    
   	forward sumo_PlayerLeftEvent(playerid);
   	forward sumo_OneSecond();
   	
   	/* Plane */
   	
   	forward plane_EventStart(playerid);
   	forward plane_PlayerJoinEvent(playerid);
   	forward plane_PlayerLeftEvent(playerid);
   	forward plane_OneSecond();
	
	/* Construction */
	
	forward construction_EventStart(playerid);
	forward construction_PlayerJoinEvent(playerid);
	forward construction_PlayerLeftEvent(playerid);
	forward construction_OneSecond();
	
	/* Labyrinth of Doom */
	
	forward lod_EventStart(playerid);
	forward lod_PlayerJoinEvent(playerid);
	forward lod_PlayerLeftEvent(playerid);
	forward lod_OneSecond();
	
	/* HotLava */
	forward HotLava_EventStart(playerid);
	forward HotLava_PlayerJoinEvent(playerid);
	forward HotLava_PlayerLeftEvent(playerid);
	forward HotLava_OneSecond();
	forward HotLava_CreateObjects();
	forward HotLava_SetDisco(Object_ID, ONOFF);
	forward HotLava_StarterDisco();
	forward Timer_Delete1Disco();
	forward Timer_RotateHotLavaPickups();
	forward HotLava_PickNewDisco(OldFloor);
	forward HotLava_SetDisco(Object_ID, ONOFF);
	forward HotLava_CreatePickups();
	forward HotLava_RotatePickups();
	forward HotLava_DeletePickups();
	forward HotLava_DeleteObjects();
	
	/* Domination */
	forward domination_EventStart(playerid);
	forward domination_PlayerJoinEvent(playerid);
	forward domination_PlayerDied(playerid);
	forward domination_PlayerLeftEvent(playerid);
	forward domination_OneSecond();
	forward domination_PlayerRespawn(playerid);

	/*Gun Game */
	forward GG_EventStart(playerid);
	forward GG_EventJoin(playerid);
	forward GG_LeaveEvent(playerid);
	forward GG_RejoinPlayer(playerid);
	forward GG_PlayerDeath(playerid, killerid, reason);
	forward GG_OnPlayerUpdate(playerid);
/* Callbacks */

hook OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new string[128];
	if(rotate_pickups_lod <= 0)
	{
		rotate_pickups_lod = LOD_EVENT_SLOTS-1;
	}
	/* Labyrinth of Doom */
	if(pickupid >= LOD_Pickups[0] && pickupid <= LOD_Pickups[23])
	{
		if(pickupid ==  LOD_Pickups[0])
		{
			if(GetPVarInt(playerid, "PlayerStatus") == 1)
			{
				new Float:armour;
				GivePlayerWeapon(playerid, 38, 250);
				Maze_Killer = playerid;
				DestroyDynamicPickup(LOD_Pickups[0]);
				SetPlayerColor(playerid, 0xFFFFFF00);
				GetPlayerArmour(playerid, armour);
				if(armour+50 >= 100)
				{
					SetPlayerArmour(playerid, 99);
				}
				else
				{
					SetPlayerArmour(playerid, armour+50);
				}
				SetPlayerSkin(playerid, 149);
				format(string, sizeof(string), "[EVENT]: %s(%d) has found the minigun and is now the maze killer! He is invisible for 30 seconds, avoid at all cost!", PlayerName(playerid), playerid);
				SendClientMessageToAll(COLOR_GREEN, string);
				Timer_MazeKiller = SetTimer("LOD_MazeKillerTimer", 30000, false);	// 30 seconds
			}
		}
		else if(pickupid == LOD_Pickups[1])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[1][0], LOD_Pickups_Wpns[1][1]);
			DestroyDynamicPickup(LOD_Pickups[1]);
			LOD_Pickups[1] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[1][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[2])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[2][0], LOD_Pickups_Wpns[2][1]);
			DestroyDynamicPickup(LOD_Pickups[2]);
			LOD_Pickups[2] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[2][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[3])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[3][0], LOD_Pickups_Wpns[3][1]);
			DestroyDynamicPickup(LOD_Pickups[3]);
			LOD_Pickups[3] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[3][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[4])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[4][0], LOD_Pickups_Wpns[4][1]);
			DestroyDynamicPickup(LOD_Pickups[4]);
			LOD_Pickups[4] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[4][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[5])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[5][0], LOD_Pickups_Wpns[5][1]);
			DestroyDynamicPickup(LOD_Pickups[5]);
			LOD_Pickups[5] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[5][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[6])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[6][0], LOD_Pickups_Wpns[6][1]);
			DestroyDynamicPickup(LOD_Pickups[6]);
			LOD_Pickups[6] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[6][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[7])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[7][0], LOD_Pickups_Wpns[7][1]);
			DestroyDynamicPickup(LOD_Pickups[7]);
			LOD_Pickups[7] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[7][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[8])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[8][0], LOD_Pickups_Wpns[8][1]);
			DestroyDynamicPickup(LOD_Pickups[8]);
			LOD_Pickups[8] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[8][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[9])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[9][0], LOD_Pickups_Wpns[9][1]);
			DestroyDynamicPickup(LOD_Pickups[9]);
			LOD_Pickups[9] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[9][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[10])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[10][0], LOD_Pickups_Wpns[10][1]);
			DestroyDynamicPickup(LOD_Pickups[10]);
			LOD_Pickups[10] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[10][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[11])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[11][0], LOD_Pickups_Wpns[11][1]);
			DestroyDynamicPickup(LOD_Pickups[11]);
			LOD_Pickups[11] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[11][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[12])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[12][0], LOD_Pickups_Wpns[12][1]);
			DestroyDynamicPickup(LOD_Pickups[12]);
			LOD_Pickups[12] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[12][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[13])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[13][0], LOD_Pickups_Wpns[13][1]);
			DestroyDynamicPickup(LOD_Pickups[13]);
			LOD_Pickups[13] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[13][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[14])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[14][0], LOD_Pickups_Wpns[14][1]);
			DestroyDynamicPickup(LOD_Pickups[14]);
			LOD_Pickups[14] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[14][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[15])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[15][0], LOD_Pickups_Wpns[15][1]);
			DestroyDynamicPickup(LOD_Pickups[15]);
			LOD_Pickups[15] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[15][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[16])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[16][0], LOD_Pickups_Wpns[16][1]);
			DestroyDynamicPickup(LOD_Pickups[16]);
			LOD_Pickups[16] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[16][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[17])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[17][0], LOD_Pickups_Wpns[17][1]);
			DestroyDynamicPickup(LOD_Pickups[17]);
			LOD_Pickups[17] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[17][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[18])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[18][0], LOD_Pickups_Wpns[18][1]);
			DestroyDynamicPickup(LOD_Pickups[18]);
			LOD_Pickups[18] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[18][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[19])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[19][0], LOD_Pickups_Wpns[19][1]);
			DestroyDynamicPickup(LOD_Pickups[19]);
			LOD_Pickups[19] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[19][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[20])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[20][0], LOD_Pickups_Wpns[20][1]);
			DestroyDynamicPickup(LOD_Pickups[20]);
			LOD_Pickups[20] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[20][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[21])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[21][0], LOD_Pickups_Wpns[21][1]);
			DestroyDynamicPickup(LOD_Pickups[21]);
			LOD_Pickups[21] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[21][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[22])
		{
			new Float:health;
			GetPlayerHealth(playerid, health);
			if(health+20 >= 100)
			{
				SetPlayerHealth(playerid, 99);
			}
			else
			{
				SetPlayerHealth(playerid, health+20);
			}
			DestroyDynamicPickup(LOD_Pickups[22]);
			LOD_Pickups[22] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[22][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[23])
		{
			new Float:armour;
			GetPlayerArmour(playerid, armour);
			if(armour+20 >= 100)
			{
				SetPlayerArmour(playerid, 99);
			}
			else
			{
				SetPlayerArmour(playerid, armour+20);
			}
			SetPlayerArmour(playerid, armour+50);
			DestroyDynamicPickup(LOD_Pickups[23]);
			LOD_Pickups[23] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[23][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
	}
	/* HotLava */
	if(pickupid >= HotLava_Pickups[0][0] && pickupid <= HotLava_Pickups[HOTLAVA_PICKUPS-1][0])
	{
		if(pickupid == HotLava_Pickups[0][0])
		{
			if(HotLava_Pickups[0][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[0][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[0][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[0][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[0][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[1][0])
		{
			if(HotLava_Pickups[1][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[1][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[1][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[1][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[1][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[2][0])
		{
			if(HotLava_Pickups[2][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[2][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[2][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[2][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[2][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[3][0])
		{
			if(HotLava_Pickups[3][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[3][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[3][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[3][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[3][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[4][0])
		{
			if(HotLava_Pickups[4][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[4][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[4][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[4][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[4][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
	}
	Dr_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	
	return 1;
}

forward event_OnGameModeInit();
public event_OnGameModeInit()
{
	//SetTimer("Event_OneSecond", 1000, true);
	foreach(new i : Player)
	{
	    EventDrugDelay[i] = -1;
	    Event_Players[i] = -1;
	}
	return 1;
}

forward event_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
public event_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == DIALOG_EVENTS)
	{
	    if(!response)
	    {
	        return 1;
	    }

	    DialogIDOption[playerid] = listitem;

	    switch(listitem)
	    {
	        case MADDOGG:
	        {
	            ShowPlayerDialog(playerid, DIALOGID_MDWEAPON, DIALOG_STYLE_INPUT, "Event Options", "Which weapon should be used?", "Confirm", "Close");
	        }

	        case BIGSMOKE:
	        {
	            ShowPlayerDialog(playerid, DIALOGID_MDWEAPON, DIALOG_STYLE_INPUT, "Event Options", "Which weapon should be used?", "Confirm", "Close");
	        }

	        case MINIGUN:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(MINIGUN, playerid);
	        }

	        case BRAWL:
	        {
	            if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(BRAWL, playerid);
	        }

	        case HYDRA:
	        {
	            if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(HYDRA, playerid);
	        }

	        case JEFFTDM:
	        {
            	if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(JEFFTDM, playerid);
	        }

	        case AREA51:
	        {
            	if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(AREA51, playerid);
	        }

	        case ARMYVSTERRORISTS:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(ARMYVSTERRORISTS, playerid);
	        }

	        case NAVYVSTERRORISTS:
	        {
	            if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(NAVYVSTERRORISTS, playerid);
	        }

	        case COMPOUND:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(COMPOUND, playerid);
	        }

	        case OILRIG:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(OILRIG, playerid);
	        }

	        case DRUGRUN:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(DRUGRUN, playerid);
	        }

	        case MONSTERSUMO:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(MONSTERSUMO, playerid);
	        }

	        case BANGERSUMO:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(BANGERSUMO, playerid);
	        }

	        case SANDKSUMO:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(SANDKSUMO, playerid);
	        }

	        case SANDKSUMORELOADED:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(SANDKSUMORELOADED, playerid);
	        }

	        case DESTRUCTIONDERBY:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(DESTRUCTIONDERBY, playerid);
	        }

	        case PURSUIT:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(PURSUIT, playerid);
	        }
	        
	        case HIGHSPEEDPURSUIT:
	        {
	            if(Event_InProgress != -1)
	            {
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
	            }
	            EventStart(HIGHSPEEDPURSUIT, playerid);
	        }
	        
	        case PLANE:
			{
			    if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    
			    EventStart(PLANE, playerid);
			}
			
			case CONSTRUCTION:
			{
			    if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    
			    EventStart(CONSTRUCTION, playerid);
			}
			
			case LOD:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(LOD, playerid);
			}
			case HOTLAVA:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(HOTLAVA, playerid);
			}
			case EVENT_DRACE:
			{
				SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: DeathRace is currently disabled due to RakGuy being a noob.");
				return 1;
				/*
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(EVENT_DRACE, playerid);
				*/
			}
			case DOMINATION:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: This is disabled till it's finished :)");
			    //EventStart(DOMINATION, playerid);
			}
			case GUNGAME:
			{
			    if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }

			    EventStart(GUNGAME, playerid);
			}
			case CEM:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    return cmd_cem(playerid, "");
			}
			
	    }
	}

	else if(dialogid == DIALOG_REJOINABLE)
	{
 	    if(response)
	    {
	        FoCo_Event_Rejoin = 1;
			foreach(Player, i)
			{
				FoCo_Event_Died[i] = 0;
			}
	    }

	    else
	    {
			FoCo_Event_Rejoin = 0;

			foreach(Player, i)
			{
				FoCo_Event_Died[i] = 0;
			}
	    }

	    if(Event_InProgress != -1)
	    {
	        return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: An event is already in progress.");
	    }

    	EventStart(DialogIDOption[playerid], playerid);
	}

	else if(dialogid == DIALOGID_MDWEAPON)
	{
	    if(!response)
		{
			return 1;
		}

		if(strval(inputtext) > 39 || strval(inputtext) < 1)
		{
			SendClientMessage(playerid, COLOR_WARNING, "Invalid value");
			return 1;
		}

		FFAWeapons = strval(inputtext);


		ShowPlayerDialog(playerid, DIALOG_FFAARMOUR, DIALOG_STYLE_MSGBOX, "Event Armour", "Should players spawn with armour or not?", "Yes", "No");

	}

	else if(dialogid == DIALOG_FFAARMOUR)
	{
		if(response)
		{
		    FFAArmour = 1;
		}

		else
		{
		    FFAArmour = 0;
		}

	    ShowPlayerDialog(playerid, DIALOG_REJOINABLE, DIALOG_STYLE_MSGBOX, "Event Rejoinable", "Should this event be rejoinable after death or not?", "Yes", "No");
	}
	return 1;
}

forward event_OnPlayerConnect(playerid);
public event_OnPlayerConnect(playerid)
{
    return 1;
}

forward event_OnPlayerDisconnect(playerid, reason);
public event_OnPlayerDisconnect(playerid, reason)
{
	if(Event_PlayerVeh[playerid] != -1)
	{
		DestroyVehicle(Event_PlayerVeh[playerid]);
		Event_PlayerVeh[playerid] = -1;
	}

	if(Event_ID != -1)
	{
		if(GetPVarInt(playerid, "InEvent") == 1)
		{
			PlayerLeftEvent(playerid);
		}
	}
	DR_OnPlayerDisconnect(playerid);
	return 1;
}


forward Get_FoCo_Event_Died(pid);
public Get_FoCo_Event_Died(pid)
{
	new temp = FoCo_Event_Died[pid];
	return temp;
}

forward Get_Event_InProgress();
public Get_Event_InProgress()
{
	return Event_InProgress;
}


public Edit_Event_InProgress(value)
{
	Event_InProgress = value;
	return 1;
}

forward Edit_FoCo_Event_Died(pid1, value);
public Edit_FoCo_Event_Died(pid1, value)
{
	FoCo_Event_Died[pid1] = value;
	return 1;
}

forward Edit_EventDelay(value);
public Edit_EventDelay(value)
{
	Event_Delay = value;
	return 1;
}

forward Event_Currently_On();
public Event_Currently_On()
{
	new temp = Event_ID;
	return temp;
}

forward Edit_Event_ID(eID);
public Edit_Event_ID(eID)
{
	Event_ID = eID;
	return 1;
}
forward event_OnPlayerSpawn(playerid);
public event_OnPlayerSpawn(playerid)
{
	switch(Event_ID)
	{
		case DOMINATION:
		{
			if(GetPVarInt(playerid, "PlayerStatus") == 1 && GetPVarInt(playerid, "InEvent") == 1)
			{
				domination_PlayerRespawn(playerid);	
			}
			return 2;
		}	
	}
	if(Event_PlayerVeh[playerid] != -1)
	{
		DestroyVehicle(Event_PlayerVeh[playerid]);
		Event_PlayerVeh[playerid] = -1;
	}
	
	if(GetPVarInt(playerid, "JustDied") == 1)
	{
	    if(GetPVarInt(playerid, "Resetskin") == 1)
	    {
	        SetPlayerSkin(playerid, oldskin[playerid]);
	    }
		SetPlayerSkin(playerid, GetDefaultSkin(playerid));
		SetPVarInt(playerid, "JustDied", 0);
	}
	return 1;
}

forward event_OnPlayerDeath(playerid, killerid, reason);
public event_OnPlayerDeath(playerid, killerid, reason)
{
	
	if(EventDrugDelay[playerid] != -1)
	{
		EventDrugDelay[playerid] = -1;
	}
	new didsomething = 0;
	if(Event_ID != -1)
	{
	    if(GetPVarInt(playerid, "PlayerStatus") == 1)
		{
			if(Event_ID == CEM)
			{
				CEM_OnPlayerDeath(playerid, killerid, reason);
				return 1;
			}
			if(Event_ID == EVENT_DRACE)
			{
				DR_PlayerDeath(playerid);
			}
			if(Event_ID == DOMINATION)
			{
				domination_PlayerDied(playerid);
				return 1;
			}
			if(Event_ID == GUNGAME)
			{
				GG_PlayerDeath(playerid, killerid, reason);
			}
		    SetPVarInt(playerid, "InEvent", 0);
			SetPVarInt(playerid, "JustDied", 1);
			if(Event_ID == BIGSMOKE || Event_ID == MADDOGG || Event_ID == BRAWL)
			{
			    Event_Died[playerid]++;
       			FoCo_Event_Died[playerid]++;
				if(killerid != INVALID_PLAYER_ID)
				{
    				Event_Kills[killerid]++;
				    /* Checking if position 1, 2 and 3 have not yet been taken by anyone, aka that Position[0]etc == -1 */
				    if(Position[0] == -1 && Position[1] != killerid && Position[2] != killerid)
				    {
						Position[0] = killerid;
				    }
					else if(Position[1] == -1 && Position[0] != killerid && Position[2] != killerid)
					{
					    Position[1] = killerid;
					}
					else if(Position[2] == -1 && Position[0] != killerid && Position[1] != killerid)
					{
					    Position[2] = killerid;
					}
					else
					{
					    /* Checking if they have 1st, 2nd or 3rd already and if they should move up a rank */
					    if(killerid == Position[2])
					    {
					        if(Event_Kills[killerid] > Event_Kills[Position[1]])
					        {
					            new temp = Position[1];
								Position[1] = killerid;
								Position[2] = temp;
					        }
							if(Event_Kills[killerid] > Event_Kills[Position[0]])
							{
							    new temp = Position[0];
							    Position[0] = killerid;
							    Position[1] = temp;
							}
							didsomething = 0;
					    }
						if(killerid == Position[1] && didsomething == 0)
						{
						    if(Event_Kills[killerid] > Event_Kills[Position[0]])
						    {
						        new temp = Position[0];
						        Position[0] = killerid;
						        Position[1] = temp;
						    }
						    didsomething = 1;
						}
						if(killerid == Position[0])
						{
						    didsomething = 1;
						}
						/* All tests to check if player already is 1st, 2nd or 3rd done. Checking if they should get first, second or third below. */
						if(didsomething == 0)
						{
						    if(Position[2] != -1)
						    {
						        if(Event_Kills[killerid] > Event_Kills[Position[2]])
						        {
									Position[2] = killerid;
								}
								if(Position[1] != -1)
								{
									if(Event_Kills[killerid] > Event_Kills[Position[1]])
									{
									    new temp = Position[1];
									    Position[1] = killerid;
									    Position[2] = temp;
									}
									if(Position[0] != -1)
									{
									    if(Event_Kills[killerid] > Event_Kills[Position[0]])
									    {
									        new temp = Position[0];
									        new temp1 = Position[1];
									        Position[0] = killerid;
									        Position[1] = temp;
									        Position[2] = temp1;
									    }
									}
								}
						    }
						}
			 		}
				}
			}
			if((Event_ID == JEFFTDM || Event_ID == AREA51 || Event_ID == ARMYVSTERRORISTS || Event_ID == NAVYVSTERRORISTS || Event_ID == COMPOUND || Event_ID == OILRIG || Event_ID == DRUGRUN || Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT || Event_ID == PLANE) && killerid != INVALID_PLAYER_ID)
			{
			    if(killerid != INVALID_PLAYER_ID)
			    {
			        if(Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT)
			        {
			            if(playerid == FoCo_Criminal)
			            {
			                GiveAchievement(killerid, 79);
			            }
			        }
			        new TK1 = GetPVarInt(playerid, "MotelTeamIssued");
				    new TK2 = GetPVarInt(killerid, "MotelTeamIssued");
					if(TK1 == TK2)
					{
						new string[128];
						format(string, sizeof(string), "[Guardian]: %s has team killed %s in an event", PlayerName(killerid), PlayerName(playerid));
						SendAdminMessage(1, string);
					}
			    }
			}
			if(Event_ID == LOD)
			{
				if(killerid != INVALID_PLAYER_ID)
				{
					if(Maze_Killer != killerid)
					{
						new Float:health;
						new string[56];
						GetPlayerHealth(killerid, health);
						format(string, sizeof(string), "[INFO]: Rewarded +10HP for killing %s(%d)", PlayerName(playerid), playerid);
						SendClientMessage(killerid, COLOR_SYNTAX, string);
						if(health+10 >= 100)
						{
							SetPlayerHealth(killerid, 99);
						}
						else{
							SetPlayerHealth(killerid, health+10);
						}
					}
				}
			}
			if(killerid != INVALID_PLAYER_ID)
			{
				PlayerEventStats[killerid][kills]++;
			}
			PlayerLeftEvent(playerid);
		}
	}

	return 1;
}

hook OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
	if(GetPVarInt(issuerid, "InEvent") == 1)
	{
		PlayerEventStats[issuerid][damage] += amount;
	}
}

forward event_OnPlayerExitVehicle(playerid, vehicleid);
public event_OnPlayerExitVehicle(playerid, vehicleid)
{
    if(vehicleid == Event_PlayerVeh[playerid])
	{
		if(Event_ID == MONSTERSUMO || Event_ID == BANGERSUMO || Event_ID == SANDKSUMO || Event_ID == SANDKSUMORELOADED || Event_ID == DESTRUCTIONDERBY || Event_ID == HYDRA)
		{
			if(GetPVarInt(playerid, "InEvent") == 1)
			{
				SetPVarInt(playerid, "FellOffEvent", 1);
				PlayerLeftEvent(playerid);
				SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: You have been removed from the event for leaving your vehicle.");
			}
		}
	}
	Dr_OnPlayerExitVehicle(playerid, vehicleid);
		
	return 1;
}

forward event_OnPlayerEnterCheckpoint(playerid);
public event_OnPlayerEnterCheckpoint(playerid)
{
    if(Event_ID == DRUGRUN && GetPVarInt(playerid, "PlayerStatus") == 1 && GetPVarInt(playerid, "MotelTeamIssued") != 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_WARNING, "Get out of the vehicle!");
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1421.5542,2773.9951,10.8203, 4.0);
			return 1;
		}

		EventDrugDelay[playerid] = 60;
		SendClientMessage(playerid, COLOR_NOTICE, "Stay alive for sixty seconds to win!");
		/*ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 0, 0, 0);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 0, 0, 0);*/

		new string[128];

		format(string, sizeof(string), "%s has entered the checkpoint, kill him within 60 seconds!", PlayerName(playerid));

		SendEventPlayersMessage(string, COLOR_NOTICE);
	}
	else if(Event_ID == DOMINATION && GetPVarInt(playerid, "PlayerStatus") == 1 && GetPVarInt(playerid, "Team") != 0)
	{	
		DisablePlayerCheckpoint(playerid);
		GivePlayerWeapon(playerid, 46, 1); // Parachute
		SetPlayerVirtualWorld(playerid, 1400);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, domination_air_spawns[increment][0], domination_air_spawns[increment][1], domination_air_spawns[increment][2]);
		increment++;
	}
	return 1;
}

	/* Timers */

//forward Event_OneSecond();
/*task Event_OneSecond[1000]()
{
	else if(Event_Delay == 5)
	{	
		switch(Event_ID)
		{	
			case MINIGUN:
			{
				new freeSlots = MINIGUN_EVENT_SLOTS - Event_PlayersCount();
				if(freeSlots > 0)
				{
					for(new i = 0; i < freeSlots; i++)
					{
						minigun_PlayerJoinEvent(reservedSlotsQueue[i]);
					}
				}
			}
		}
	}

	return 1;
}
*/

timer EventDelay[1000]()
{
	Event_Delay--;
	if(Event_Delay <= 0)
	{		
		
		if(EventPlayersCount() <= 0)
		{
			foreach(Player, i)
			{
				if(GetPVarInt(i, "InEvent") == 1)
				{
					SendClientMessageToAll(COLOR_WARNING, "[Event ERROR]: Event has been ended due to a low amount of players participating.");
				}
			}
			stop DelayTimer;
			EndEvent();
		}
		
		
		else
		{
			Event_InProgress = 1;
		    
			stop DelayTimer;
			/*
			    Event_Bet_NoCanDo will allow for no further bets to be placed for the events.
			*/
			
			switch(Event_ID)
			{
				case MONSTERSUMO:
				{
					//Event_Bet_NoCanDo();
					sumo_OneSecond();
				} 
				case BANGERSUMO:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case SANDKSUMO:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case SANDKSUMORELOADED:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case DESTRUCTIONDERBY:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case HYDRA:
				{
                    //Event_Bet_NoCanDo();
                    hydra_OneSecond();
				} 
				case JEFFTDM:
				{
                    //Event_Bet_NoCanDo();
                    jefftdm_OneSecond();
				} 
				case ARMYVSTERRORISTS:
				{
                    //Event_Bet_NoCanDo();
                    army_OneSecond();
				} 
				case MINIGUN:
				{
                    //Event_Bet_NoCanDo();
                    minigun_OneSecond();
				} 
				case DRUGRUN:
				{
                    //Event_Bet_NoCanDo();
                    drugrun_OneSecond();
				} 
				case PURSUIT:
				{
                    //Event_Bet_NoCanDo();
                    pursuit_OneSecond();
				} 
				case HIGHSPEEDPURSUIT:
				{
                    //Event_Bet_NoCanDo();
                    hspursuit_OneSecond();
				} 
				case AREA51:
				{
                    //Event_Bet_NoCanDo();
                    area51_OneSecond();
				} 
				case NAVYVSTERRORISTS:
				{
                    //Event_Bet_NoCanDo();
                    navy_OneSecond();
				} 
				case OILRIG:
				{
                    //Event_Bet_NoCanDo();
                    oilrig_OneSecond();
				} 
				case COMPOUND:
				{
                    //Event_Bet_NoCanDo();
                    compound_OneSecond();
				} 
				case PLANE:
				{
                    //Event_Bet_NoCanDo();
                    plane_OneSecond();
				} 
				case CONSTRUCTION:
				{
                    //Event_Bet_NoCanDo();
                    construction_OneSecond();
				}
				case LOD:
				{
					//Event_Bet_NoCanDo();
					lod_OneSecond();
				}
				case HOTLAVA:
				{
					HotLava_OneSecond();
				}
				case 24:
				{
					deathr_OneSecond();
				}
				case DOMINATION:
				{
					domination_OneSecond();
				}
			}
		}
	}

	else if(Event_Delay > 0)
	{
			
		new string[8];
		
		switch(Event_Delay)
		{
			case 5: format(string, sizeof(string), "~r~%d", Event_Delay);
			case 4: format(string, sizeof(string), "~r~~h~%d", Event_Delay);
			case 3: format(string, sizeof(string), "~y~%d", Event_Delay);
			case 2: format(string, sizeof(string), "~y~~h~%d", Event_Delay);
			case 1: format(string, sizeof(string), "~g~%d", Event_Delay);
		}
		
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				GameTextForPlayer(i, string, 1000, 3);
			}
		}
		
		if(Event_Delay == 5)
		{
			if(Event_ID == MONSTERSUMO || Event_ID == BANGERSUMO || Event_ID == SANDKSUMO || Event_ID == SANDKSUMORELOADED || Event_ID == DESTRUCTIONDERBY)
			{
				new
					Float:vehx,
					Float:vehy,
					Float:vehz,
					Float:vang;

				foreach(Player, i)
				{
					if(GetPVarInt(i, "InEvent") == 1)
					{
						GetPlayerPos(i, vehx, vehy, vehz);
						GetPlayerFacingAngle(i, vang);
						SetVehiclePos(Event_PlayerVeh[i], vehx, vehy, vehz);
						SetVehicleZAngle(i, vang);
						PutPlayerInVehicle(i, Event_PlayerVeh[i], 0);
						SetVehicleParamsEx(Event_PlayerVeh[i], false, false, false, true, false, false, false);
						TogglePlayerControllable(i, 0);
					}
				}
			}
		}
		
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				//SetCameraBehindPlayer(i);
				TogglePlayerControllable(i, 0);
			}
		}
	}
}

timer DrugDelay[1000]()
{
	foreach(Player, i)
	{
		if(EventDrugDelay[i] > -1)
		{
			if(EventDrugDelay[i] == 0)
			{
				SetPVarInt(i, "MotelTeamIssued", 0);
				EndEvent();
				increment = 0;
				SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Criminals succesfully dropped off the drugs!");
				EventDrugDelay[i] = -1;
				stop DrugDelayTimer;
				return 1;
			}

			EventDrugDelay[i]--;
		}
	}
	return 1;
}

timer PlaneFallCheck[1000]()
{
	foreach(Player, i)
	{
	    if(GetPVarInt(i, "InEvent") == 1 && GetPVarInt(i,"MotelTeamIssued") == 2)
	    {
	        if (!IsPlayerInAnyVehicle(i))
	        {
		        if(!IsPlayerInRangeOfPoint(i,100.0,1925.0658,-2493.0122,13.5391))
		        {
		            SetPlayerPos(i,1925.0658,-2493.0122,13.5391);
		        }
	        }
		}
	    else if(GetPVarInt(i, "InEvent") == 1 && GetPVarInt(i, "MotelTeamIssued") == 1)
	    {
	    	new Float:vx, Float:vy, Float:vz;
	        GetPlayerPos(i, vx,vy,vz);
		    if(IsPlayerInAnyVehicle(i))
		    {
		        SetPlayerPos(i, vx,vy,vz+10);
		        SendClientMessage(i, COLOR_WARNING, "You are not allowed to get in any vehicles!");
		    }
		    else if(vz < 67.2072)
		    {
				SetPlayerHealth(i,0);
				PlayerLeftEvent(i);
		    }
	    }
	}
}

timer SumoFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			new Float:vx, Float:vy, Float:vz;
			GetVehiclePos(Event_PlayerVeh[i], vx, vy, vz);
			if(vz < 8.0 || GetPlayerState(i) != PLAYER_STATE_DRIVER)
			{
			    SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);	
			}
		}
	}
}

timer HotLavaFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			new Float:vx, Float:vy, Float:vz;
			GetPlayerPos(i, vx, vy, vz);
			if(vz < 300.0)
			{
				SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);
			}
		}
	}
}

timer HydraFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
			{
			    SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);
			}
		}
	}
}

timer OilrigFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			new Float:vx, Float:vy, Float:vz;
			GetPlayerPos(i, vx, vy, vz);
			if(vz < 5.0)
			{
				SetPVarInt(i, "FellOffEvent", 1);
				SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);
			}
		}
	}
}

timer HydraEnd[480000]()
{
	EndEvent();
}

timer EndPursuit[300000]()
{
	SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal getting away!");
	GiveAchievement(FoCo_Criminal, 78);
	EndEvent();
	Motel_Team = 0;
}

timer EndHSPursuit[300000]()
{
	SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal getting away!");
	GiveAchievement(FoCo_Criminal, 78);
	EndEvent();
	Motel_Team = 0;
}

/* Functions */

	/* Main functions */
	
forward EventStart(type, playerid);
public EventStart(type, playerid)
{
	if(Event_InProgress != -1)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
	}

    increment = 0;

	if(type != BIGSMOKE && type != MADDOGG && type != BRAWL && type != GUNGAME)
	{
		Event_Delay = 30;
		DelayTimer = repeat EventDelay();
		Event_FFA = 0;
	}
	
	/*
	for(new i = 0; i < VIP_EVENT_SLOTS; i++)
	{
		reservedSlotsQueue[i] = -1;
	}
	*/
	new string[52];
	format(string, sizeof(string), "Type: %d & domination: %d", type, DOMINATION);
	DebugMsg(string);
	new i;
	for(i = 0; i < MAX_EVENT_PLAYERS; i++)
	{
		EventPlayers[i] = -1;
	}
	EventCount = 0;
	switch(type)
	{
		case MADDOGG:
		{
            md_EventStart(playerid);
            Position[0] = -1;
            Position[1] = -1;
            Position[2] = -1;
            //Event_Bet_Start(0);
		} 
		case BIGSMOKE:
		{
			bs_EventStart(playerid);
			//Event_Bet_Start(1);
		} 
		case MINIGUN:
		{
            minigun_EventStart(playerid);
            //Event_Bet_Start(2);
		}
		case BRAWL:
		{
            brawl_EventStart(playerid);
            //Event_Bet_Start(3);
		}
		case GUNGAME: 
  		{
		    GG_EventStart(playerid);
		    //Event_Bet_Start(7);
		}
		case HYDRA:
		{
            hydra_EventStart(playerid);
            //Event_Bet_Start(4);
		} 
		case JEFFTDM: 
		{
		    jefftdm_EventStart(playerid);
		    //Event_Bet_Start(6);
		}
		case AREA51: 
  		{
		    area51_EventStart(playerid);
		    //Event_Bet_Start(7);
		}
		case ARMYVSTERRORISTS: 
		{
		    army_EventStart(playerid);
		    //Event_Bet_Start(8);
		}
		case NAVYVSTERRORISTS: 
		{
		    navy_EventStart(playerid);
		    //Event_Bet_Start(9);
		}
		case COMPOUND: 
		{
		    compound_EventStart(playerid);
		    //Event_Bet_Start(10);
		}
		case OILRIG: 
		{
		    oilrig_EventStart(playerid);
		    //Event_Bet_Start(11);
		}
		case DRUGRUN: 
		{
		    drugrun_EventStart(playerid);
		    //Event_Bet_Start(12);
		}
		case MONSTERSUMO: 
		{
		    monster_EventStart(playerid);
		    //Event_Bet_Start(13);
		}
		case BANGERSUMO: 
		{
		    banger_EventStart(playerid);
		    //Event_Bet_Start(14);
		}
		case SANDKSUMO: 
		{
		    sandking_EventStart(playerid);
		    //Event_Bet_Start(15);
		}
		case SANDKSUMORELOADED: 
		{
		    sandkingR_EventStart(playerid);
		    //Event_Bet_Start(16);
		}
		case DESTRUCTIONDERBY: 
		{
            derby_EventStart(playerid);
            //Event_Bet_Start(17);
		}
		case PURSUIT: 
		{
		    pursuit_EventStart(playerid);
		    //Event_Bet_Start(18);
		}
		case HIGHSPEEDPURSUIT: 
		{
		    hspursuit_EventStart(playerid);
		    //Event_Bet_Start(21);
		}
		case PLANE: 
		{
		    plane_EventStart(playerid);
		    //Event_Bet_Start(19);
		}
		case CONSTRUCTION: 
		{
            construction_EventStart(playerid);
            //Event_Bet_Start(20);
		}
		case LOD:
		{
			lod_EventStart(playerid);
		}
		case HOTLAVA:
		{
			HotLava_EventStart(playerid);
		}
		case EVENT_DRACE:
		{
			DR_EventStart(playerid);
		}
		case DOMINATION:
		{
			domination_EventStart(playerid);
		}
 	}
	
	SetEventTeamNames(type);
 	return 1;
}

forward PlayerJoinEvent(playerid);
public PlayerJoinEvent(playerid)
{
	DebugMsg("PlayerJoin..");
	/*if(EventPlayersCount() > 2-CountDonators(3))
	{
	    if(GetPVarInt(playerid, "Donation_Type") < 3)
	    {
			SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: The event is full and you're gay (gold VIP)");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: Using Donator slot!");
		}
	}*/
	
	if(FoCo_Event_Died[playerid] > 0 && FoCo_Event_Rejoin == 0)
	{
		SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is not rejoinable.");
	 	return 1;
 	}
	new string[56];
	format(string, sizeof(string), "Event_ID: %d", Event_ID);
	DebugMsg(string);
	switch(Event_ID)
	{
	    case MADDOGG: md_PlayerJoinEvent(playerid);
	    case BIGSMOKE: bs_PlayerJoinEvent(playerid);
	    case PLANE: plane_PlayerJoinEvent(playerid);
	    case MINIGUN: 
		{/*
			if(EventPlayersCount() < MINIGUN_EVENT_SLOTS - VIP_EVENT_SLOTS)
			{*/
				minigun_PlayerJoinEvent(playerid);
		/*	}
			
			else
			{
				if(IsVIP(playerid) == 3)
				{
					if(Event_PlayersCount() < MINIGUN_EVENT_SLOTS)
					{
						minigun_PlayerJoinEvent(playerid);
					}
					
					else
					{
						return SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: The event is full");
					}
				}
				
				else
				{
					for(new i = 0; i < VIP_EVENT_SLOTS; i++)
					{
						if(reservedSlotsQueue[i] == -1)
						{
							reservedSlotsQueue[i] = playerid;
							SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: Using reserved slot. You will join the event if this slot is free.");
							return 1;
						}
					}
					
					SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: Reserved slots queue is full, you can't join the event.");
					return 1;
				}
			}*/
			
		}
	    case BRAWL: brawl_PlayerJoinEvent(playerid);
		case GUNGAME:
		{
			if(AutoJoin[playerid] == 1)
			{
				GG_RejoinPlayer(playerid);
			}
			else
			{
				GG_EventJoin(playerid);
			}
		}
	    case HYDRA: hydra_PlayerJoinEvent(playerid);
	    case JEFFTDM: jefftdm_PlayerJoinEvent(playerid);
	    case AREA51: area51_PlayerJoinEvent(playerid);
	    case ARMYVSTERRORISTS: army_PlayerJoinEvent(playerid);
	    case NAVYVSTERRORISTS: navy_PlayerJoinEvent(playerid);
	    case COMPOUND: compound_PlayerJoinEvent(playerid);
	    case OILRIG: oilrig_PlayerJoinEvent(playerid);
	    case DRUGRUN: drugrun_PlayerJoinEvent(playerid);
	    case MONSTERSUMO: monster_PlayerJoinEvent(playerid);
		case BANGERSUMO: banger_PlayerJoinEvent(playerid);
		case SANDKSUMO: sandking_PlayerJoinEvent(playerid);
		case SANDKSUMORELOADED: sandkingR_PlayerJoinEvent(playerid);
		case DESTRUCTIONDERBY: derby_PlayerJoinEvent(playerid);
		case CONSTRUCTION:construction_PlayerJoinEvent(playerid);
		case PURSUIT:		
	    {
	        if(EventPlayersCount() == 26)
			{
	    		return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}

	        pursuit_PlayerJoinEvent(playerid);
	    }
	    case HIGHSPEEDPURSUIT:
	    {
	        if(EventPlayersCount() == 26)
	        {
	            return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
	        }
	        hspursuit_PlayerJoinEvent(playerid);
	    }
		case LOD: 
		{
			if(EventPlayersCount() == 50)
	        {
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			lod_PlayerJoinEvent(playerid);
		}
		case HOTLAVA: HotLava_PlayerJoinEvent(playerid);
		case EVENT_DRACE:
		{
			DR_EventJoin(playerid);
		}
		case DOMINATION: 
		{
			if(EventPlayersCount() == DOMINATION_EVENT_SLOTS)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			domination_PlayerJoinEvent(playerid);
		}
	}
 	
 	if(Event_ID == MADDOGG || Event_ID == BIGSMOKE)
 	{
 	    FoCo_Event_Died[playerid]++;
 	}
	
	SetPVarInt(playerid, "PlayerStatus", 1);
	SetPVarInt(playerid, "InEvent", 1);
	if(Event_ID != MADDOGG && Event_ID != BIGSMOKE && Event_ID != BRAWL && Event_ID != GUNGAME && Event_ID != CEM)
 	{
		EventPlayers[EventCount] = playerid;
		EventCount++;
  	}

	SetCameraBehindPlayer(playerid);
	
	PlayerEventStats[playerid][joinedevent] = 1;
	
	foreach(Player, i)
	{
		if(Event_Players[i] == -1)
		{
			Event_Players[i] = playerid;
			break;
		}
	}
	return 1;
}

forward PlayerLeftEvent(playerid);
public PlayerLeftEvent(playerid)
{
	if(GetPVarInt(playerid, "PlayerStatus") == 0)
	{
		return 1;
	}
	
	SetPlayerArmour(playerid, 0);
	SetPVarInt(playerid, "InEvent", 0);
	SetPVarInt(playerid, "PlayerStatus", 0);
	death[playerid] = 1;

	foreach(Player, i)
	{
		if(Event_Players[i] == playerid)
		{
			Event_Players[i] = -1;
			break;
		}
	}

	
	switch(Event_ID)
	{
	    case MINIGUN: minigun_PlayerLeftEvent(playerid);
	    case HYDRA: hydra_PlayerLeftEvent(playerid);
	    case JEFFTDM: jefftdm_PlayerLeftEvent(playerid);
	    case AREA51: area51_PlayerLeftEvent(playerid);
	    case ARMYVSTERRORISTS: army_PlayerLeftEvent(playerid);
	    case NAVYVSTERRORISTS: navy_PlayerLeftEvent(playerid);
	    case COMPOUND: compound_PlayerLeftEvent(playerid);
	    case OILRIG: oilrig_PlayerLeftEvent(playerid);
	    case DRUGRUN: drugrun_PlayerLeftEvent(playerid);
	    case MONSTERSUMO: sumo_PlayerLeftEvent(playerid);
	    case BANGERSUMO: sumo_PlayerLeftEvent(playerid);
	    case SANDKSUMO: sumo_PlayerLeftEvent(playerid);
	    case SANDKSUMORELOADED: sumo_PlayerLeftEvent(playerid);
		case DESTRUCTIONDERBY: sumo_PlayerLeftEvent(playerid);
		case PURSUIT: pursuit_PlayerLeftEvent(playerid);
		case HIGHSPEEDPURSUIT: hspursuit_PlayerLeftEvent(playerid);
		case PLANE: plane_PlayerLeftEvent(playerid);
		case CONSTRUCTION: construction_PlayerLeftEvent(playerid);
		case LOD: lod_PlayerLeftEvent(playerid);
		case HOTLAVA: HotLava_PlayerLeftEvent(playerid);
		case EVENT_DRACE: DR_LeaveEvent(playerid);
		case DOMINATION: domination_PlayerLeftEvent(playerid);
	}

	return 1;
}

forward EndEvent();
public EndEvent()
{
    Event_InProgress = -1;
	if(Event_ID == HYDRA)
	{
	    stop hydraTime;
		stop HydraFallCheckTimer;
	}
	
	else if(Event_ID == PURSUIT)
	{
		stop PursuitTimer;
		ForcedCriminal = -1;
	}
	else if(Event_ID == 24)
	{
		DR_EventEnd();
	}
	else if(Event_ID == HIGHSPEEDPURSUIT)
	{
	    stop HSPursuitTimer;
	    ForcedCriminal = -1;
	}
	
	else if(Event_ID == PLANE)
	{
	    stop PlaneFallCheckTimer;
	}
	
	else if(Event_ID == OILRIG)
	{
		stop OilrigFallCheckTimer;
	}
	
	else if(Event_ID == LOD)
	{
		new i;
		for(i = 0; i < MAX_LOD_PICKUPS; i++)
		{
			DestroyDynamicPickup(LOD_Pickups[i]);
		}
		Maze_Killer = -1;
		KillTimer(Timer_MazeKiller);
	}
	else if(Event_ID == DOMINATION)
	{
		stop ZoneCaptureDomination;
		stop domination_TickDecreaserTimer;
		stop dom_AutoZoneDecreaserTimer;
	}
	
	else if(Event_ID == HOTLAVA)
	{
		stop HotLavaFallCheckTimer;
		stop HotLavaDiscoTimer;
		stop HotLavaDiscoRepeatTimer;
		KillTimer(Timer_Disco1D);
		KillTimer(Timer_RotateHLPickups);
		HotLava_DeleteObjects();
		HotLava_DeletePickups();
	}
	
	else if(Event_ID == MONSTERSUMO || Event_ID == BANGERSUMO || Event_ID == SANDKSUMO || Event_ID == SANDKSUMORELOADED || Event_ID == DESTRUCTIONDERBY)
	{
		stop SumoFallCheckTimer;
	}
	if(Event_ID == BIGSMOKE || Event_ID == MADDOGG)
	{
		foreach(Player, i)
		{
			AutoJoin[i] = 0;
		}
		if(Position[0] != -1)
		{
			GiveAchievement(Position[0], 83);
		}
		if(Position[1] != -1)
		{
			GiveAchievement(Position[1], 84);
		}
		if(Position[2] != -1)
		{
			GiveAchievement(Position[2], 85);
		}
		Position[0] = -1;
		Position[1] = -1;
		Position[2] = -1;
	}
	
	if(DelayTimer) stop DelayTimer;
	
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "InEvent") == 1 && death[i] == 0)
		{
		    if(Event_ID == JEFFTDM || Event_ID == ARMYVSTERRORISTS || Event_ID == DRUGRUN || 
			Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT || Event_ID == AREA51 || 
			Event_ID == NAVYVSTERRORISTS || Event_ID == OILRIG || Event_ID == COMPOUND || 
			Event_ID == PLANE || CONSTRUCTION || Event_ID == LOD || Event_ID == HOTLAVA)
		    {
		        SetPVarInt(i, "MotelTeamIssued", 0);
				SetPlayerSkin(i, GetPVarInt(i, "MotelSkin"));
				SetPlayerColor(i, GetPVarInt(i, "MotelColor"));

				if(Event_ID == NAVYVSTERRORISTS)
				{
				    DisablePlayerCheckpoint(i);
				}

				else if(Event_ID == PURSUIT)
				{
					SetPlayerMarkerForPlayer(i, FoCo_Criminal, GetPVarInt(FoCo_Criminal, "MotelColor"));
				}
				else if(Event_ID == CONSTRUCTION)
				{
					SetPVarInt(i, "Team",0);
				}
		    }

		    if(Event_PlayerVeh[i] != -1)
			{
				DestroyVehicle(Event_PlayerVeh[i]);
				Event_PlayerVeh[i] = -1;
			}
			increment = 0;
			Motel_Team = 0;
			TogglePlayerControllable(i, 1);
		}
		if(GetPVarInt(i, "Team") > 0)
		{
			domination_PlayerLeftEvent(i);
		}
		
		if(GetPVarInt(i, "InEvent") == 1)
		{	
			if(IsPlayerInAnyVehicle(i))
			{
				RemovePlayerFromVehicle(i);
			}
			event_SpawnPlayer(i);
		}
	}
	if(Event_ID == GUNGAME)
	{
		foreach(Player, i)
		{
			TextDrawHideForPlayer(i, CurrLeader[i]);
			TextDrawHideForPlayer(i, CurrLeaderName[i]);
			TextDrawHideForPlayer(i, GunGame_MyKills[i]);
			TextDrawHideForPlayer(i, GunGame_Weapon[i]);
			GunGameKills[i] = 0;
		}
	}
	if(Event_ID == DRUGRUN || Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT || Event_ID == NAVYVSTERRORISTS || Event_ID == COMPOUND || Event_ID == ARMYVSTERRORISTS || Event_ID == PLANE)
	{
		for(new i; eventVehicles[i] != 0; i++)
		{
			DestroyVehicle(eventVehicles[i]);
			eventVehicles[i] = 0;
		}
		Iter_Clear(Event_Vehicles);
	}

	if(Event_ID == JEFFTDM || Event_ID == ARMYVSTERRORISTS || Event_ID == DRUGRUN || Event_ID == AREA51 || Event_ID == NAVYVSTERRORISTS || Event_ID == OILRIG || Event_ID == COMPOUND || CONSTRUCTION)
	{
        Team1_Motel = 0;
		Team2_Motel = 0;
		Team1 = 0;
		Team2 = 0;
	}

	FoCo_Criminal = -1;
	Event_ID = -1;

	/*if(EventPlayersCount() > 0)
	{
	    foreach(Player, i)
	    {
				if(Event_Players[i] != -1)
				{
	        event_SpawnPlayer(Event_Players[i]);
	      }
	    }
	 */
	foreach(Player, i)
	{
		Event_Players[i] = -1;
	}
		

	// Bodge Job fix for some errors (existing and new).
	// Fixed a bug here where it sets PVarInt PlayerStatus for everyone . . . People in duels & AFK zone got fucked over. Gee thanks Shaney/Marcel or w/e - pEar
	foreach(Player, i)
	{
	    if(GetPVarInt(i, "PlayerStatus") == 1)
	    {
			SetPVarInt(i, "PlayerStatus", 0);
	    }
	    FoCo_Event_Died[i] = 0;
	    SetPVarInt(i, "InEvent", 0);
		AutoJoin[i] = 0; //AutoJoin Fix
	}
	increment = 0;
	
	if(lastEventWon != -1)
	{
		defer EventGift(lastEventWon);
		lastEventWon = -1;
	}
	
	/* Show event stats */
	
	
	/* Reset stats */
	
	foreach(Player, i)
	{
		PlayerEventStats[i][joinedevent] = 0;
		PlayerEventStats[i][kills] = 0;
		PlayerEventStats[i][damage] = 0;
		PlayerEventStats[i][pteam] = -1;
	}
	return 1;
}


timer EventGift[7000](playerid)
{
    new ran = random(200);
    new string[150];
	switch(ran)
	{
		case 0..24: //5k 25% chance
		{
		    if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 5000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $5000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 5000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 6000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $6000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 6000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 6500);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $6500");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 6500$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 6000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $7500");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 7500$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 25..35:    //10% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 7500);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $7500");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 7500$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 9000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $9000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 9000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 9750);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $9750");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 9750$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 11250);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $11250");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 11250$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 36..45:    //10% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 10000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $10000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 10000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 12000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $12000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 12000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 13000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $13000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 13000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 15000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $15000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 15000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 46..50:    //5% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 20000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $20000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 20000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 24000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $24000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 24000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 26000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $26000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 26000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 30000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $30000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 30000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 51..70:        //20% chance
		{
			SetPlayerArmour(playerid, 99);
			SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 100 armour");
		}
		case 71..80:        //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random Minigun.", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 150);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 175);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 200);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 225);
			}
		}
		case 81..90:    //10% chance
		{
		    if(isVIP(playerid) < 1)
		    {
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 10;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 10 extra kills");
			}
			else if(isVIP(playerid) == 1)
			{
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 11;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 11 extra kills");
			}
			else if(isVIP(playerid) == 2)
			{
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 13;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 13 extra kills");
			}
			else if(isVIP(playerid) == 3)
			{
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 15;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 15 extra kills");
			}
		}
		case 91..100:       //10% chance
		{
		    if(isVIP(playerid) < 1)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 10;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 10 less deaths");
			}
			else if(isVIP(playerid) == 1)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 11;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 11 less deaths");
			}
			else if(isVIP(playerid) == 2)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 13;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 13 less deaths");
			}
			else if(isVIP(playerid) == 3)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 15;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 15 less deaths");
			}
			
		}
		case 101..102:      //1% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 50000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $50000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 50000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 60000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $60000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 60000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 65000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $65000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 65000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 75000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $75000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 75000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 103..113:      //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random RPG.", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 5);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 6);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 7);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 8);
			}
		}
		case 114..120:      //7% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random heat-seeking RPG.", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 5);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 6);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 7);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 8);
   			}
		}
		case 121..130:      // 10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random flamethrower", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 10);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 12);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 14);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 14);
   			}
		}
		case 131..140:      //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random grenades", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 5);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 6);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 7);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 8);
   			}
		}
		case 141..150:      //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random fire extinguisher", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 15);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 20);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 25);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 30);
   			}
		}
		default:
		{
			format(string, sizeof(string), "[Event Notice]: Unfortunately there was no reward for winning this event.");
            SendClientMessage(playerid, COLOR_NOTICE, string);
		}
	}

	return 1;
}

/* Event sub-functions */

/* Domination */

public domination_EventStart(playerid)
{
	new j;
	for(j = 0; j < DOMINATION_ZONES; j++)
	{
		dom_gangzones[j] = GangZoneCreate(domination_gangzones[j][0], domination_gangzones[j][1], domination_gangzones[j][2], domination_gangzones[j][3]);
		dom_zonestatus[j][0] = 0; // Capture status, 0 = neutral, 100 = blue team, -100 = red team
		dom_zonestatus[j][1] = 0;
		dom_zonestatus[j][2] = 0;
	}
	for(j = 0; j < DOMINATION_EVENT_SLOTS; j++)
	{
		dom_playercapture[j] = -1;
	}
    FoCo_Event_Rejoin = 0;
	event_count = 0;
	Team = 1;
	inc_t1 = 0;
	inc_t2 = 0;
	Team1 = 0;
	Team2 = 0;
	increment = 0;
	Event_ID = DOMINATION;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	event_start_message("Domination - US Airforce vs. Russian Mob", playerid, FFA_COST);
	
	Event_InProgress = 0;
	Event_Delay = 30;
	return 1;
}

public domination_PlayerJoinEvent(playerid)
{
	new i;
	DebugMsg("Reached dom playerjoin");
	SetPVarInt(playerid, "Dom_PID", event_count);
	event_count++;
	for(i = 0; i < 3; i++)
	{
		GangZoneShowForPlayer(playerid, dom_gangzones[i], COLOR_GREEN);
		GangZoneFlashForPlayer(playerid, dom_gangzones[i], COLOR_YELLOW);
	}
	new string[56];
	format(string, sizeof(string), "Military  Tickets: %d", Ticks);
	domination_textDraws[GetPVarInt(playerid, "Dom_PID")][0] = CreatePlayerTextDraw(playerid, 600.0, 420.0, string);
	format(string, sizeof(string), "Mobsters Tickets: %d", Ticks);
	domination_textDraws[GetPVarInt(playerid, "Dom_PID")][1] = CreatePlayerTextDraw(playerid, 600.0, 430.0, string);
	PlayerTextDrawColor(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][0], COLOR_BLUE);	// Blue
	PlayerTextDrawColor(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][1], COLOR_RED);	// Red


	for(i = 0; i < 2; i++)
	{
		PlayerTextDrawSetShadow(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i], 0);
		PlayerTextDrawAlignment(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i], 3);
		PlayerTextDrawFont(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i], 2);
		PlayerTextDrawShow(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i]);
		
	}
	
	

	SetPVarInt(playerid, "skin", GetPlayerSkin(playerid));
	SetPVarInt(playerid, "color", GetPlayerColor(playerid));
	SetPVarInt(playerid, "Team", Team);


	// Army
	if(Team == 1)
	{
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		
		Team = 2;
		Team1++;
	}
	else
	{
		SetPlayerSkin(playerid, 112);
		SetPlayerColor(playerid, COLOR_RED);
		Team = 1;
		Team2++;
	}
	domination_PlayerRespawn(playerid);
	TogglePlayerControllable(playerid, 0);
	
	GameTextForPlayer(playerid, "~R~~n~~n~ Domination - US AirForce vs. Russian Mob ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
	return 1;
}

public domination_PlayerDied(playerid)
{
	DebugMsg("Played died dom");
	new string[128];
	if(GetPVarInt(playerid, "Team") == 1)
	{
		Ticks_t1--;
		if(Ticks_t1 <= 0)
		{
			format(string, sizeof(string), "[Event]: The russian mob won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	else if(GetPVarInt(playerid, "Team") == 2)
	{
		Ticks_t2--;
		if(Ticks_t2 <= 0)
		{
			format(string, sizeof(string), "[Event]: The army won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	new i;
	for(i = 0; i < EventCount; i++)
	{
		if(EventPlayers[i] != INVALID_PLAYER_ID)
		{
			domination_updateTextDraws(EventPlayers[i]);
		}
	}
	return 1;
}

public domination_PlayerLeftEvent(playerid)
{
	DebugMsg("Player Left Dom");
	new string[128];
	event_count--;
	SetPlayerSkin(playerid, GetPVarInt(playerid, "skin"));
	SetPlayerColor(playerid, GetPVarInt(playerid, "color"));
	DeletePVar(playerid, "skin");
	DeletePVar(playerid, "color");
	if(GetPVarInt(playerid, "Team") == 1)
	{
		Ticks_t1--;
		if(Ticks_t1 <= 0)
		{
			format(string, sizeof(string), "[Event]: The russian mob won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	else if(GetPVarInt(playerid, "Team") == 2)
	{
		Ticks_t2--;
		if(Ticks_t2 <= 0)
		{
			format(string, sizeof(string), "[Event]: The army won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	new i;
	for(i = 0; i < MAX_EVENT_PLAYERS; i++)
	{
		if(EventPlayers[i] != INVALID_PLAYER_ID)
		{
			domination_updateTextDraws(EventPlayers[i]);
		}
		
	}
	return 1;
}

public domination_OneSecond()
{
    Ticks = event_count * 100;
	Ticks_t1 = Ticks;
	Ticks_t2 = Ticks;
	new string[128];
	ZoneCaptureDomination = repeat domination_CaptureZoneTimer();
	domination_TickDecreaserTimer = repeat domination_TickDecreaser();
	dom_AutoZoneDecreaserTimer = repeat dom_AutoZoneDecreaser();

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			SendClientMessage(i, COLOR_SYNTAX, "[Event]: The objective is to capture as many zones and kill as many enemies as possible.");
			format(string, sizeof(string), "Each team has %d tickets available, and these will drain as you die or the enemy has a capture zone.", Ticks);
			SendClientMessage(i, COLOR_SYNTAX, string);
			domination_updateTextDraws(i);
		}
	}
	
	return 1;
}

public domination_PlayerRespawn(playerid)
{
	DebugMsg("Respawning player dom");
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "Team"));
	SetPlayerInterior(playerid, 9);
	SetPlayerCheckpoint(playerid, 315.8047, 1030.2465, 1947.7804, 4.0);
	
	if(GetPVarInt(playerid, "Team") == 1)
	{
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerFacingAngle(playerid, domination_plane_spawns[inc_t1][3]);
		SetPlayerPos(playerid, domination_plane_spawns[inc_t1][0], domination_plane_spawns[inc_t1][1], domination_plane_spawns[inc_t1][2]);
		inc_t1 += 1;
		inc_t1  = inc_t1 % DOMINATION_PLANE_SPAWNS;
	}
	else
	{
		SetPlayerSkin(playerid, 112);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerFacingAngle(playerid, domination_plane_spawns[inc_t2][3]);
		SetPlayerPos(playerid, domination_plane_spawns[inc_t2][0], domination_plane_spawns[inc_t2][1], domination_plane_spawns[inc_t2][2]);
		inc_t2 += 1;
		inc_t2 = inc_t2 % DOMINATION_PLANE_SPAWNS;
	}
	
	
	ResetPlayerWeapons(playerid);
	// Weapons - Dgl, Shotty, M4, Rifle
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 100);
	GivePlayerWeapon(playerid, 31, 500);
	GivePlayerWeapon(playerid, 34, 15);
    return 1;
}

forward domination_updateTextDraws(playerid);
public domination_updateTextDraws(playerid)
{
	new string[56];
	format(string, sizeof(string), "Military  Tickets: %d", Ticks_t1);
	PlayerTextDrawSetString(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][0], string);
	format(string, sizeof(string), "Mobsters Tickets: %d", Ticks_t2);
	PlayerTextDrawSetString(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][1], string);
}

forward dom_IsPlayerInGangZone(playerid, gangzone);
public dom_IsPlayerInGangZone(playerid, gangzone)
{
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(Pos[0] >= domination_gangzones[gangzone][0] && Pos[0] <= domination_gangzones[gangzone][2] && Pos[1] <= domination_gangzones[gangzone][3] && Pos[1] >= domination_gangzones[gangzone][1])
	{
		if(Pos[2] > domination_gangzones[gangzone][4] + 10)
		{
			if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] != -1)
			{
				dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
			}
			return 0;
		}
		if(Pos[2] < domination_gangzones[gangzone][4] - 10)
		{
			if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] != -1)
			{
				dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
			}
			return 0;
		}
		return 1;
	}
	else
	{
		if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] != -1)
		{
			dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
		}
		return 0;
	}
}

#define DOMINATION_GZ 500 // Check every 0.5sec

timer domination_CaptureZoneTimer[DOMINATION_GZ]()
{
	new i, k;
	for(i = 0; i < EventCount; i++)
	{
		for(k = 0; k < 3; k++)
		{
			if(dom_IsPlayerInGangZone(EventPlayers[i], k) == 1)
			{
				if(dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] == -1)
				{
					DebugMsg("It is -1");
					// Nigga capturing zone.
					dom_zonestatus[k][2]++;
				}
				dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] = k;
				domination_CaptureZone(i, k);
				break;
			}
			else 
			{
				if(dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] != -1)
				{
					// Nigga left the zone.
					dom_zonestatus[k][2]--;
				}
				dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] = -1;
			}	
		}
	}
}

timer domination_TickDecreaser[5000]()
{
	new i, dec;
	dec = Ticks/100;
	for(i = 0; i < DOMINATION_ZONES; i++)
	{
		if(dom_zonestatus[i][1] == 1)
		{
			Ticks_t2 -= dec;
			if(Ticks_t2 <= 0)
			{
				EndEvent();
			}
		}
		if(dom_zonestatus[i][1] == -1)
		{
			Ticks_t1 -= dec;
			if(Ticks_t1 <= 0)
			{
				EndEvent();
			}
		}
	}
	for(i = 0; i < EventCount; i++)
	{
		if(EventPlayers[i] != -1)
		{
			domination_updateTextDraws(i);	
		}
	}	
}

timer dom_AutoZoneDecreaser[2000]()
{
	new i, string[56];
	for(i = 0; i < DOMINATION_ZONES; i++)
	{
		// No people capturing it.
		if(dom_zonestatus[i][2] == 0)
		{
			// Zone is owned by blue's.
			if(dom_zonestatus[i][1] == 1 && dom_zonestatus[i][0] >= 20 && dom_zonestatus[i][0] < 100)
			{
				dom_zonestatus[i][0]++;
				format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
				DebugMsg(string);
				if(dom_zonestatus[i][0] == 100)
				{
					domination_UpdateZone(i, 1);
				}
			}
			// Zone is owned by reds.
			else if(dom_zonestatus[i][1] == 2 && dom_zonestatus[i][0] <= -20 && dom_zonestatus[i][0] > -100)
			{
				dom_zonestatus[i][0]--;
				format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
				DebugMsg(string);
				if(dom_zonestatus[i][0] == -100)
				{
					domination_UpdateZone(i, 2);
				}
			}
			// Zone was neutral
			else if(dom_zonestatus[i][1] == 0 && dom_zonestatus[i][0] != 0)
			{
				if(dom_zonestatus[i][0] > 0)
				{
					dom_zonestatus[i][0]--;
					format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
					DebugMsg(string);
				}
				else
				{
					dom_zonestatus[i][0]++;
					format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
					DebugMsg(string);
				}
				if(dom_zonestatus[i][0] == 0)
				{
					domination_UpdateZone(i, 0);
				}
			}
		}
	}
}

CMD:dom_zone(playerid, params[])
{
	new string[56];
	new i;
	for(i = 0; i < DOMINATION_ZONES; i++)
	{
		format(string, sizeof(string), "Zone %d: %d status -> %d owns it -> %d people capping it ", i, dom_zonestatus[i][0], dom_zonestatus[i][1], dom_zonestatus[i][2]);
		DebugMsg(string);
	}
	return 1;
}



forward domination_CaptureZone(playerid, zone);
public domination_CaptureZone(playerid, zone)
{
	new string[128];
	new zone_names[3][28] = {
		{"motel"},
		{"construction"},
		{"farm"}
	};
	if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] == -1)
	{
		if(GetPVarInt(playerid, "Team") == 1 && dom_zonestatus[zone][1] != 1)
		{
			format(string, sizeof(string), "%s is capturing the %s zone.", PlayerName(playerid), zone_names[zone]);
			SendEventMessage(string, -1);
		}
		else if(GetPVarInt(playerid, "Team") == 2 && dom_zonestatus[zone][1] != -1)
		{
			format(string, sizeof(string), "%s is capturing the %s zone.", PlayerName(playerid), zone_names[zone]);
			SendEventMessage(string, -1);
		}
	}
	switch(GetPVarInt(playerid, "Team"))
	{
		case 1:
		{
			if(dom_zonestatus[zone][0] < 100)
			{
				if(dom_zonestatus[zone][0] == -100)
				{
					// Red flashing
					domination_UpdateZone(zone, 4);
				}
				
				// Can only capture if value is less than 100, aka not captured.
				dom_zonestatus[zone][0]++;
				format(string, sizeof(string), "Capturing.. %d", dom_zonestatus[zone][0]); 
				DebugMsg(string);
				if(dom_zonestatus[zone][0] == 0)
				{
					domination_UpdateZone(zone, 0);
				}
				if(dom_zonestatus[zone][0] >= 100)
				{
					dom_zonestatus[zone][1] = 1;
					// Make the zone blue
					domination_UpdateZone(zone, 1);
					format(string, sizeof(string), "%s captured the %s zone!", PlayerName(playerid), zone_names[zone]);
					dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
					SendEventMessage(string, -1);
					return 1;
				}
			}
		}
		case 2:
		{
			if(dom_zonestatus[zone][0] > -100)
			{
				if(dom_zonestatus[zone][0] == 100)
				{
					// Blue flashing
					domination_UpdateZone(zone, 3);
				}
				
				// Can only capture if value is less than 100, aka not captured.
				dom_zonestatus[zone][0]--;
				format(string, sizeof(string), "Capturing.. %d", dom_zonestatus[zone][0]); 
				DebugMsg(string);
				if(dom_zonestatus[zone][0] == 0)
				{
					domination_UpdateZone(zone, 0);
				}
				if(dom_zonestatus[zone][0] <= -100)
				{
					dom_zonestatus[zone][1] = -1;
					// Make the zone red
					domination_UpdateZone(zone, 2);
					format(string, sizeof(string), "%s captured the %s zone!", PlayerName(playerid), zone_names[zone]);
					dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
					SendEventMessage(string, -1);
					return 1;
				}
			}

		}
	}
	return 1;
}

// 0 = Neutral, 1 = Military/Blue, 2 = Mob/Red -> 3 = Military under capture, 4 = Mob under capture
forward domination_UpdateZone(zone, team);
public domination_UpdateZone(zone, team)
{
	new color = -1, flash = -1, i;
	if(team == 0)
	{
		color = COLOR_GREEN;
		flash = 1;
	}
	else if(team == 1)
	{
		color = COLOR_BLUE;
		flash = 0;
	}
	else if(team == 2)
	{
		color = COLOR_RED;
		flash = 0;
	}
	else if(team == 3)
	{
		color = COLOR_BLUE;
		flash = 1;
	}
	else if(team == 4)
	{
		color = COLOR_RED;
		flash = 1;
	}
	if(flash != -1 && color != -1)
	{
		for(i = 0; i < EventCount; i++)
		{
			GangZoneShowForPlayer(EventPlayers[i], dom_gangzones[zone], color);
			if(flash == 0)
			{
				GangZoneStopFlashForPlayer(i, dom_gangzones[zone]);
			}
			else
			{
				GangZoneFlashForPlayer(EventPlayers[i], dom_gangzones[zone], COLOR_YELLOW);
			}
		}

	}
	
	return 1;
}

CMD:gz(playerid)
{
	new string[56];
	new i;
	for(i = 0; i < 3; i++)
	{
		format(string, sizeof(string), "In Gangzone %d: %d", i, dom_IsPlayerInGangZone(playerid, i));
		DebugMsg(string);
	}
	return 1;
}

/* HotLava */
new hotlava_pickups_start = 0;
public HotLava_EventStart(playerid)
{
	new j, i;
	
	FoCo_Event_Rejoin = 0;
	hotlava_pickups_start = 0;
	eCounter = 0;
	foreach(Player, k)
	{
		FoCo_Event_Died[k] = 0;
	}
	for(i = 0; i < 5; i++)
	{
		HotLava_Pickups[i][0] = -1;
		HotLava_Pickups[i][1] = -1;
		HotLava_Pickups[i][2] = -1;
		
	}
	for(j = 0; j < 10; j++)
	{
		HotLava_Disco[j] = -1;
	}
	Event_ID = HOTLAVA;
	
	event_start_message("HotLava", playerid, TDM_COST);
	
	Event_InProgress = 0;
	HotLava_CreateObjects();
	//HotLava_CreatePickups();
	HotLavaFallCheckTimer = repeat HotLavaFallCheck();
	
	return 1;
}

public HotLava_PlayerJoinEvent(playerid)
{
	if(eCounter >= 100)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is full");
	}	
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 150);
	SetPlayerArmour(playerid, 100);
	SetPlayerVirtualWorld(playerid, HOTLAVA_WORLD);
	SetPlayerInterior(playerid, HOTLAVA_INT);
	SetPVarInt(playerid, "eSkin", GetPlayerSkin(playerid));
	SetPVarInt(playerid, "eColor", GetPlayerColor(playerid));
	SetPlayerColor(playerid, COLOR_BLUE);
	SetPlayerSkin(playerid, 82); // elvis
	SetPVarInt(playerid, "InEvent", 1);
	SetPVarInt(playerid, "InHotLava", 1);
	SetPVarInt(playerid, "PlayerStatus", 1);
	SetPlayerPos(playerid, HotLavaSpawns[eCounter][0], HotLavaSpawns[eCounter][1], HotLavaSpawns[eCounter][2]+1);
	
	SendClientMessage(playerid, COLOR_SYNTAX, "[EVENT]: The floor will disappear.. Your task is to be the last one alive, good luck!");
	GameTextForPlayer(playerid, "~R~~n~~n~ HotLava! ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	
	eCounter++;
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

public HotLava_PlayerLeftEvent(playerid)
{
	new string[128];
	SetPVarInt(playerid, "InHotLava", 0);	// Gotta be first otherwise bug below.
	if(eCounter - 1 == 1)
	{
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InHotLava") == 1 && i != playerid)
			{
				SetPlayerColor(i, GetPVarInt(i, "eColor"));
				SetPlayerSkin(i, GetPVarInt(i, "eSkin"));
				SetPVarInt(i, "PlayerStatus", 0);
				
				DeletePVar(i, "eSkin");
				DeletePVar(i, "eColor");
				format(string, sizeof(string), "[EVENT]: %s(%d) died and %s(%d) is therefore the winner of the HotLava event!", PlayerName(playerid), playerid, PlayerName(i), i);
				SendClientMessageToAll(COLOR_CMDNOTICE, string);
				break;
			}
		}
		EndEvent();
		return 1;
	}
	eCounter--;
	format(string, sizeof(string), "[EVENT]: %s(%d) died, there are %d survivors left!", PlayerName(playerid), playerid, eCounter);
	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	SetPlayerColor(playerid, GetPVarInt(playerid, "eColor"));
	SetPlayerSkin(playerid, GetPVarInt(playerid, "eSkin"));
	SetPVarInt(playerid, "PlayerStatus", 0);
	SetPVarInt(playerid, "InEvent", 0);
	
	DeletePVar(playerid, "eSkin");
	DeletePVar(playerid, "eColor");
	if(eCounter <= 0)
	{
		EndEvent();
	}
	return 1;
}

public HotLava_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: HotLava is now in progress and can not be joined.");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	HotLava_StarterDisco();
	return 1;
}

public HotLava_StarterDisco()
{
	new i, j, rand;
	for(i = 0; i < HOTLAVA_MAXDISCO; i++)
	{
		PickingDisco:
		rand = random(100);
		for(j = 0; j < HOTLAVA_MAXDISCO; j++)
		{
			if(HotLava_Disco[j] == -1)
			{
				break;
			}
			if(rand == HotLava_Disco[j])
			{
				goto PickingDisco;
			}
		}
		HotLava_Disco[i] = rand;
		HotLava_SetDisco(HotLava_Objects[rand], 1);
	}
	HotLavaDiscoTimer = repeat Timer_Delete1Disco();
	HotLavaDiscoRepeatTimer = repeat Timer_RotateHotLavaPickups();
	return 1;
}

timer Timer_Delete1Disco[3000]()
{
	new rand;
	rand = random(HOTLAVA_MAXDISCO);
	DestroyDynamicObject(HotLava_Objects[HotLava_Disco[rand]]);
	HotLava_Objects[HotLava_Disco[rand]] = -1;
	HotLava_Disco[rand] = -1;
	HotLava_PickNewDisco(rand);
	return 1;
}

timer Timer_RotateHotLavaPickups[8000]()
{
	HotLava_RotatePickups();
	return 1;
}

public HotLava_PickNewDisco(OldFloor)
{
	new rand, i, amt, tmp;
	rand = random(HOTLAVA_OBJECTS_AMT);
	if(HotLava_Objects[rand] == -1)
	{
		amt = HOTLAVA_OBJECTS_AMT - rand;
		tmp = rand;
		if(amt >= HOTLAVA_OBJECTS_AMT / 2)
		{
			for(i = 0; i < amt; i++)
			{
				rand++;
				if(HotLava_Objects[rand] != -1)
				{
					break;
				}
			}
			if(rand == HOTLAVA_OBJECTS_AMT && HotLava_Objects[rand] == -1)
			{
				for(i = tmp; i >= 0; i--)
				{
					tmp--;
					if(HotLava_Objects[tmp] != -1)
					{
						rand = tmp;
						break;
					}	
				}
			}
		}
		else
		{
			for(i = tmp; i >= 0; i--)
			{
				rand--;
				if(HotLava_Objects[rand] != -1)
				{
					break;
				}
			}
			if(rand == 0 && HotLava_Objects[rand] == -1)
			{
				for(i = 0; i < amt; i++)
				{
					tmp++;
					if(HotLava_Objects[tmp] != -1)
					{
						rand = tmp;
						break;
					}
				}
			}
		}
	}
	HotLava_SetDisco(HotLava_Objects[rand], 1);
	HotLava_Disco[OldFloor] = rand;
	
	return 1;
}

public HotLava_CreateObjects()
{
	new i;
	for(i = 0; i < HOTLAVA_OBJECTS_AMT; i++)
	{
		HotLava_Objects[i] = CreateDynamicObject(19128, HotLavaSpawns[i][0], HotLavaSpawns[i][1], HotLavaSpawns[i][2], 0.0, 0.0, 0.0, HOTLAVA_WORLD, HOTLAVA_INT); 
		SetDynamicObjectMaterial(HotLava_Objects[i], 0, 19454, "all_walls", "mp_motel_whitewall", 0xFFFFFFFF);//Add the White overcoat
	}
	return 1;
}

public HotLava_SetDisco(Object_ID, ONOFF)
{
	if(ONOFF == 0)
	{
		SetDynamicObjectMaterial(Object_ID, 0, 19454, "all_walls", "mp_motel_whitewall", 0xFFFFFFFF);//Set it to White OverCoat
	}
	else
	{
		SetDynamicObjectMaterial(Object_ID, 0, 19128, "none", "none", 0);//Set it back to Disco
	}
	return 1;
}


public HotLava_CreatePickups()
{
	new i, rand_wpn;
	for(i = 0; i < HOTLAVA_PICKUPS; i++)
	{
		rand_wpn = random(5);
		HotLava_Pickups[i][0] = CreateDynamicPickup(Convert_Wpn_To_PickupID(HotLava_Weapons[rand_wpn][0]), 19, HotLavaSpawns[HotLava_Disco[i]][0], HotLavaSpawns[HotLava_Disco[i]][1], HotLavaSpawns[HotLava_Disco[i]][2]+1.5, 1300, 0, -1, 100);
		HotLava_Pickups[i][1] = HotLava_Disco[i];
		HotLava_Pickups[i][2] = HotLava_Weapons[rand_wpn][0]; // Keeping track of what weapon it is.
	}
	return 1;
}

public HotLava_RotatePickups()
{
	new i;
	if(hotlava_pickups_start != 0)
	{
		for(i = 0; i < HOTLAVA_PICKUPS; i++)
		{
			DestroyDynamicPickup(HotLava_Pickups[i][0]);
			HotLava_Pickups[i][1] = -1;
			HotLava_Pickups[i][2] = -1;
		}
		
	}
	hotlava_pickups_start++;
	
	HotLava_CreatePickups();
	return 1;
}

public HotLava_DeletePickups()
{
	new i;
	for(i = 0; i < HOTLAVA_PICKUPS; i++)
	{
		DestroyDynamicPickup(HotLava_Pickups[i][0]);
	}
	return 1;
}

public HotLava_DeleteObjects()
{
	new i;
	for(i = 0; i < HOTLAVA_OBJECTS_AMT; i++)
	{
		DestroyDynamicObject(HotLava_Objects[i]);
	}
	return 1;
}	

/* Labyrinth of Doom */

forward LOD_MazeKillerTimer();
public LOD_MazeKillerTimer()
{
	SetPlayerColor(Maze_Killer, COLOR_RED);
	SendClientMessageToAll(COLOR_GREEN, "[EVENT]: The maze killer is marked in RED, he may have a minigun or he might've ran out of ammo.");
	SendClientMessageToAll(COLOR_GREEN, "[EVENT]: If you kill him, you will become the maze killer!");
	return 1;
}

public lod_EventStart(playerid)
{
	Maze_Killer = -1;
	lod_CreatePickups();
    FoCo_Event_Rejoin = 0;
	event_count = 0;
	rotate_pickups_lod = LOD_EVENT_SLOTS - 1;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = LOD;
	event_start_message("Labyrinth of Doom", playerid, TDM_COST);
	Event_InProgress = 0;
	Event_Delay = 30;
	
	return 1;
}

forward lod_CreatePickups();
public lod_CreatePickups()
{
	new i;
	for(i = 0; i < MAX_LOD_PICKUPS; i++)
	{
		LOD_Pickups[i] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[i][0]), 19, LODWeapSpawns[i][0], LODWeapSpawns[i][1], LODWeapSpawns[i][2], 1400, 15, -1, 100);
	}
	return 1;
}

public lod_PlayerJoinEvent(playerid)
{
	event_count++;
	SetPlayerHealth(playerid, 50);
	SetPlayerArmour(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1400);
	SetPlayerInterior(playerid, 15);
	ResetPlayerWeapons(playerid);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Labyrinth of Doom! ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	SetPlayerPos(playerid, LODSpawns[increment][0], LODSpawns[increment][1], LODSpawns[increment][2]);
	SetPlayerFacingAngle(playerid, LODSpawns[increment][3]+180.0);

	SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
	SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
	SetPlayerSkin(playerid, 33);
	GivePlayerWeapon(playerid, 1, 1);
	SendClientMessage(playerid, COLOR_SYNTAX, "[INFO]: Your goal is to be the last survivor in the maze. Kill at any cost and avoid the maze killer!");
	SendClientMessage(playerid, COLOR_SYNTAX, "[INFO]: A minigun is spawned in the middle of the maze. Reach it first and receive a minigun and become the invisible maze killer!");
	SetPlayerColor(playerid, COLOR_BLUE);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	
	return 1;
}

public lod_PlayerLeftEvent(playerid)
{
	new string[128];
	event_count--;
	if(event_count == 1)
	{
		foreach(Player, i)
		{
			if(GetPVarInt(i, "PlayerStatus") == 1)
			{
				winner = i;
				break;
			}	
		}
		format(string, sizeof(string), "[EVENT]: %s(%d) won the Labyrinth of Doom event!", PlayerName(winner), winner);
		SendClientMessageToAll(COLOR_GREEN, string);
		EndEvent();
		return 1;
	}
    if(playerid == Maze_Killer)
	{
		format(string, sizeof(string), "[EVENT]: %s(%d) the maze killer was killed! His minigun is up for grabs! There are %d players left.", PlayerName(Maze_Killer), Maze_Killer, event_count);
		SendClientMessageToAll(COLOR_GREEN, string);
		DestroyDynamicPickup(LOD_Pickups[0]);
		LOD_Pickups[0] = CreateDynamicPickup(Convert_Wpn_To_PickupID(38), 19, Maze_X, Maze_Y, Maze_Z, 1400, 15, -1, 100);
		Maze_Killer = -1;
		KillTimer(Timer_MazeKiller);
	}
	else
	{
		format(string, sizeof(string), "[EVENT]: %s(%d) died, there are %d players alive.", PlayerName(playerid), playerid, event_count);
		SendClientMessageToAll(COLOR_GREEN, string);
	}
	return 1;
}

public lod_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Labyrinth of Doom is now in progress and can not be joined. The minigun has spawned in the middle of the maze!");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	return 1;
}

/* Area 51 */

public area51_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = AREA51;
	event_start_message("United Special Forces vs. Nuclear Scientists Team DM", playerid, TDM_COST);
	Event_InProgress = 0;
	
	return 1;
}


public area51_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{

		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, area51SpawnsAF[increment][0], area51SpawnsAF[increment][1], area51SpawnsAF[increment][2]);
		SetPlayerFacingAngle(playerid, area51SpawnsAF[increment][3]);
		Motel_Team = 1;
		increment++;
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 70);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, area51SpawnsCrim[increment-1][0], area51SpawnsCrim[increment-1][1], area51SpawnsCrim[increment-1][2]);
		SetPlayerFacingAngle(playerid, area51SpawnsCrim[increment-1][3]);
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 500);
	GivePlayerWeapon(playerid, 31, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Area 51 ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public area51_PlayerLeftEvent(playerid)
{
	new
	    t1,
	    t2;
	new
	    msg[128];

    if(GetPlayerSkin(playerid) == 70)
	{
		Team1_Motel++;
	}

	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: US Special Forces %d - %d Nuclear Scientists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Nuclear Scientists have won the event!");
		Event_Bet_End(1);
		return 1;
	}
	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The US Special Forces have won the event!");
		Event_Bet_End(0);
		return 1;
	}
	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public area51_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Area 51 DM is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	return 1;
}

/* Army vs. Terrorists */

public army_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = ARMYVSTERRORISTS;
	event_start_message("Army vs. Terrorists Team DM", playerid, TDM_COST);
	Event_InProgress = 0;
		
	for(new i; i < 3; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(NavyTerroristVehicles[i][modelID], NavyTerroristVehicles[i][dX], NavyTerroristVehicles[i][dY], NavyTerroristVehicles[i][dZ], NavyTerroristVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else
		{
			break;
		}
	}

	return 1;
}


public army_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);
	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, armySpawnsType1[increment][0], armySpawnsType1[increment][1], armySpawnsType1[increment][2]);
		SetPlayerFacingAngle(playerid, armySpawnsType1[increment][3]);
		Motel_Team = 1;
		increment++;
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 73);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, armySpawnsType2[increment-1][0], armySpawnsType2[increment-1][1], armySpawnsType2[increment-1][2]);
		SetPlayerFacingAngle(playerid, armySpawnsType2[increment-1][3]);
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 750);
	GivePlayerWeapon(playerid, 34, 50);
	GameTextForPlayer(playerid, "~R~~n~~n~ Army vs. Terrorists ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
    Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public army_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 73)
	{
		Team1_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: Army %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);


	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Army have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}

	return 1;
}


public army_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Army vs. Terrorists DM is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

/* Big Smoke */

public bs_EventStart(playerid)
{
    new
	    string[256];

    Event_ID = BIGSMOKE;
	event_start_message("Bigsmoke", playerid, FFA_COST);
    if(FoCo_Event_Rejoin == 1)
    {
        format(string, sizeof(string), "[EVENT]: Type /(auto)join! - This event is rejoinable.");
        SendClientMessageToAll(COLOR_CMDNOTICE, string);
    }
    if(FoCo_Event_Rejoin == 0)
    {
        format(string, sizeof(string), "[EVENT]: Type /(auto)join! - This event is NOT rejoinable.");
        SendClientMessageToAll(COLOR_CMDNOTICE, string);
    }
	foreach(Player, i)
	{
	    if(i != INVALID_PLAYER_ID)
	    {
	        Event_Died[i] = 0;
	    }
	}
	IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
	Event_InProgress = 0;
	Event_FFA = 1;
	return 1;
}


public bs_PlayerJoinEvent(playerid)
{
	if(FFAArmour == 1)
    {
		SetPlayerArmour(playerid, 99);
	}

	else
	{
	    SetPlayerArmour(playerid, 0);
	}

    if(FoCo_Event_Died[playerid] == 0)
	{
 		Event_Kills[playerid] = 0;
	}
	new randomnum = random(20);
	SetPlayerHealth(playerid, 99);
	SetPlayerInterior(playerid, 2);
	SetPlayerPos(playerid, BigSmokeSpawns[randomnum][0], BigSmokeSpawns[randomnum][1], BigSmokeSpawns[randomnum][2]);
	SetPlayerVirtualWorld(playerid, 1500);
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, FFAWeapons, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Big ~h~ Smoke!", 800, 3);
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

/* Brawl */

public brawl_EventStart(playerid)
{
    if(BrawlX == 0.0)
	{
		GetPlayerPos(playerid, BrawlX, BrawlY, BrawlZ);
		GetPlayerFacingAngle(playerid, BrawlA);
		BrawlInt = GetPlayerInterior(playerid);
		BrawlVW = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_SYNTAX, "[INFO]: Since you're a dick and forgot to set brawl location, it has been set to your current position.");
	}
    FoCo_Event_Rejoin = 1;
	Event_ID = BRAWL;
	event_start_message("Brawl", playerid, FFA_COST);
	Event_InProgress = 0;
	Event_FFA = 1;
	return 1;
}

public brawl_PlayerJoinEvent(playerid)
{
	
	GiveAchievement(playerid, 24);
	SetPVarInt(playerid,"PlayerStatus",1);
	SetPlayerPos(playerid, BrawlX, BrawlY, BrawlZ);
	SetPlayerFacingAngle(playerid, BrawlA);
	SetPlayerInterior(playerid, BrawlInt);
	SetPlayerHealth(playerid, 99);
	SetPlayerArmour(playerid, 0);
	SetPlayerVirtualWorld(playerid, BrawlVW);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ The ~h~ Brawl!", 800, 3);
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

/* Compound */

public compound_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = COMPOUND;
	
	event_start_message("Compound Attack", playerid, TDM_COST);
	Event_InProgress = 0;
	
	for(new i; i < 9; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(compoundVehicles[i][modelID], compoundVehicles[i][dX], compoundVehicles[i][dY], compoundVehicles[i][dZ], compoundVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else
		{
			break;
		}
	}
	return 1;
}


public compound_PlayerJoinEvent(playerid)
{
    SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, swatcompoundattack[increment][0], swatcompoundattack[increment][1], swatcompoundattack[increment][2]);
		SetPlayerFacingAngle(playerid, swatcompoundattack[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the Compound.");
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 221);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, terroristcoumpoundattack[increment-1][0], terroristcoumpoundattack[increment-1][1], terroristcoumpoundattack[increment-1][2]);
		SetPlayerFacingAngle(playerid, terroristcoumpoundattack[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the Compound ...");
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 33, 30);
	GivePlayerWeapon(playerid, 31, 500);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Compound Attack ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public compound_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 221)
	{
		Team1_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: SWAT %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: SWAT have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public compound_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Compound Attack is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				SetPlayerCheckpoint(i, -2126.5669,-84.7937,35.3203,2.3031);
			}
		}
	}
}

/* Drug Run */

public drugrun_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		EventDrugDelay[i] = -1;
	}
	
	DrugDelayTimer = repeat DrugDelay();

	Event_ID = DRUGRUN;
	event_start_message("Team Drug Run", playerid, TDM_COST);
	Event_InProgress = 0;

	Iter_Clear(Event_Vehicles);

	for(new i; i < 16; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(DrugRunVehicles[i][modelID], DrugRunVehicles[i][dX], DrugRunVehicles[i][dY], DrugRunVehicles[i][dZ], DrugRunVehicles[i][Rotation], 1, 1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else 
		{
			break; 
		}
	}
	return 1;
}


public drugrun_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 285);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, drugSpawnsType1[increment][0], drugSpawnsType1[increment][1], drugSpawnsType1[increment][2]);
		SetPlayerFacingAngle(playerid, drugSpawnsType1[increment][3]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the checkpoint, don't let a drug runner enter ...");
		SendClientMessage(playerid, COLOR_GREEN, ".. it else they will win, you will win by eliminating there team..");
		Motel_Team = 1;
		increment++;
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 21);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, drugSpawnsType2[increment-1][0], drugSpawnsType2[increment-1][1], drugSpawnsType2[increment-1][2]);
		SetPlayerFacingAngle(playerid, drugSpawnsType2[increment-1][3]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the checkpoint, don't let the SWAT team ...");
		SendClientMessage(playerid, COLOR_GREEN, ".. kill you else you will lose. Your team MUST drop off the package..");
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Team Drug ~h~ Run!~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public drugrun_PlayerLeftEvent(playerid)
{
   	new
	   t1,
	   t2,
	   msg[128];

    if(GetPlayerSkin(playerid) == 285)
	{
		Team2_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 21)
	{
		Team1_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: SWAT %d - %d Drug Runners", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);
	DisablePlayerCheckpoint(playerid);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Criminals have won the event!");
        Event_Bet_End(1);
		return 1;
	}
	
	if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: S.W.A.T have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}

	return 1;
}


public drugrun_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Team Drug Run is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			SetPlayerCheckpoint(i, 1421.5542,2773.9951,10.8203, 4.0);
		}
	}
}

/* Hydra */

public hydra_EventStart(playerid)
{
    Event_ID = HYDRA;
	
	event_start_message("Hydra Wars", playerid, FFA_COST);
	Event_InProgress = 0;
	HydraFallCheckTimer = repeat HydraFallCheck();
	Event_Delay = 30;
	Event_FFA = 1;
	return 1;
}


public hydra_PlayerJoinEvent(playerid)
{
    if(EventPlayersCount() == 12)
	{
		return SendClientMessage(playerid, COLOR_NOTICE, "                This event is full");
	}

	SetPlayerVirtualWorld(playerid, 505);
	SetPlayerPos(playerid, hydraSpawnsType1[increment][0], hydraSpawnsType1[increment][1], hydraSpawnsType1[increment][2]);
	Event_PlayerVeh[playerid] = CreateVehicle(520, hydraSpawnsType1[increment][0], hydraSpawnsType1[increment][1], hydraSpawnsType1[increment][2], hydraSpawnsType1[increment][3], -1, -1, 15);
	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	PutPlayerInVehicle(playerid, Event_PlayerVeh[playerid], 0);
	GameTextForPlayer(playerid, "~R~~n~~n~ HYDRA ~n~ WARS", 1500, 3);
	TogglePlayerControllable(playerid, 0);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public hydra_PlayerLeftEvent(playerid)
{
	SetPVarInt(playerid, "LeftEventJust", 1);
	event_SpawnPlayer(playerid);

	new
	    msg[128];

	if(EventPlayersCount() == 1)
	{
		
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				winner = i;
				break;
			}
		}
	
		format(msg, sizeof(msg), "				%s has won the Hydra Wars event!", PlayerName(winner));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		GiveAchievement(winner, 82);
		SendClientMessage(winner, COLOR_NOTICE, "You have won the Hydra Wars event! You have earnt 10 score!");
		FoCo_Player[winner][score] = FoCo_Player[winner][score] + 10;
		lastEventWon = winner;
		Event_Bet_End(winner);
		EndEvent();
	}

	return 1;
}


public hydra_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Hydra wars is now in progress and can not be joined");
	hydraTime = defer HydraEnd();
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
		}
	}
}

/* Jeff TDM */

public jefftdm_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

    foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = JEFFTDM;
	event_start_message("Jefferson Motel Team DM", playerid, TDM_COST);
	Event_InProgress = 0;

	return 1;
}


public jefftdm_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 15);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 285);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, motelSpawnsType1[increment][0], motelSpawnsType1[increment][1], motelSpawnsType1[increment][2]);
		SetPlayerFacingAngle(playerid, motelSpawnsType1[increment][3]);
		Motel_Team = 1;
		increment++;
	}

	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 50);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, motelSpawnsType2[increment-1][0], motelSpawnsType2[increment-1][1], motelSpawnsType2[increment-1][2]);
		SetPlayerFacingAngle(playerid, motelSpawnsType2[increment-1][3]);
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 500);
    TogglePlayerControllable(playerid, 0);
	GameTextForPlayer(playerid, "~R~~n~~n~ Motel ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public jefftdm_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 285)
	{
		Team2_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 50)
	{
		Team1_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: S.W.A.T %d - %d Criminals", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Criminals have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: S.W.A.T have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	/*if(EventPlayersCount() == 1)
	{
		EndEvent();
	}*/
	return 1;
}


public jefftdm_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Jefferson Motel DM is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

/* Mad Doggs */

public md_EventStart(playerid)
{
	   	new
		    string[256];

	    Event_ID = MADDOGG;
		event_start_message("Mad Dogg's Mansion DM", playerid, FFA_COST);
	    if(FoCo_Event_Rejoin == 1)
	    {
         	format(string, sizeof(string), "[EVENT]: Type /(auto)join! - This event is rejoinable.");
         	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	    }
	    if(FoCo_Event_Rejoin == 0)
	    {
         	format(string, sizeof(string), "[EVENT]: Type /join! - This event is NOT rejoinable.");
         	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	    }
		foreach(Player, i)
		{
		    if(i != INVALID_PLAYER_ID)
		    {
		        Event_Died[i] = 0;
		    }
		}
		IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
		Event_InProgress = 0;
		Event_FFA = 1;
		return 1;
}


public md_PlayerJoinEvent(playerid)
{
	if(Event_ID == MADDOGG)
	{
	    if(FFAArmour == 1)
        {
			SetPlayerArmour(playerid, 99);
		}

		else
		{
		    SetPlayerArmour(playerid, 0);
		}

		if(Event_Died[playerid] != 1)
		{
		    Event_Kills[playerid] = 0;
		}
		FoCo_Event_Died[playerid]++;
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 5);
		new randomnum = random(25);
		SetPlayerPos(playerid, MadDogSpawns[randomnum][0], MadDogSpawns[randomnum][1], MadDogSpawns[randomnum][2]);
		SetPlayerFacingAngle(playerid, MadDogSpawns[randomnum][3]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, FFAWeapons, 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Mad ~h~ Doggs!", 800, 3);
	}
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

/* Minigun */

public minigun_EventStart(playerid)
{
	Event_ID = MINIGUN;
	event_start_message("Minigun Wars", playerid, FFA_COST);
	SendClientMessageToAll(COLOR_CMDNOTICE,  "[EVENT]: 30 seconds before it starts, type /join!");
	Event_InProgress = 0;
	
	return 1;
}


public minigun_PlayerJoinEvent(playerid)
{
    if(EventPlayersCount() == 17)
	{
		return SendClientMessage(playerid, COLOR_NOTICE, "                This event is full");
	}

	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerPos(playerid, minigunSpawnsType1[increment][0], minigunSpawnsType1[increment][1], minigunSpawnsType1[increment][2]);
	SetPlayerFacingAngle(playerid, minigunSpawnsType1[increment][3]);
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
	GivePlayerWeapon(playerid, 38, 3000);
	GameTextForPlayer(playerid, "~R~~n~~n~ MINIGUN ~n~ WARS", 1500, 3);
	TogglePlayerControllable(playerid, 0);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public minigun_PlayerLeftEvent(playerid)
{
    SetPVarInt(playerid, "LeftEventJust", 1);

	if(EventPlayersCount() == 1)
	{
		new
				msg[128];
	        
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				winner = i;
				break;
			}
		}
		
		format(msg, sizeof(msg), "				%s has won the Minigun Wars event!", PlayerName(winner));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		GiveAchievement(winner, 80);
		SendClientMessage(winner, COLOR_NOTICE, "You have won the Minigun Wars event! You have earnt 10 score!");
		FoCo_Player[winner][score] += 10;
		lastEventWon = winner;
		Event_Bet_End(winner);
		EndEvent();
	}
	return 1;
}


public minigun_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Minigun wars is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
		}
	}
}

/* Navy vs Terrorists */

public navy_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}
		
	Event_ID = NAVYVSTERRORISTS;
	event_start_message("Navy Seals vs. Terrorists", playerid, TDM_COST);
	Event_InProgress = 0;
	
	
	for(new i; i < 12; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(navyVehicles[i][modelID], navyVehicles[i][dX], navyVehicles[i][dY], navyVehicles[i][dZ], navyVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else 
		{
			break; 
		}
	}
	
	return 1;
}


public navy_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, navySealsBoat[increment][0], navySealsBoat[increment][1], navySealsBoat[increment][2]);
		SetPlayerFacingAngle(playerid, navySealsBoat[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the boat in the checkpoint and eliminate all terrorist activity.");
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 221);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, terroristsBoat[increment-1][0], terroristsBoat[increment-1][1], terroristsBoat[increment-1][2]);
		SetPlayerFacingAngle(playerid, terroristsBoat[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the boat at all costs ...");
	}


	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 29, 750);
	GivePlayerWeapon(playerid, 31, 500);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Navy Seals Vs. Terrorists ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public navy_PlayerLeftEvent(playerid)
{
   	new
	   	t1,
		t2,
		msg[128];

    if(GetPlayerSkin(playerid) == 221)
	{
		Team1_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: Navy Seals %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}
	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}
	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Navy Seals have won the event!");
		Event_Bet_End(0);
		return 1;
	}
	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public navy_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Navy Seals Vs. Terrorists is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			DisablePlayerCheckpoint(i);
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				SetPlayerCheckpoint(i, -1446.6353,1502.6423,1.7366, 4.0);
			}
		}
	}
}

/* Oil Rig */

public oilrig_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = OILRIG;
	event_start_message("Oil Rig Terrorists", playerid, TDM_COST);
	Event_InProgress = 0;
	OilrigFallCheckTimer = repeat OilrigFallCheck();
	
	return 1;
}


public oilrig_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, swatoilrigspawns1[increment][0], swatoilrigspawns1[increment][1], swatoilrigspawns1[increment][2] + 4);
		SetPlayerFacingAngle(playerid, swatoilrigspawns1[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the Oil Rig.");
	}
	else
	{
 		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 221);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, terroristoilrigspawns1[increment-1][0], terroristoilrigspawns1[increment-1][1], terroristoilrigspawns1[increment-1][2]);
		SetPlayerFacingAngle(playerid, terroristoilrigspawns1[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the Oil Rig ...");
	}
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 500);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Oil Rig Terrorists ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public oilrig_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 221)
	{
		Team1_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: SWAT %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: SWAT have won the event!");
		Event_Bet_End(0);
		increment = 0;
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public oilrig_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Oil Rig Terrorists is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

new increment2;
new mycounter;
public plane_EventStart(playerid)
{
	increment2 = 0;
	FoCo_Event_Rejoin = 0;
	Team1_Motel = 0;
	Team2_Motel = 0;
	mycounter = 0;
	
	foreach(Player, i)
	{
	    FoCo_Event_Died[i] = 0;
	}

	Event_ID = PLANE;
	event_start_message("Plane Survival", playerid, TDM_COST);
	Event_InProgress = 0;
	
	for(new i; i < 33; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(PlaneVehicles[i][modelID], PlaneVehicles[i][dX], PlaneVehicles[i][dY], PlaneVehicles[i][dZ], PlaneVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else
		{
			break;
		}
	}
	
    PlaneFallCheckTimer = repeat PlaneFallCheck();
	return 1;
}

public plane_PlayerJoinEvent(playerid)
{
    if(mycounter == 30)
	{
		return SendClientMessage(playerid, COLOR_NOTICE, "This event is full");
	}
	
    SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);
	
	if(mycounter == 0 || mycounter == 10 || mycounter == 20)
	{
		Team1_Motel++;          // Pilots.
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerSkin(playerid, 61);
		SetPlayerPos(playerid, planeSpawnsType2[increment2][0], planeSpawnsType2[increment2][1], planeSpawnsType2[increment2][2]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Ram the hobos off the roof with a plane of your own choosing.");
		increment2++;
	}
    else
	{
	    Team2_Motel++;          // Hobos team
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		SetPlayerSkin(playerid, 137);
		SetPlayerColor(playerid, COLOR_RED);
        SetPlayerPos(playerid, PlaneSpawnType1[increment][0], PlaneSpawnType1[increment][1], PlaneSpawnType1[increment][2]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive!");
		increment++;
 	}
 	ResetPlayerWeapons(playerid);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Plane Survival! ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	mycounter++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
	
}

public plane_PlayerLeftEvent(playerid)
{
	new msg[128];
	
    if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
	    Team2_Motel--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Pilots %d - %d Hobos", Team1_Motel, Team2_Motel);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}

	if(GetPVarInt(playerid, "MotelTeamIssued") == 1)
	{
		Team1_Motel--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Pilots %d - %d Hobos", Team1_Motel, Team2_Motel);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}

	if(Team2_Motel == 0)
	{
	    SendClientMessageToAll(COLOR_NOTICE, "[NOTICE]: The event ended due to all hobos falling off the roof.");
	    Event_Bet_End(0);
		EndEvent();
	}
	
	else if(Team1_Motel == 0)
	{
     	SendClientMessageToAll(COLOR_NOTICE, "[NOTICE]: The event ended due to all pilots dying.");
     	Event_Bet_End(1);
		EndEvent();
	}

	SetPVarInt(playerid, "MotelTeamIssued", 0);
	return 1;
}

public plane_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Plane Survival is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public hspursuit_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;
    team_issue = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = HIGHSPEEDPURSUIT;
	event_start_message("High-speed Pursuit", playerid, TDM_COST);
	Event_InProgress = 0;
	
	new car;
	caridx = 0;
	Iter_Clear(Event_Vehicles);
	for(new i = 0; i <= 24; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			if(i == 0)     // If you change this, also change the ones on top!!
			{
				car = CreateVehicle(RandomHS_Pursuit_Vehicle(), HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], -1, -1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				E_HSPursuit_Criminal = car;
				eventVehicles[i] = car;
			}
			else if (i == 10 || i == 24)    // If this is changed, change accordingly on top. Mavericks
 			{
   				car = CreateVehicle(497, HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], 125, 125, 600000);
   				SetVehicleVirtualWorld(car, 1500);
      			eventVehicles[i] = car;
	        	Iter_Add(Event_Vehicles, car);
    		}
    		else if (i % 4 == 0)    // Cheetahs
    		{
    			car = CreateVehicle(415, HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], 125, 125, 600000);
   				SetVehicleVirtualWorld(car, 1500);
      			eventVehicles[i] = car;
	        	Iter_Add(Event_Vehicles, car);
    		}
		    else        // Sultans
		    {
	    		car = CreateVehicle(560, HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], 0, 1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				eventVehicles[i] = car;
				Iter_Add(Event_Vehicles, car);
  			}
		}
		else
		{
			break;
		}
	}
	if (ForcedCriminal != -1)
	{
		PlayerJoinEvent(ForcedCriminal);
	    hspursuit_PlayerJoinEvent(ForcedCriminal);
	}
	return 1;
}

public hspursuit_PlayerJoinEvent(playerid)
{
	new string[128];
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(ForcedCriminal != -1)
	{
 		if(ForcedCriminal == playerid)
   		{
        	Motel_Team = 1;
			SetPVarInt(playerid, "MotelTeamIssued", 1);
			SetPlayerColor(playerid, COLOR_RED);
			FoCo_Criminal = playerid;
			HSPursuitTimer = defer EndHSPursuit();
			SetPlayerSkin(playerid, 50);
			PutPlayerInVehicle(playerid, E_HSPursuit_Criminal, 0);
			SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
			format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_NOTICE, "You have been chosen by an admin to be the criminal");
			ForcedCriminal = -1;
     	}
	}
	else if(Motel_Team == 0 && ForcedCriminal == -1)
	{
		Motel_Team = 1;
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPlayerColor(playerid, COLOR_RED);
		FoCo_Criminal = playerid;
		HSPursuitTimer = defer EndHSPursuit();
		SetPlayerSkin(playerid, 50);
		PutPlayerInVehicle(playerid, E_HSPursuit_Criminal, 0);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
		format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
		SendClientMessageToAll(COLOR_GREEN, string);
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		SetPlayerSkin(playerid, 280);
		SetPlayerColor(playerid, COLOR_BLUE);
		team_issue++;
		caridx++;
        PutPlayerInVehicle(playerid, eventVehicles[caridx], 0);
        

		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Take out the criminal car at all costs ...");

		if(FoCo_Criminal != INVALID_PLAYER_ID)
		{
			SetPlayerMarkerForPlayer( playerid, FoCo_Criminal, 0xFFFFFF00);
		}
 	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Pursuit ~h~ ~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public hspursuit_PlayerLeftEvent(playerid)
{
    if(playerid == FoCo_Criminal)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal being caught!");
		Event_Bet_End(0);
		EndEvent();
	}

	if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
     	team_issue--;
	}

	if(team_issue == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the police being killed!");
		Event_Bet_End(1);
		EndEvent();
	}
	SetPVarInt(playerid, "MotelTeamIssued", 0);

	return 1;
}


public hspursuit_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Pursuit is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

/* Pursuit */

public pursuit_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;
    team_issue = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = PURSUIT;
	event_start_message("Pursuit", playerid, TDM_COST);
	Event_InProgress = 0;


	new car;
	caridx = 0;
	Iter_Clear(Event_Vehicles);
	for(new i = 0; i < 25; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			if(i == 0)     // If you change this, also change the ones on top!!
			{
				car = CreateVehicle(Random_Pursuit_Vehicle(), pursuitVehicles[i][0], pursuitVehicles[i][1], pursuitVehicles[i][2], pursuitVehicles[i][3], -1, -1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				E_Pursuit_Criminal = car;
				eventVehicles[i] = car;
			}
			else if (i == 10 || i == 24)    // If this is changed, change accordingly on top
 			{
   				car = CreateVehicle(497, pursuitVehicles[i][0], pursuitVehicles[i][1], pursuitVehicles[i][2], pursuitVehicles[i][3], 0, 1, 600000);
   				SetVehicleVirtualWorld(car, 1500);
      			eventVehicles[i] = car;
	        	Iter_Add(Event_Vehicles, car);
    		}
		    else
		    {
	    		car = CreateVehicle(596, pursuitVehicles[i][0], pursuitVehicles[i][1], pursuitVehicles[i][2], pursuitVehicles[i][3], 0, 1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				eventVehicles[i] = car;
				Iter_Add(Event_Vehicles, car);
  			}
		}
		else
		{
			break;
		}
	}
	if (ForcedCriminal != -1)
	{
		PlayerJoinEvent(ForcedCriminal);
	    pursuit_PlayerJoinEvent(ForcedCriminal);
	}
	return 1;
}

public pursuit_PlayerJoinEvent(playerid)
{
	new string[128];
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);
	
	if(ForcedCriminal != -1)
	{
 		if(ForcedCriminal == playerid)
   		{
        	Motel_Team = 1;
			SetPVarInt(playerid, "MotelTeamIssued", 1);
			SetPlayerColor(playerid, COLOR_RED);
			FoCo_Criminal = playerid;
			PursuitTimer = defer EndPursuit();
			SetPlayerSkin(playerid, 50);
			PutPlayerInVehicle(playerid, E_Pursuit_Criminal, 0);
			SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
			format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_NOTICE, "You have been chosen by an admin to be the criminal");
			ForcedCriminal = -1;
     	}
	}
	else if(Motel_Team == 0 && ForcedCriminal == -1)
	{
		Motel_Team = 1;
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPlayerColor(playerid, COLOR_RED);
		FoCo_Criminal = playerid;
		PursuitTimer = defer EndPursuit();
		SetPlayerSkin(playerid, 50);
		PutPlayerInVehicle(playerid, E_Pursuit_Criminal, 0);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
		format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
		SendClientMessageToAll(COLOR_GREEN, string);
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
	//	//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
	//	//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 280);
		SetPlayerColor(playerid, COLOR_BLUE);
		team_issue++;
		
		caridx++;
        PutPlayerInVehicle(playerid, eventVehicles[caridx], 0);
        

		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Take out the criminal car at all costs ...");

		if(FoCo_Criminal != INVALID_PLAYER_ID)
		{
			SetPlayerMarkerForPlayer( playerid, FoCo_Criminal, 0xFFFFFF00);
		}
 	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Pursuit ~h~ ~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public pursuit_PlayerLeftEvent(playerid)
{
    if(playerid == FoCo_Criminal)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal being caught!");
		Event_Bet_End(0);
		EndEvent();
	}

	if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
     	team_issue--;
	}
	
	if(team_issue == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the police being killed!");
		Event_Bet_End(1);
		EndEvent();
	}
	

	SetPVarInt(playerid, "MotelTeamIssued", 0);
	//SetPlayerSkin(playerid, GetPVarInt(playerid, "MotelSkin"));
	//SetPlayerColor(playerid, GetPVarInt(playerid, "MotelColor"));

	return 1;
}


public pursuit_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Pursuit is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public construction_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = CONSTRUCTION;
	event_start_message("Construction-TDM ", playerid, TDM_COST);
	Event_InProgress = 0;
	Event_Delay = 30;
	Team1 = 0;
	Team2 = 0;
	
	return 1;
}

public construction_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1400);
	SetPlayerInterior(playerid, 0);
	
	if(Motel_Team == 0)
	{
		Team1++;
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 27);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, constructionspawn1[increment][0], constructionspawn1[increment][1], constructionspawn1[increment][2] + 4);
		SetPlayerFacingAngle(playerid, constructionspawn1[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Kill the engineers!");
	}
	else
	{
		Team2++;
 		SetPVarInt(playerid, "MotelTeamIssued", 2);
		SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 153);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, constructionspawn2[increment-1][0], constructionspawn2[increment-1][1], constructionspawn2[increment-1][2]);
		SetPlayerFacingAngle(playerid, constructionspawn2[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Kill the workers!");
	}
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 250);
	GivePlayerWeapon(playerid, 33, 150);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Oil Rig Terrorists ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}

public construction_PlayerLeftEvent(playerid)
{
	new msg[128];

	if(GetPVarInt(playerid, "MotelTeamIssued") == 1)
	{
		Team1--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Workers %d - %d Engineers", Team1, Team2);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}
	else if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
		Team2--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Workers %d - %d Engineers", Team1, Team2);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}
	
	
	if(Team1 == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The engineers have won the event!");
		increment = 0;
		Event_Bet_End(1);
		EndEvent();
	}
	else if(Team2 == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The workers have won the event!");
		increment = 0;
		Event_Bet_End(0);
		EndEvent();
	}
	
	SetPVarInt(playerid, "MotelTeamIssued", 0);
	
	return 1;
}

public construction_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Construction TDM is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public Random_Pursuit_Vehicle()
{
	new randVeh, vehicle;
	randVeh = random(50);
	switch(randVeh)
	{
		case 0: { vehicle = 402; }
		case 1: { vehicle = 405; }
		case 2: { vehicle = 402; }
		case 3: { vehicle = 426; }
		case 4: { vehicle = 434; }
		case 5: { vehicle = 439; }
		case 6: { vehicle = 402; }
		case 7: { vehicle = 489; }
		case 8: { vehicle = 495; }
		case 9: { vehicle = 412; }
		case 10: { vehicle = 419; }
		case 11: { vehicle = 421; }
		case 12: { vehicle = 422; }
		case 13: { vehicle = 426; }
		case 14: { vehicle = 436; }
		case 15: { vehicle = 445; }
		case 16: { vehicle = 466; }
		case 17: { vehicle = 467; }
		case 18: { vehicle = 470; }
		case 19: { vehicle = 474; }
		case 20: { vehicle = 475; }
		case 21: { vehicle = 477; }
		case 22: { vehicle = 491; }
		case 23: { vehicle = 492; }
		case 24: { vehicle = 500; }
		case 25: { vehicle = 506; }
		case 26: { vehicle = 508; }
		case 27: { vehicle = 516; }
		case 28: { vehicle = 517; }
		case 29: { vehicle = 526; }
		case 30: { vehicle = 527; }
		case 31: { vehicle = 529; }
		case 32: { vehicle = 533; }
		case 33: { vehicle = 534; }
		case 34: { vehicle = 535; }
		case 35: { vehicle = 536; }
		case 36: { vehicle = 537; }
		case 37: { vehicle = 540; }
		case 38: { vehicle = 542; }
		case 39: { vehicle = 549; }
		case 40: { vehicle = 550; }
		case 41: { vehicle = 555; }
		case 42: { vehicle = 566; }
		case 43: { vehicle = 567; }
		case 44: { vehicle = 575; }
		case 45: { vehicle = 576; }
		case 46: { vehicle = 579; }
		case 47: { vehicle = 580; }
		case 48: { vehicle = 587; }
		case 49: { vehicle = 602; }
		case 50: { vehicle = 603; }
	}
	return vehicle;
}

public RandomHS_Pursuit_Vehicle()
{
	new randVeh, vehicle;
	randVeh = random(30);
	switch(randVeh)
	{
		case 0: { vehicle = 402; }
		case 1: { vehicle = 411; }
		case 2: { vehicle = 415; }
		case 3: { vehicle = 424; }
		case 4: { vehicle = 429; }
		case 5: { vehicle = 451; }
		case 6: { vehicle = 461; }
		case 7: { vehicle = 463; }
		case 8: { vehicle = 468; }
		case 9: { vehicle = 471; }
		case 10: { vehicle = 477; }
		case 11: { vehicle = 494; }
		case 12: { vehicle = 495; }
		case 13: { vehicle = 496; }
		case 14: { vehicle = 502; }
		case 15: { vehicle = 503; }
		case 16: { vehicle = 506; }
		case 17: { vehicle = 509; }
		case 18: { vehicle = 541; }
		case 19: { vehicle = 555; }
		case 20: { vehicle = 556; }
		case 21: { vehicle = 559; }
		case 22: { vehicle = 560; }
		case 23: { vehicle = 562; }
		case 24: { vehicle = 565; }
		case 25: { vehicle = 568; }
		case 26: { vehicle = 581; }
		case 27: { vehicle = 587; }
		case 28: { vehicle = 589; }
		case 29: { vehicle = 602; }
		case 30: { vehicle = 603; }
	}
	return vehicle;
}


/* Sumo */

public monster_EventStart(playerid)
{
    Event_ID = MONSTERSUMO;
	event_start_message("Monster Sumo", playerid, TDM_COST);
	Event_InProgress = 0;
	
	return 1;
}



public banger_EventStart(playerid)
{
	Event_ID = BANGERSUMO;
	event_start_message("Banger Sumo", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}



public sandking_EventStart(playerid)
{
	Event_ID = SANDKSUMO;
	event_start_message("SandKing Sumo", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}



public sandkingR_EventStart(playerid)
{
	Event_ID = SANDKSUMORELOADED;
	event_start_message("SandKing Sumo Reloaded", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}


public derby_EventStart(playerid)
{
	Event_ID = DESTRUCTIONDERBY;
	event_start_message("Destruction Derby", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}


public monster_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType1[increment][0], sumoSpawnsType1[increment][1], sumoSpawnsType1[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType1[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(556, sumoSpawnsType1[increment][0], sumoSpawnsType1[increment][1], sumoSpawnsType1[increment][2], sumoSpawnsType1[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType1[increment][3]);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	
	return 1;
}


public banger_PlayerJoinEvent(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType2[increment][0], sumoSpawnsType2[increment][1], sumoSpawnsType2[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType2[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(504, sumoSpawnsType2[increment][0], sumoSpawnsType2[increment][1], sumoSpawnsType2[increment][2], sumoSpawnsType2[increment][3], -1, -1, 15);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
    return 1;
}


public sandking_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType3[increment][0], sumoSpawnsType3[increment][1], sumoSpawnsType3[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType3[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(495, sumoSpawnsType3[increment][0], sumoSpawnsType3[increment][1], sumoSpawnsType3[increment][2], sumoSpawnsType3[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType3[increment][3]);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public sandkingR_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType5[increment][0], sumoSpawnsType5[increment][1], sumoSpawnsType5[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType5[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(495, sumoSpawnsType5[increment][0], sumoSpawnsType5[increment][1], sumoSpawnsType5[increment][2], sumoSpawnsType5[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType5[increment][3]);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public derby_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerInterior(playerid, 15);
	SetPlayerPos(playerid, sumoSpawnsType4[increment][0], sumoSpawnsType4[increment][1], sumoSpawnsType4[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType4[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(504, sumoSpawnsType4[increment][0], sumoSpawnsType4[increment][1], sumoSpawnsType4[increment][2], sumoSpawnsType4[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType4[increment][3]);
	LinkVehicleToInterior(Event_PlayerVeh[playerid], 15);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public sumo_PlayerLeftEvent(playerid)
{
  	SetPVarInt(playerid, "LeftEventJust", 1);
	RemovePlayerFromVehicle(playerid);
	event_SpawnPlayer(playerid);

	if(EventPlayersCount() == 1)
	{
		new msg[128];
		foreach(Player, i)
	  	{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				winner = i;
				break;
			}
		}
		format(msg, sizeof(msg), "				%s has won the Sumo event!", PlayerName(winner));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		GiveAchievement(winner, 81);
		SendClientMessage(winner, COLOR_NOTICE, "You have won Sumo event! You have earnt 10 score!");
		FoCo_Player[winner][score] += 10;
		lastEventWon = winner;
		Event_Bet_End(winner);
		EndEvent();
		return 1;
	}
	
	return 1;
}



public sumo_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Sumo is now in progress and can not be joined.");
	SumoFallCheckTimer = repeat SumoFallCheck();
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			SetVehicleParamsEx(Event_PlayerVeh[i], true, false, false, true, false, false, false);
			TogglePlayerControllable(i, 1);
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			increment = 0;
		}
	}
	return 1;
}
	

/* Commands */
/*
CMD:event_kills(playerid, params[])
{
	new string[128];
	foreach(Player, i)
	{
		if(i != INVALID_PLAYER_ID)
		{
		    format(string, sizeof(string), "[DEBUG]: %s(%d) has %d kills in the event!", PlayerName(i), i, Event_Kills[i]);
		    SendClientMessage(playerid, COLOR_SYNTAX, string);
		}
	}
	return 1;
}

CMD:event_position(playerid, params[])
{
	new string[128];
	if(Position[0] != -1)
	{
	    format(string, sizeof(string), "1st: %s(%d) with %d kills.", PlayerName(Position[0]), Position[0], Event_Kills[Position[0]]);
		SendClientMessage(playerid, COLOR_SYNTAX, string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "1st: NOONE HAS THIS YET!");
	}
	if(Position[1] != -1)
	{
	    format(string, sizeof(string), "2nd: %s(%d) with %d kills.", PlayerName(Position[1]), Position[1], Event_Kills[Position[1]]);
		SendClientMessage(playerid, COLOR_SYNTAX, string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "2nd: NOONE HAS THIS YET!");
	}
	if(Position[2] != -1)
	{
	    format(string, sizeof(string), "3rd: %s(%d) with %d kills.", PlayerName(Position[2]), Position[2], Event_Kills[Position[2]]);
		SendClientMessage(playerid, COLOR_SYNTAX, string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "3rd: NOONE HAS THIS YET!");
	}
	return 1;
}
*/

CMD:event(playerid, params[])
{
	if(IsAdmin(playerid, 1))
	{
		new
			result[50],
			string[128],
			targetid = -1;

		if(sscanf(params, "s[50]R(-1)", result, targetid))
		{
		    format(string, sizeof(string), "[USAGE]: {%06x}/event {%06x}[Start/End/Setbrawlpoint/Add/Forcecriminal]", COLOR_WHITE >>> 8, COLOR_SYNTAX >>> 8);
		    return SendClientMessage(playerid, COLOR_SYNTAX, string);
		}

		if(strcmp(result, "start", true) == 0)
		{
		    if(Event_InProgress == -1)
		    {
				ShowPlayerDialog(playerid, DIALOG_EVENTS, DIALOG_STYLE_LIST, "Events:", EVENTLIST, "Start", "Cancel");
			}

			else
			{
			    SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already another event in progress.");
			}
		}

		else if(strcmp(result, "end", true) == 0)
		{
		    if(Event_InProgress != -1)
		    {
				if(FoCo_Criminal != -1) stop PursuitTimer;		

				if(Event_Currently_On() == 26)
				{
                	foreach(Player, i)
					{
						AutoJoin[i] = 0;
					}
					CallRemoteFunction("CEM_MEndEvent", "i", playerid);
				}
				else
				{
					EndEvent();
				}	
				
		    	
		    	format(string, sizeof(string), "[EVENT]: %s %s has stopped the event!", GetPlayerStatus(playerid), PlayerName(playerid));
				IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
				SendClientMessageToAll(COLOR_NOTICE, string);
				Event_Bet_CancelEvent();    // Refunds event bets.
		    }

		    else
		    {
		        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is no event to end.");
		    }
		}

		else if(strcmp(result, "Setbrawlpoint", true) == 0)
		{
			GetPlayerPos(playerid, BrawlX, BrawlY, BrawlZ);
			GetPlayerFacingAngle(playerid, BrawlA);
			BrawlInt = GetPlayerInterior(playerid);
			BrawlVW = GetPlayerVirtualWorld(playerid);

			SendClientMessage(playerid, COLOR_ADMIN, "[SUCCESS]: Brawlpoint set to your position.");
		}
		
		else if(strcmp(result, "add", true) == 0)
		{		
			if(targetid == INVALID_PLAYER_ID)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Player is not connected");
			}
			
			if(targetid == cellmin)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Multiple matches found. Be more specific.");
			}
			
			if(targetid == -1)
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "[USAGE]: /event add [ID/Name]");				
			}
			
			if(Event_InProgress != -1)
			{
				if(GetPVarInt(targetid, "InEvent") == 1) return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The player is already in the event.");				 
				if(IsPlayerInAnyVehicle(targetid))
				{
					RemovePlayerFromVehicle(targetid);
				}
				
				SetPVarInt(targetid, "MotelSkin", GetPlayerSkin(targetid));
				SetPVarInt(targetid, "MotelColor", GetPlayerColor(targetid));
				PlayerJoinEvent(targetid);
				format(string, sizeof(string), "AdmCmd(%d): %s %s has added %s to the event.", ACMD_EVENT, GetPlayerStatus(playerid), PlayerName(playerid),PlayerName(targetid));
				SendAdminMessage(ACMD_EVENT, string);
				format(string, sizeof(string), "[INFO]: %s %s has added you to the event.", GetPlayerStatus(playerid), PlayerName(playerid));
				SendClientMessage(targetid, COLOR_NOTICE, string);
			}
			
			else
			{
				SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: No event has been started yet.");
			}
		}
		else if (strcmp(result, "forcecriminal", true) == 0)
		{
			if(targetid == cellmin)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Multiple matches found. Be more specific.");
			}

			if(targetid == -1)
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "[USAGE]: /event forcecriminal [ID/Name]");
			}
			if(targetid == INVALID_PLAYER_ID)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Player is not connected");
			}
			else
			{
                ForcedCriminal = targetid;
                format(string, sizeof(string), "[Guardian]: %s(%d) has been forced to be the criminal for next event by %s", PlayerName(targetid),targetid,PlayerName(playerid));
				SendAdminMessage(1, string);
				AdminLog(string);
			}
		}
	}

	return 1;
}


CMD:autojoin(playerid, params[])    // Made by pEar
{
	new dstring[128];
	if(AutoJoin[playerid] == 0 || AutoJoin[playerid] == -1)
	{
		if(GetPVarInt(playerid, "PlayerStatus") == 2)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are in a duel, leave it first.");
		}
		if(FoCo_Player[playerid][jailed] != 0)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Please wait until your admin jail is over.");
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Can't do this now..");
		}
		if(Event_InProgress == -1)
		{
		    return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: No event has been started yet.");
		}
		if(GetPVarInt(playerid, "PlayerStatus") == 1)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are already at the event, please wait until you die before using the command again.");
	 	}
  		if(Event_InProgress == 0)
		{
			if(eventSlots[Event_ID] == -1 || eventSlots[Event_ID] > EventPlayersCount())
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					RemovePlayerFromVehicle(playerid);
				}
				new ID = Event_Currently_On();
				if(ID == 0 || ID == 1 || ID == 3 || (ID = EVENT_CEM && CEM_RUNNING == FFA_DM)) // If event ID is maddogs, bigsmoke or brawl.
				{
				    if(FoCo_Event_Rejoin == 1)
				    {
						format(dstring, sizeof(dstring), "Enabling AutoJoin for PID: %d, EventID: %d, EventSlots: %d, AutoJoin[%d]: %d", playerid, Event_ID, eventSlots[Event_ID], playerid, AutoJoin[playerid]);
						DebugMsg(dstring);
				        if(Event_Currently_On() != EVENT_CEM)
				        {
							format(dstring, sizeof(dstring), "Enabling AutoJoin for PID: %d, EventID: %d, EventSlots: %d, AutoJoin[%d]: %d", playerid, Event_ID, eventSlots[Event_ID], playerid, AutoJoin[playerid]);
							SendDevMessage(dstring);
					        SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
							SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
			    			AutoJoin[playerid] = 1;
							SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been enabled!");
							PlayerJoinEvent(playerid);
						}
						else
						{
					        SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
							SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
			    			AutoJoin[playerid] = 1;
							SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been enabled!");
							PlayerJoinEvent(playerid);
							CEM_MAutoJoin(playerid);
						}
					}
				    else
				    {
				        return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is not rejoinable, please use /join!");
				    }
                    
				    
				}
				else
				{
					return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: This may only be enabled with maddogs or bigsmoke!");
				}
			}
		}
	}
	else
	{
		format(dstring, sizeof(dstring), "Disabling AutoJoin for PID: %d, EventID: %d, EventSlots: %d, AutoJoin[%d]: %d", playerid, Event_ID, eventSlots[Event_ID], playerid, AutoJoin[playerid]);
		SendDevMessage(dstring);
	    AutoJoin[playerid] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been disabled!");
	}
	return 1;
}

CMD:join(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerStatus") == 2)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are in a duel, leave it first.");
	}

	if(FoCo_Player[playerid][jailed] != 0)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Please wait until your admin jail is over.");
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		return 1;
	}

	if(GetPVarInt(playerid, "PlayerStatus") == 1)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are already at the event!");
 	}

	if(Event_InProgress == -1)
	{
	    return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: No event has been started yet.");
	}

	if(Event_InProgress == 1)
	{
        return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is already in progress");
	}
	if(FoCo_Event_Rejoin == 0)
	{
	    if(Event_Currently_On() == 0 || Event_Currently_On() == 1)
	    {
	        if(Event_Died[playerid] > 0)
	        {
	        	return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is not rejoinable!");
	        }
	    }
	}
    if(Event_InProgress == 0)
	{
		new string[56];
		format(string, sizeof(string), "Event ID: %d", Event_ID);
		DebugMsg(string);
		if(eventSlots[Event_ID] == -1 || eventSlots[Event_ID] > EventPlayersCount())
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
			}
			
			SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
			SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
			format(string, sizeof(string), "Event In Progress: %d", Event_InProgress);
			DebugMsg(string);
			if(Event_Currently_On() == 26)
			{
				CallRemoteFunction("CEM_MJoin", "i", playerid);
			}
			else
			{
				PlayerJoinEvent(playerid);
			}
			GiveAchievement(playerid, 77);
		}
		
		else
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is full.");
		}
	
	}
	return 1;
}


stock GetVehicleDriver(vid)
{
     foreach(new i : Player)
     {
          if(!IsPlayerConnected(i)) continue;
          if(GetPlayerVehicleID(i) == vid && GetPlayerVehicleSeat(i) == 0) return 1;
          break;
     }
     return 0;
}


CMD:leaveevent(playerid, params[])
{
	if(GetPVarInt(playerid, "InEvent") == 1)
	{
	    new Float:health;
	    GetPlayerHealth(playerid, health);
	   		
		if(Event_InProgress == 0 && Event_FFA == 0)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "You cannot leave the event before it starts.");
		}
		
		if(EventPlayersCount() <= 2 && Event_ID != MADDOGG && Event_ID != BIGSMOKE && Event_ID != BRAWL)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "You cannot leave the event with less than 2 players in the event.");
		}
	    
	    if(health < 75)
	    {
			return SendClientMessage(playerid, COLOR_WARNING, "You cannot leave the event with less than 75HP, use /kill (it will add a death)");
	    }

		else
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
			}
			
			if(GetPVarInt(playerid, "MotelTeamIssued") == 1)
			{
				SetPVarInt(playerid, "MotelTeamIssued", 0);
			}
			if(Event_Currently_On() == GUNGAME)
			{
			    GG_LeaveEvent(playerid);
			}
			if(Event_Currently_On() == 26)
			{
				CallRemoteFunction("CEM_MLeave", "i", playerid);
			}
			else
			{
				PlayerLeftEvent(playerid);
			}

			
			event_SpawnPlayer(playerid);
			if(AutoJoin[playerid] == 1)
			{
			    AutoJoin[playerid] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been disabled.");
			}
		}
	}
	
	else
	{
		SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are not at an event, therefore cannot leave.");
	}
	return 1;
}


public Event_EntranceFee(playerid, cost)
{
	new string[10];
	if(FoCo_Player[playerid][level] >= MIN_LVL)
	{
	    if(GetPlayerMoney(playerid) > MIN_CASH)
	    {
	    	new money = GetPlayerMoney(playerid) - cost;
	        SetPlayerMoney(playerid, money);
	        format(string, sizeof(string), "~r~-%d",cost);
			TextDrawSetString(MoneyDeathTD[playerid], string);
			TextDrawShowForPlayer(playerid, MoneyDeathTD[playerid]);
			defer cashTimer(playerid);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "[INFO]: No entrance fee paid due to low amount of money.");
		}
	}
	else
 	{
 		SendClientMessage(playerid, COLOR_GREEN, "[INFO]: No entrance fee paid due to low level.");
	}
	return 1;
}

stock SendEventPlayersMessage(str[], color)
{
	foreach(Player, i)
	{	
		if(GetPVarInt(i, "InEvent") == 1)
		{
			SendClientMessage(i, color, str);
		}
	}

	return 1;
}

stock EventPlayersCount()
{
	new cnt = 0;
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{	
			cnt++;
		}
	}

	return cnt;
}

stock SendEventMessage(str[], color)
{
	new i;
	for(i = 0; i < EventCount; i++)
	{
		if(color == -1)
		{
			SendClientMessage(i, COLOR_CMDNOTICE, str);
		}
		else
		{
			SendClientMessage(i, color, str);	
		}
	}
	return 1;
}

/* Spawn Player Fix by Y_Less */

stock event_SpawnPlayer(playerid)
{
	new
		vid = GetPlayerVehicleID(playerid);
		
	if (vid)
	{
		new
			Float:x,
			Float:y,
			Float:z;
		// Remove them without the animation.
		GetVehiclePos(vid, x, y, z),
		SetPlayerPos(playerid, x, y, z);
	}
	new Float:HP;
	GetPlayerHealth(playerid, HP);
	if(HP == 0.0)
	{
		return 1;
	}
	else
	{
		return SpawnPlayer(playerid);
	}
}

forward RespawnPlayer(playerid);
public RespawnPlayer(playerid)
{
	return event_SpawnPlayer(playerid);
}

forward SetEventTeamNames(type);
public SetEventTeamNames(type)
{
	switch(type)
	{
		case MADDOGG, BIGSMOKE, MINIGUN, BRAWL, HYDRA, GUNGAME, MONSTERSUMO, BANGERSUMO, SANDKSUMO, SANDKSUMORELOADED, DESTRUCTIONDERBY, PLANE, PURSUIT:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "DM");
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "DM");
		}
		
		case JEFFTDM:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT");
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Criminals");
		}
		
		case CONSTRUCTION:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "Workers");
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Engineers");
		}
		
		case AREA51:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "US Special Forces" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Nuclear Scientists" );
		}
		
		case ARMYVSTERRORISTS:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "Army" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
		
		case NAVYVSTERRORISTS:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "Navy Seals" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
		
		case COMPOUND:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
		
		case OILRIG:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}	
		
		case DRUGRUN:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
	}
}
forward event_start_message(event[], playerid, cost);
public event_start_message(event[], playerid, cost)
{
	new string[256];
	format(string, sizeof(string), "[EVENT]: %s %s has started the {%06x}%s {%06x}event. Type /join! Price: %d", GetPlayerStatus(playerid), PlayerName(playerid), COLOR_WARNING >>> 8, event,  COLOR_CMDNOTICE >>> 8, cost);
	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
	IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
	return 1;
}

public FoCo_Event_Rejoin_Func(Rejoin)
{
    FoCo_Event_Rejoin = Rejoin;
}


/*Gun Game Fucking Event*/
public GG_PlayerDeath(playerid, killerid, reason)
{
	DebugMsg("Death_Called");
	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(killerid, "PlayerStatus") == 1 && lastGunGameWeapon[killerid] != reason)
		{
			SetPVarInt(playerid, "InEvent", 0);
			SetPVarInt(playerid, "JustDied", 1);
			GunGameKills[killerid]++;
			ResetPlayerWeapons(killerid);
			GivePlayerWeapon(killerid, GunGameWeapons[GunGameKills[killerid]], 500);
			lastGunGameWeapon[killerid] = GunGameWeapons[GunGameKills[killerid]-1];
			new tmpString[128];
			format(tmpString, sizeof(tmpString), "(%d / 16)", GunGameKills[killerid]);
			TextDrawSetString(GunGame_MyKills[killerid], tmpString);
			new varHigh = 0;
			foreach(new i : Player)
			{
				if(GetPVarInt(playerid, "PlayerStatus") == 1)
				{
					if(GunGameKills[killerid] < GunGameKills[i])
					{
						varHigh = 1;
					}
				}
			}
			if(varHigh == 0)
			{
				format(tmpString, sizeof(tmpString), "%s (%d / 16)", PlayerName(killerid), GunGameKills[killerid]);
				foreach(Player, i)
				{
					if(GetPVarInt(playerid, "PlayerStatus") == 1)
					{
						TextDrawSetString(CurrLeaderName[i], tmpString);
					}
				}
			}
			if(GunGameKills[killerid] >= 17)
			{
				format(tmpString, sizeof(tmpString), "[Event Notice]: %s has won the Gun Game.", PlayerName(killerid));
				SendClientMessageToAll(COLOR_NOTICE, tmpString);
				lastEventWon = killerid;
				EndEvent();
			}
		}
	}
	DebugMsg("Death_Ended");
	return 1;
}

public GG_RejoinPlayer(playerid)
{
    DebugMsg("Rejoin_CAlled");
	if(AutoJoin[playerid] == 1 && Event_ID == GUNGAME)
	{
		SetPlayerArmour(playerid, 0);
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);
		new randomnum = random(250);
		SetPlayerPos(playerid, GunGameSpawns[randomnum][0], GunGameSpawns[randomnum][1], GunGameSpawns[randomnum][2]);
		SetPlayerFacingAngle(playerid, GunGameSpawns[randomnum][3]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, GunGameWeapons[GunGameKills[playerid]], 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Gun ~h~ Game!", 800, 3);
	}
	DebugMsg("Rejoin_Ended");
	return 1;
}

public GG_OnPlayerUpdate(playerid)
{
	if(Event_ID == GUNGAME)
	{
		if(GetPVarInt(playerid, "PlayerStatus") == 1)
		{
			new tmpStr[30];
			format(tmpStr, sizeof(tmpStr), "%s", WeapNames[GetPlayerWeapon(playerid)]);
			TextDrawSetString(GunGame_Weapon[playerid], tmpStr);
		}
	}
	return 1;
}

public GG_EventJoin(playerid)
{
	if(increment < GUNGAME_EVENTSLOT)
	{
		DebugMsg("Join_Called");
		SetPVarInt(playerid,"PlayerStatus",1);
		SetPlayerArmour(playerid, 0);
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, GunGameSpawns[increment+5][0], GunGameSpawns[increment+5][1], GunGameSpawns[increment+5][2]);
		SetPlayerFacingAngle(playerid, GunGameSpawns[increment][3]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, GunGameWeapons[0], 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Gun ~h~ Game!", 800, 3);
		GunGameKills[playerid] = 0;
		lastGunGameWeapon[playerid] = 38;
		AutoJoin[playerid] = 1;
		TextDrawShowForPlayer(playerid, CurrLeader[playerid]);
		TextDrawShowForPlayer(playerid, CurrLeaderName[playerid]);
		TextDrawShowForPlayer(playerid, GunGame_MyKills[playerid]);
		TextDrawShowForPlayer(playerid, GunGame_Weapon[playerid]);
		new tmpStr[30];
		format(tmpStr, sizeof(tmpStr), "%s", WeapNames[0]);
		TextDrawSetString(GunGame_Weapon[playerid], tmpStr);
		format(tmpStr, sizeof(tmpStr), "(%d / 16)", GunGameKills[playerid]);
		TextDrawSetString(GunGame_MyKills[playerid], tmpStr);
		TextDrawSetString(CurrLeaderName[playerid], "No Kills");
		increment++;
		DebugMsg("Join_Ended");
	}
	else	
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR] Event is full.");
	return 1;
}
	
	
public GG_LeaveEvent(playerid)
{
	if(GetPVarInt(playerid, "PlayerStatus") == 0)
	{
		return 1;
	}

	SetPlayerArmour(playerid, 0);
	SetPVarInt(playerid, "InEvent", 0);
	SetPVarInt(playerid, "PlayerStatus", 0);
	death[playerid] = 1;

	foreach(Player, i)
	{
		if(Event_Players[i] == playerid)
		{
			Event_Players[i] = -1;
			break;
		}
	}
	TextDrawHideForPlayer(playerid, CurrLeader[playerid]);
	TextDrawHideForPlayer(playerid, CurrLeaderName[playerid]);
	TextDrawHideForPlayer(playerid, GunGame_MyKills[playerid]);
	TextDrawHideForPlayer(playerid, GunGame_Weapon[playerid]);
	GunGameKills[playerid] = 0;
	event_SpawnPlayer(playerid);
	//SetEventDeath
	return 1;
}

public GG_EventStart(playerid)
{
	FoCo_Event_Rejoin = 1;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		AutoJoin[i] = 0;
		SetPVarInt(i, "InEvent", 0);
	}
    increment = 0;
	event_start_message("GunGame Event", playerid, 50);
	Event_InProgress = 0;
	Event_FFA = 1;
	Event_ID = GUNGAME;
	return 1;
}
