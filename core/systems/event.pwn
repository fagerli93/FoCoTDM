/*********************************************************************************
*                                                                                *
*             ______     _____        _______ _____  __  __                      *
*            |  ____|   / ____|      |__   __|  __ \|  \/  |                     *
*            | |__ ___ | |     ___      | |  | |  | | \  / |                     *
*            |  __/ _ \| |    / _ \     | |  | |  | | |\/| |                     *
*            | | | (_) | |___| (_) |    | |  | |__| | |  | |                     *
*            |_|  \___/ \_____\___/     |_|  |_____/|_|  |_|                     *
*                                                                                *
*                                                                                *
*                                                                                *
*			######## ##     ## ######## ##    ## ########  ######                *
*			##       ##     ## ##       ###   ##    ##    ##    ##               *
*			##       ##     ## ##       ####  ##    ##    ##                     *
*			######   ##     ## ######   ## ## ##    ##     ######                *
*			##        ##   ##  ##       ##  ####    ##          ##               *
*			##         ## ##   ##       ##   ###    ##    ##    ##               *
*			########    ###    ######## ##    ##    ##     ######                *
*                                                                                *
*                                                                                *
*                        (c) Copyright                                           *
*  Owners: Simon Fagerli (pEar) - Lee Percox (Shaney) - Warren Bickley (WazzaJB) *
*         Developers: Marcel, RakGuy, FKu, Chilco, dr_vista, Fletcher            *
*                                                                                *
* Filename: events.pwn                                                           *
* Author: Marcel, dr_vista & pEar                                                *
*********************************************************************************/
#include <YSI\y_hooks>
#include <YSI\y_timers>

/* TO DO:

	- Add Gun Game
	
	- Put a different V-World for army vs terrorists
	-Navy seals event doesnt end when the last (second last player) suicided
	- you are already at the event during a rejoinable event when a player died and tried to rejoin
*/

/* Event types:

	- FFA
	- TDM
	- Sumo
	- Pursuit
	- Races
*/

/* Events list:

	- FFA:

		- Mad Dogg's Mansion
		- Big Smoke
		- Minigun Wars
		- Brawl
		- Hydra Wars
		- Gun Game

	- TDM:

		- Jefferson Motel
		- Area 51
		- Army vs. Terrorists
		- Navy Seals vs. Terrorists (Ship)
		- Compound Attack
		- Oil Rig Terrorists
		- Team Drug Run
		- Construction

	- Sumo:

	    - Monster Sumo
	    - Banger Sumo
	    - SandKing Sumo
	    - SandKing Sumo (Reloaded)
	    - Destruction Derby

	- Pursuit:

		- Pursuit

	- Races:

		- TBA



*/
forward Edit_Event_InProgress(value);
/* File Structure

	\events
	|
	|	events.pwn
	|
 	|	\subfiles
 	|   |
	|	|    area51.pwn
	|	|    armyvsterrorists.pwn
	|	|    bigsmoke.pwn
	|	|    brawl.pwn
	|   |    compound.pwn
	|   |    drugrun.pwn
	|   |    hydra.pwn
	|   |    jefftdm.pwn
	|   |    md.pwn
    |   |    minigun.pwn
    |   |    navyvsterrorists.pwn
    |   |    oilrig.pwn
    |   |    pursuit.pwn
    |   |    SUMO.pwn
	|	|	 plane.pwn
	| 	|	 construction.pwn
    |


*/

/* Structure:

	- Includes
	- Defines
	- Forwards
	- Enumerations
	- Variables
	- Callbacks
	- Functions
	- Commands
*/
#define MAX_EVENT_PLAYERS 200

new EVENTLIST[500];

hook OnGameModeInit()
{
    strins(EVENTLIST, "Mad Dogg's Mansion\nBig Smoke\nMinigun Wars\nBrawl\nHydra Wars\nGun Game\nJefferson Motel TDM", strlen(EVENTLIST));
    strins(EVENTLIST, "\nArea 51 TDM\nArmy vs. Terrorists\nNavy Seals vs. Terrorists\nCompound Attack\nOil Rig Terrorists", strlen(EVENTLIST));
    strins(EVENTLIST, "\nTeam Drug Run\nMonster Sumo\nBanger Sumo\nSandKing Sumo\nSandKing Sumo-2\nDestruction Derby", strlen(EVENTLIST));
    strins(EVENTLIST, "\nPursuit\nPlane-Survival\nConstruction-TDM\nHighSpeed Pursuit\nLabyrinth of Doom\nHotLava\nDeathRace", strlen(EVENTLIST));
    strins(EVENTLIST, "\nDomination\nCustom Event Maker\nZombie vs Criminals\nJetPack TDM\nOne Shot Kill\nGunGame TDM", strlen(EVENTLIST));
}

#define MAX_EVENTS 31
#define MAX_EVENT_VEHICLES 50

#define SUMO_EVENT_SLOTS 15
#define AREA51_EVENT_SLOTS 42
#define ARMY_EVENT_SLOTS 18
#define COMPOUND_EVENT_SLOTS 32
#define DRUGRUN_EVENT_SLOTS 58
#define HYDRA_EVENT_SLOTS 11
#define JEFFTDM_EVENT_SLOTS 28
#define MINIGUN_EVENT_SLOTS 16
#define SEALS_EVENT_SLOTS 31
#define OILRIG_EVENT_SLOTS 32
#define PURSUIT_EVENT_SLOTS 26
#define PLANE_EVENT_SLOTS 30
#define CONSTRUCTION_SLOTS 30
#define HIGHSPEED_PURSUIT_EVENT_SLOTS 26
#define LOD_EVENT_SLOTS 50
#define MAX_LOD_PICKUPS 24
#define DEATHRACE_EVENT_SLOTS 50
#define DOMINATION_EVENT_SLOTS 80
#define GUNGAME_EVENTSLOT 200
#define ZOMBIE_EVENT_SLOTS 100
#define JPTDM_EVENT_SLOTS 100
#define OSKill_EVENT_SLOTS 82


#define VIP_EVENT_SLOTS 2

#define HOTLAVA_OBJECTS_AMT 100			// Amount of objects	
#define HOTLAVA_INT 0					// Interior
#define HOTLAVA_WORLD 1300				// World
#define HOTLAVA_PICKUPS 5				// Amount of pickups
#define HOTLAVA_PICKUPS_ROTATE 8		// Time interval for when to rotate pickups
#define HOTLAVA_MAXDISCO 10 			// Amount of floors that are "disco" at the same time, aka can be removed.


#define DOMINATION_PLANE_SPAWNS 40
#define DOMINATION_AIR_SPAWNS 47
#define DOMINATION_ZONES 3

#define ZOM_INV_COL 0xFF634700
#define CIV_INV_COL 0x008CF500
#define ZOM_VIS_COL 0xFF6347FF
#define CIV_VIS_COL 0x008CF5FF

enum events
{
	eventID,
	eventName[30]
};

new const event_IRC_Array[MAX_EVENTS][ events ] = {
 {0, "Mad Doggs Mansion"},
 {1, "Bigsmoke"},
 {2, "Minigun Wars"},
 {3, "Brawl"},
 {4, "Hydra Wars"},
 {5, "Gun Game"},
 {6, "Jefferson TDM"},
 {7, "Area 51 TDM"},
 {8, "Army vs. Terrorists"},
 {9, "Navy Seals Vs. Terrorists"},
 {10, "Compound Attack"},
 {11, "Oil Rig Terrorists"},
 {12, "Team Drug Run"},
 {13, "Monster Sumo"},
 {14, "Banger Sumo"},
 {15, "SandKing Sumo"},
 {16, "SandKing Sumo Reloaded"},
 {17, "Destruction Derby"},
 {18, "Pursuit"},
 {19, "Plane-ram"},
 {20, "Construction-TDM"},
 {21, "High-speed pursuit"},
 {22, "Labyrinth of Doom"},
 {23, "HotLava"},
 {24, "DeathRace"},
 {25, "Domination"},
 {26, "CEM"},
 {27, "Zombie v Civilian"},
 {28, "JetPack TDM"},
 {29, "One Shot Kill"},
 {30, "GunGame TDM"}
};
/* Enumerations */

	/* Master event enum */

enum
{
	MADDOGG,            // 0
	BIGSMOKE,           // 1
	MINIGUN,            // 2
	BRAWL,              // 3
	HYDRA,              // 4
	GUNGAME,            // 5
	JEFFTDM,            // 6
	AREA51,             // 7
	ARMYVSTERRORISTS,   // 8
	NAVYVSTERRORISTS,   // 9
	COMPOUND,           // 10
	OILRIG,             // 11
	DRUGRUN,            // 12
	MONSTERSUMO,        // 13
	BANGERSUMO,         // 14
	SANDKSUMO,          // 15
	SANDKSUMORELOADED,  // 16
	DESTRUCTIONDERBY,   // 17
	PURSUIT,            // 18
	PLANE,              // 19
	CONSTRUCTION,       // 20
	HIGHSPEEDPURSUIT,   // 21
	LOD,				// 22
	HOTLAVA,			// 23
	EVENT_DRACE,		// 24
	DOMINATION,			// 25
	CEM,				// 26
	ZOMVCIV,            // 27
	JETPACKTDM,         // 28
	ONESHOTKILL,        // 29
	GUNGAMETDM          // 30
};

new const eventSlots[MAX_EVENTS] = {-1,     //0
									-1,     //1
									16,     //2
									-1,     //3
									11,     //4
									-1,     //5
									28,     //6
									42,     //7
									18,     //8
									31,     //9
									32,     //10
									32,     //11
									58,     //12
									15,     //13
									15,     //14
									15,     //15
									15,     //16
									15,     //17
									26,     //18
									33,     //19
									30,     //20
									26,     //21
									50,     //22
									100,    //23
									50,     //24
									80,     //25
									-1,     //26
									100,    //27
									100,    //28
									200,    //29
									100,    //30
									}; /* -1 = unlimited slots */



	/* Drug Run */

enum e_DrugRunVehicles
{
	modelID,
	Float:dX,
	Float:dY,
	Float:dZ,
	Float:Rotation
};

/* Variables */

	/* Master event variables */

new
	Event_Players[MAX_PLAYERS],
	Iterator:Event_Vehicles<50>;
	
new
	Position[3];
	
new
	Event_FFA = 0,
	Maze_Killer = -1,
	rotate_pickups_lod = 0,
	event_count = 0,
	Event_Kills[MAX_PLAYERS],
	Event_Died[MAX_PLAYERS],
	AutoJoin[MAX_PLAYERS],
	LOD_Pickups[MAX_LOD_PICKUPS];
	
	
 /* Event_InProgress values:

	- 0 : Event has been started and can be joined
	- 1 : Event has been started but cannot be joined (30 secs after event start)
	- (-1) : No event is running
*/

new EventPlayers[MAX_EVENT_PLAYERS];
new EventCount;

new
	Event_ID,
	DialogIDOption[MAX_PLAYERS];

new
	Float:BrawlX,
	Float:BrawlY,
	Float:BrawlZ,
	Float:BrawlA,
	BrawlInt,
	BrawlVW;

new
	team_issue;

new
    Event_Delay,
    E_Pursuit_Criminal,
    E_HSPursuit_Criminal;

new
    FoCo_Event_Died[MAX_PLAYERS];
new
    ZomEvent_Deaths[2];
new 
	Float:Maze_X,
	Float:Maze_Y,
	Float:Maze_Z,
	Timer_MazeKiller;

new
	FFAArmour,
	FFAWeapons;

//new DrugEventVehicles[128], /unused
new	Event_PlayerVeh[MAX_PLAYERS] = -1;

new
	 Motel_Team = 0,
	 Team1_Motel = 0,
	 Team2_Motel = 0;
	 
// Domination
new 
	Team,
	inc_t1,
	inc_t2,
	Ticks,
	Ticks_t1,
	Ticks_t2;

new dom_gangzones[DOMINATION_ZONES];
new dom_zonestatus[DOMINATION_ZONES][3];
new dom_playercapture[DOMINATION_EVENT_SLOTS];


new
    EventDrugDelay[MAX_PLAYERS];

/*new
	//lastGunGameWeapon[MAX_PLAYERS] = 38,
	GunGameKills[MAX_PLAYERS];
*/
new
    spawnSeconds[MAX_PLAYERS];

new
	lastKillReason[MAX_PLAYERS];


new	winner,
	FoCo_Criminal = -1,
	FoCo_Event_Rejoin;
//new Pursuit_Car;
	
new
	eventVehicles[MAX_EVENT_VEHICLES] = {0},
	caridx;
	
//new reservedSlotsQueue[VIP_EVENT_SLOTS];

	/* Timer Definitions */
	
new
		Timer:DelayTimer,
		Timer:DrugDelayTimer,
		Timer:SumoFallCheckTimer,
		Timer:HydraFallCheckTimer,
		Timer:OilrigFallCheckTimer,
		Timer:HotLavaFallCheckTimer,
		Timer:HotLavaDiscoTimer,
		Timer:HotLavaDiscoRepeatTimer,
		Timer:hydraTime,
		Timer:PursuitTimer,
		Timer:HSPursuitTimer,
		Timer:PlaneFallCheckTimer,
		Timer:ZoneCaptureDomination,
		Timer:domination_TickDecreaserTimer,
		Timer:dom_AutoZoneDecreaserTimer;

/* Event stats */

enum e_PlayerEventStats
{
	joinedevent,
	pteam,
	kills,
	damage
};		

static
		PlayerEventStats[MAX_PLAYERS][e_PlayerEventStats];

enum e_TeamName
{
	team_a[30],
	team_b[30]
};
new HotLava_Objects[HOTLAVA_OBJECTS_AMT];		// To save the ObjectID	
new HotLava_Pickups[HOTLAVA_PICKUPS][3];		// To save the pickupid, what floor its on + weapontype
new HotLava_Disco[HOTLAVA_MAXDISCO];			// For the floors that is about to disappear
new eCounter;
new Timer_RotateHLPickups, Timer_Disco1D;

static
		TeamNames[e_TeamName];

	/* Event spawns */
new Float:domination_plane_spawns[DOMINATION_PLANE_SPAWNS][4] = {
	{315.4087,974.6028,1961.3041,0.7736},
	{316.4497,974.7056,1961.2815,358.1937},
	{317.7576,976.3836,1960.9003,358.1104},
	{314.0477,976.3767,1960.9019,359.5706},
	{311.9565,976.2875,1960.9225,336.7902},
	{319.5702,976.1236,1960.9603,28.9935},
	{319.4602,983.3795,1959.2859,88.1334},
	{312.0700,983.4366,1959.2727,271.1944},
	{314.7975,986.2848,1958.6155,358.7163},
	{316.8375,986.3325,1958.6044,357.6391},
	{318.0925,988.2977,1958.1509,90.9955},
	{314.8445,989.8060,1957.8029,359.1227},
	{316.6807,989.9067,1957.7795,359.6155},
	{313.3102,991.4483,1957.4238,268.9242},
	{314.9509,993.8108,1956.8787,2.7917},
	{316.4761,993.8923,1956.8599,358.2433},
	{316.6108,997.4207,1956.0457,357.6767},
	{314.8005,997.5490,1956.0160,357.1144},
	{317.6604,999.0147,1955.6777,87.0003},
	{314.8354,1001.6468,1955.0703,358.6082},
	{316.8354,1001.6712,1955.0647,356.4835},
	{313.7228,1004.8372,1954.3341,272.7771},
	{314.9947,1007.4227,1953.7374,2.2215},
	{316.5298,1007.4923,1953.7214,357.6963},
	{315.0181,1011.1069,1952.8872,1.0151},
	{316.4738,1011.1596,1952.8751,357.7414},
	{319.2982,1021.3441,1950.5248,169.0123},
	{319.2184,1018.4615,1951.1901,180.2636},
	{319.2298,1015.7487,1951.8160,180.2636},
	{318.9427,1012.7178,1952.5155,91.2238},
	{312.2876,1020.7947,1950.6516,182.0810},
	{312.3728,1018.4623,1951.1898,182.0810},
	{312.4522,1016.3028,1951.6882,182.0810},
	{312.7545,1012.9118,1952.4707,264.8881},
	{314.5562,1015.9891,1951.7606,1.2939},
	{317.0087,1016.0710,1951.7417,356.8265},
	{317.1201,1018.9007,1951.0887,358.1216},
	{314.4798,1019.0489,1951.0544,357.5644},
	{314.4935,1022.7593,1950.1982,359.2642},
	{316.9847,1022.9308,1950.1587,358.0092}
};

new Float:domination_air_spawns[DOMINATION_AIR_SPAWNS][4] = {
	{-10.9854,9.0132,253.8257,150.1709}, 
	{-90.0191,-62.9310,252.6739,119.7648}, 
	{-71.2513,-177.7139,199.5119,245.1837},
	{31.8333,-220.2452,264.0313,278.1088},
	{105.2418,-168.1348,274.0311,326.2402},
	{141.7440,-267.7461,217.8861,123.1333},
	{34.5839,-30.4569,214.3688,10.6007}, 
	{61.7917,72.9043,217.2660,284.6537},
	{183.1703,80.8731,184.4436,253.9516},
	{270.4294,-6.2015,378.5861,210.0681},
	{246.2623,-97.5843,376.2831,132.1479},
	{150.9315,-167.1493,378.5729,129.6527},
	{-11.3628,-280.3474,363.0977,123.5733},
	{-116.4550,-268.6776,299.8438,78.5328},
	{-114.8175,-162.6472,244.8591,334.4229},
	{-78.7892,-95.5485,242.9933,337.6450},
	{-11.0907,31.9064,233.1460,312.9083},
	{101.5078,156.0317,220.5737,320.8105},
	{180.9295,35.8180,230.2159,194.9974},
	{211.7143,-23.4572,440.8362,224.3149},
	{278.5929,-91.5706,419.5550,215.4464},
	{273.0583,-186.4786,218.2666,103.5649},
	{155.2224,-164.9203,203.1214,52.0565},
	{18.5780,-41.9095,198.7331,47.0543},
	{-83.9629,15.7071,195.9364,82.4694},
	{-209.8860,15.5208,310.8411,193.0461},
	{-240.7832,-59.0859,300.3275,152.1249},
	{-166.5319,-209.5621,291.9350,251.8941},
	{-41.9729,-173.0344,341.9632,332.7654},
	{-7.7899,-77.7135,330.7826,337.9658},
	{9.1292,-27.9286,317.4919,338.1175},
	{232.9908,-159.0638,1.9994,145.7968},
	{-88.6547,-160.3669,369.6605,73.3910},
	{-92.6783,-91.8560,339.5888,333.9543},
	{-75.1994,-9.8799,317.9454,317.3775},
	{52.0821,31.2747,235.3102,272.5967},
	{285.0696,51.0406,149.9165,282.5727},
	{463.2846,5.3336,330.7197,186.8450},
	{526.6206,36.4430,295.6360,273.4907},
	{648.9200,73.1611,260.1120,277.4297},
	{300.7239,-124.2161,255.0341,96.5690},
	{199.4805,-140.0650,290.1134,104.5626},
	{118.0707,-167.8230,278.6439,121.2120},
	{69.4173,-193.5840,302.8743,106.3506},
	{-41.4779,-230.6063,298.0139,92.1233},
	{-128.1668,-227.4068,300.4341,357.0283},
	{-172.4844,-131.3030,287.1215,353.2486}
};

// WestX, SouthY, EastX, NorthY
new Float:domination_gangzones[3][5] = {
	{143.3613, -128.9776, 219.1944, -82.1687, 1.5781}, 	// Apartments
	{68.4201, -277.2408, 170.5893, -221.8798, 1.5781},	// Construction
	{-124.1657, -68.0437, -54.4423, 29.2063, 3.1172} 	// Farm 
};

new PlayerText:domination_textDraws[DOMINATION_EVENT_SLOTS][5];

	
new HotLava_Weapons[5][2] = {
	{16, 1},
	{39, 1},
	{42, 100},
	{41, 100},
	{5, 1}
};

new Float:HotLavaSpawns[100][3] = {
	{-1325.04236, -38.99037, 316.83129},
	{-1325.06238, -43.00336, 316.83129},
	{-1325.03809, -50.95611, 316.83129},
	{-1325.04590, -46.95227, 316.83129},
	{-1325.03052, -54.90028, 316.83129},
	{-1325.05591, -58.83403, 316.83129},
	{-1325.07178, -35.13192, 316.83129},
	{-1325.03296, -31.16065, 316.83129},
	{-1325.05676, -27.14945, 316.83129},
	{-1332.91614, -23.24766, 316.83129},
	{-1328.99780, -23.25156, 316.83129},
	{-1325.07678, -23.26660, 316.83129},
	{-1360.57532, -23.26512, 316.83129},
	{-1356.60547, -23.25020, 316.83129},
	{-1336.87549, -23.25648, 316.83129},
	{-1340.83655, -23.27451, 316.83129},
	{-1344.75415, -23.24675, 316.83129},
	{-1348.70227, -23.25860, 316.83129},
	{-1352.66785, -23.27390, 316.83129},
	{-1360.57263, -27.19129, 316.83129},
	{-1360.58142, -31.11603, 316.83129},
	{-1360.60205, -35.10261, 316.83129},
	{-1360.60657, -39.06613, 316.83129},
	{-1360.59290, -43.00441, 316.83129},
	{-1360.56750, -46.99152, 316.83129},
	{-1360.57483, -50.97253, 316.83129},
	{-1360.60913, -54.95314, 316.83129},
	{-1360.62622, -58.91488, 316.83129},
	{-1356.66577, -58.90964, 316.83129},
	{-1356.59583, -27.16965, 316.83129},
	{-1356.59863, -31.12849, 316.83129},
	{-1356.62146, -35.10458, 316.83129},
	{-1356.63574, -39.08411, 316.83129},
	{-1356.60486, -42.99942, 316.83129},
	{-1356.61926, -46.98406, 316.83129},
	{-1356.63391, -50.95860, 316.83129},
	{-1356.64868, -54.95394, 316.83129},
	{-1352.67297, -58.90933, 316.83129},
	{-1352.65759, -54.93424, 316.83129},
	{-1352.64905, -50.95204, 316.83129},
	{-1352.64941, -46.97109, 316.83129},
	{-1352.67664, -42.99039, 316.83129},
	{-1352.65308, -39.08185, 316.83129},
	{-1352.63306, -35.06963, 316.83129},
	{-1352.62805, -31.11941, 316.83129},
	{-1352.63843, -27.19353, 316.83129},
	{-1348.68518, -58.90380, 316.83129},
	{-1348.67834, -54.92022, 316.83129},
	{-1348.67139, -50.93648, 316.83129},
	{-1348.66736, -46.97561, 316.83129},
	{-1348.67566, -43.00715, 316.83129},
	{-1348.67041, -39.08803, 316.83129},
	{-1348.66541, -35.10290, 316.83129},
	{-1348.63843, -31.13586, 316.83129},
	{-1348.69275, -27.20925, 316.83129},
	{-1344.70605, -58.87401, 316.83129},
	{-1344.70361, -54.90023, 316.83129},
	{-1344.68091, -50.93701, 316.83129},
	{-1344.69983, -46.93708, 316.83129},
	{-1344.70959, -42.99032, 316.83129},
	{-1344.74475, -39.07287, 316.83129},
	{-1344.72156, -35.11003, 316.83129},
	{-1344.76147, -31.14415, 316.83129},
	{-1344.75623, -27.22277, 316.83129},
	{-1340.72791, -54.91198, 316.83129},
	{-1340.72949, -50.92691, 316.83129},
	{-1340.72437, -58.89553, 316.83129},
	{-1340.79260, -46.92686, 316.83129},
	{-1340.80676, -42.99842, 316.83129},
	{-1340.80688, -39.03880, 316.83129},
	{-1340.82788, -35.11507, 316.83129},
	{-1340.83276, -31.12970, 316.83129},
	{-1340.84412, -27.22088, 316.83129},
	{-1336.87573, -27.20867, 316.83129},
	{-1336.89172, -31.10860, 316.83129},
	{-1336.86145, -35.05815, 316.83129},
	{-1336.84412, -39.01952, 316.83129},
	{-1336.82239, -43.02003, 316.83129},
	{-1336.82703, -46.96984, 316.83129},
	{-1336.82239, -50.89503, 316.83129},
	{-1336.81750, -54.90057, 316.83129},
	{-1336.84839, -58.88559, 316.83129},
	{-1332.99707, -58.88642, 316.83129},
	{-1332.91614, -54.87609, 316.83129},
	{-1332.92065, -50.94764, 316.83129},
	{-1332.94360, -46.99157, 316.83129},
	{-1332.93738, -43.02204, 316.83129},
	{-1332.93823, -39.02057, 316.83129},
	{-1332.95605, -35.09764, 316.83129},
	{-1332.95435, -31.13017, 316.83129},
	{-1332.91235, -27.20729, 316.83129},
	{-1329.00403, -58.87101, 316.83129},
	{-1328.97424, -54.88081, 316.83129},
	{-1328.94080, -50.97627, 316.83129},
	{-1328.98938, -46.95166, 316.83129},
	{-1329.00708, -42.98401, 316.83129},
	{-1329.02161, -38.99137, 316.83129},
	{-1328.97424, -35.12236, 316.83129},
	{-1328.97266, -31.15610, 316.83129},
	{-1328.98511, -27.15332, 316.83129}
};	

new LOD_Pickups_Wpns[24][2]={
	{38, 250},			// Weapons...
	{4, 1},				// Knife		
	{4, 1},
	{5, 1},				// Baseball bat
	{5, 1},
	{5, 1},
	{8, 1},				// Katana
	{8, 1},
	{8, 1},
	{16, 1},			// Grenade
	{22, 16},			// Colts	
	{22, 16},
	{24, 6},			// Deagle
	{24, 6},
	{24, 6},
	{25, 4},			// Shotgun
	{25, 4},
	{27, 4},			// Spaz
	{28, 16},			// Uzi	
	{29, 16},			// Tec9
	{29, 12},
	{33, 4},			// Rifle
	{-2, -1},			// Health
	{-3, -2}			// Armour	
};
	
new Float:LODSpawns[][] = {
//       {X,           Y,        Z,      F.Angle},
	{-1269.31079, -184.90305, 14.48314, 316.20010},
	{-1290.38855, -194.80191, 14.48314, 288.60019},
	{-1295.84851, -186.64136, 14.48314, 278.34042},
	{-1314.94373, -190.27203, 14.48314, 371.76038},
	{-1313.26184, -179.47920, 14.48314, 472.74030},
	{-1326.71619, -169.87340, 14.48314, 559.02032},
	{-1333.54614, -163.37999, 14.48314, 687.72015},
	{-1324.27710, -141.02721, 14.48314, 658.86047},
	{-1313.45068, -171.29492, 14.48314, 921.24042},
	{-1316.32080, -152.14087, 14.48314, 658.86047},
	{-1311.41321, -136.53891, 14.48314, 853.20038},
	{-1313.51331, -125.69548, 14.48314, 658.86047},
	{-1289.26099, -120.86032, 14.48314, 613.74091},
	{-1289.46631, -125.68723, 14.48314, 483.42111},
	{-1294.40320, -139.28931, 14.48314, 433.44128},
	{-1281.11902, -139.04866, 14.48314, 433.44128},
	{-1285.06506, -156.10376, 14.48314, 734.40088},
	{-1275.04504, -158.18692, 14.48314, 909.90088},
	{-1258.81458, -159.21292, 14.48314, 986.58105},
	{-1265.82983, -182.27867, 14.48314, 228.84012},
	{-1295.44727, -177.97021, 14.48314, 846.48071},
	{-1301.97693, -146.63158, 14.48314, 1064.52026},
	{-1305.83057, -163.73715, 14.48314, 1041.12012},
	{-1313.37573, -185.90051, 14.48314, 460.62039},
	{-1318.69202, -161.32632, 14.48314, 821.94043},
	{-1266.31335, -167.60268, 14.48314, 965.28082},
	{-1283.51465, -181.74178, 14.48314, 288.60019},
	{-1318.03076, -174.03755, 14.48314, 678.66016},
	{-1272.98914, -181.81252, 14.48314, 228.84012},
	{-1279.70813, -165.89082, 14.48314, 709.92096},
	{-1272.47229, -137.41809, 14.48314, 404.64114},
	{-1299.66858, -142.83426, 14.48314, 1224.78015},
	{-1301.51013, -126.38577, 14.48314, 1289.99988},
	{-1322.37671, -143.40271, 14.48314, 798.60046},
	{-1279.20776, -173.71681, 14.48314, 528.06079},
	{-1274.75757, -192.12358, 14.48314, 299.16016},
	{-1327.66943, -152.61955, 14.48314, 658.86047},
	{-1286.42285, -139.81818, 14.48314, 445.20129},
	{-1302.89551, -181.95766, 14.48314, 846.48071},
	{-1289.26941, -152.22482, 14.48314, 1284.06055},
	{-1293.30994, -165.06348, 14.48314, 1065.12048},
	{-1298.57678, -130.32242, 14.48314, 488.94128},
	{-1273.75208, -127.14831, 14.48314, 397.08121},
	{-1336.02368, -157.08954, 14.48314, 715.86035},
	{-1263.15369, -167.18446, 14.48314, 1072.92114},
	{-1285.36133, -126.66288, 14.48314, 1141.80090},
	{-1268.06006, -142.97409, 14.48314, 758.76086},
	{-1302.00891, -172.96091, 14.48314, 952.20056},
	{-1301.86499, -153.43987, 14.41613, 1130.22021},
	{-1312.75818, -153.16017, 14.48314, 797.82080}
};

new Float:LODWeapSpawns[][]=
{
//       {X           Y          Z},
	{-1300.97205, -159.67439, 13.83044},//Minigun
	{-1313.61536, -175.36996, 13.83044},
	{-1279.37183, -181.09349, 13.83044},
	{-1282.68872, -152.78357, 13.83044},
	{-1290.02942, -128.65575, 13.83044},
	{-1313.65784, -143.80534, 13.83044},
	{-1313.74316, -164.69156, 13.83044},
	{-1308.84253, -192.16008, 13.83044},
	{-1290.51270, -159.48505, 13.83044},
	{-1290.82776, -186.10498, 13.83044},
	{-1275.25024, -172.27773, 13.83044},
	{-1317.84070, -157.21277, 13.83044},
	{-1325.45667, -185.79550, 13.83044},
	{-1264.94653, -163.76163, 13.83044},
	{-1302.67725, -165.69922, 13.83044},
	{-1269.81775, -147.92334, 13.83044},
	{-1294.41589, -171.37044, 13.83044},
	{-1331.27710, -144.20746, 13.83044},
	{-1293.93787, -133.99074, 13.83044},
	{-1322.97827, -160.46480, 13.83044},
	{-1286.4387,-143.4553,13.83044},
	{-1305.2832,-123.7546,13.83044},
	{-1328.6385,-152.8032,13.83044},
	{-1274.6973,-160.9594,13.83044}
};


	/* Area 51*/

new Float:area51SpawnsCrim[][] =
{
	{279.90634, 1862.82715, 8.79516, 0.00000},
	{280.15286, 1861.18933, 8.79516, -92.27998},
	{280.15564, 1859.62878, 8.79516, -92.27998},
	{279.49850, 1858.08740, 8.79516, -92.27998},
	{279.10654, 1856.58447, 8.79516, -92.27998},
	{278.95264, 1855.08838, 8.79516, -92.27998},
	{277.53540, 1854.19556, 8.79516, -175.97998},
	{275.90442, 1854.30896, 8.79516, -175.97998},
	{274.27722, 1854.40308, 8.79516, -175.97998},
	{272.65976, 1854.44336, 8.79516, -175.97998},
	{271.08173, 1854.47632, 8.79516, -175.97998},
	{269.70435, 1854.63989, 8.79516, -175.97998},
	{267.82797, 1854.64001, 8.79516, -175.97998},
	{266.55838, 1854.73755, 8.79516, -175.97998},
	{265.18048, 1854.92615, 8.79516, -280.74005},
	{265.27670, 1856.39148, 8.79516, -268.26007},
	{265.35648, 1857.77612, 8.79516, -268.26007},
	{265.46741, 1859.36218, 8.79516, -268.26007},
	{265.60721, 1860.74927, 8.79516, -268.26007},
	{265.68860, 1862.09399, 8.79516, -268.26007},
	{266.33450, 1863.07751, 8.79516, -347.27997},
	{269.16394, 1867.06445, 8.79516, 267.35379},
	{272.29379, 1859.59790, 8.79516, 356.67798},
	{269.22134, 1865.68640, 8.79516, 264.44952},
	{273.31894, 1860.64795, 8.79516, 360.92114},
	{272.10214, 1860.68872, 8.79516, 356.42789},
	{269.27158, 1868.28455, 8.79516, 266.59961},
	{273.28445, 1862.08215, 8.79516, -354.41983},
	{272.07187, 1862.08582, 8.79516, -350.87991},
	{269.45953, 1869.64099, 8.79516, 279.17117},
	{271.87573, 1863.22668, 8.79516, -350.87991},
	{273.09033, 1863.21167, 8.79516, -354.41983},
	{269.56274, 1870.95435, 8.79516, 278.79163},
	{272.30789, 1858.44092, 8.79516, 353.26126},
	{278.28720, 1862.88647, 8.79516, 0.00000},
	{270.92340, 1858.30078, 8.79516, 353.26126},
	{270.99503, 1859.37939, 8.79516, 356.55356},
	{270.80389, 1860.45532, 8.79516, 356.17279},
	{270.77094, 1861.89233, 8.79516, -350.87991},
	{270.57291, 1863.04456, 8.79516, -350.87991},
	{269.20016, 1864.52661, 8.79516, 264.44952},
	{269.46149, 1872.21228, 8.79516, 278.79163},
	{269.50839, 1873.72681, 8.79516, 278.79163},
	{269.66306, 1874.97363, 8.79516, 278.79163},
	{271.08786, 1876.20996, 8.79516, 180.51161},
	{272.44919, 1876.16052, 8.79516, 180.51161},
	{273.96625, 1876.31360, 8.79516, 180.51161},
	{275.78751, 1876.40723, 8.79516, 207.39154},
	{276.69720, 1877.57605, 8.79516, 249.51152},
	{276.95547, 1878.74146, 8.79516, 266.91147},
	{276.95459, 1879.87769, 8.79516, 266.91147},
	{276.96164, 1881.12097, 8.79516, 266.91147},
	{276.93173, 1882.22083, 8.79516, 266.91147},
	{276.93961, 1883.62097, 8.79516, 266.91147},
	{276.89789, 1884.86719, 8.79516, 266.91147},
	{276.92859, 1886.03381, 8.79516, 266.91147},
	{276.73468, 1887.28650, 8.79516, 266.91147},
	{276.73541, 1888.41956, 8.79516, 266.91147},
	{276.66702, 1889.69080, 8.79516, 266.91147},
	{276.20428, 1891.15430, 8.79516, 310.47153},
	{274.47244, 1891.63110, 8.79516, 359.31161},
	{273.23889, 1891.71985, 8.79516, 359.31161},
	{271.98712, 1891.77307, 8.79516, 359.31161},
	{270.74097, 1891.70862, 8.79516, 359.31161},
	{269.58310, 1891.77869, 8.79516, 359.31161},
	{268.39807, 1891.73022, 8.79516, 359.31161},
	{267.18045, 1891.75256, 8.79516, 359.31161},
	{266.01407, 1891.73206, 8.79516, 359.31161},
	{264.85263, 1891.72241, 8.79516, 359.31161},
	{263.62878, 1891.66516, 8.79516, 359.31161},
	{262.34119, 1891.59558, 8.79516, 359.31161},
	{261.18970, 1891.16895, 8.79516, 405.33154},
	{260.52283, 1889.87000, 8.79516, 454.29160},
	{260.63202, 1888.64209, 8.79516, 454.29160},
	{260.58878, 1887.47766, 8.79516, 454.29160},
	{260.67416, 1886.37219, 8.79516, 454.29160},
	{260.81470, 1885.16333, 8.79516, 454.29160},
	{260.67227, 1883.90918, 8.79516, 454.29160},
	{260.85272, 1882.71545, 8.79516, 454.29160},
	{260.86124, 1881.52832, 8.79516, 454.29160},
	{260.99225, 1880.37317, 8.79516, 454.29160},
	{260.98486, 1878.77112, 8.79516, 454.29160},
	{261.09818, 1877.53333, 8.79516, 454.29160},
	{262.08142, 1876.78723, 8.79516, 524.55127},
	{263.35565, 1876.66003, 8.79516, 540.51117},
	{264.58917, 1876.65381, 8.79516, 540.51117},
	{265.91028, 1876.68066, 8.79516, 540.51117},
	{267.15295, 1876.68311, 8.79516, 540.51117},
	{268.12140, 1853.64136, 8.79516, -175.97998},
	{269.41403, 1853.63245, 8.79516, -175.97998},
	{270.98065, 1857.02979, 8.79516, -175.97998},
	{272.36142, 1857.21216, 8.79516, -175.97998},
	{274.20010, 1857.10559, 8.79516, -175.97998},
	{275.65277, 1857.17126, 8.79516, -175.97998},
	{279.10864, 1853.15906, 8.79516, -175.97998},
	{275.65277, 1857.17126, 8.79516, -175.97998},
	{274.39850, 1861.43494, 8.79516, -175.97998},
	{275.97632, 1861.06531, 8.79516, -175.97998},
	{274.32748, 1862.59131, 8.79516, -175.97998},
	{275.74362, 1862.55310, 8.79516, -175.97998}
};

new Float:area51SpawnsAF[][] =
{
	{248.20151, 1858.37207, 14.12009, -183.29997},
	{246.85725, 1858.47791, 14.12009, -183.29997},
	{245.65694, 1858.57642, 14.12009, -183.29997},
	{244.47725, 1858.64099, 14.12009, -183.29997},
	{243.34671, 1858.78882, 14.12009, -183.29997},
	{242.24185, 1858.97278, 14.12009, -183.29997},
	{240.98904, 1859.18188, 14.12009, -183.29997},
	{239.31966, 1860.59814, 14.12009, -183.29997},
	{239.17705, 1862.10327, 14.12009, -183.29997},
	{239.10297, 1863.59692, 13.67421, -183.29997},
	{239.14043, 1865.29553, 12.71173, -183.29997},
	{239.29913, 1871.11841, 11.47990, -183.29997},
	{239.26631, 1878.49048, 11.46039, -183.29997},
	{237.33347, 1871.66101, 11.46039, -280.01999},
	{235.31566, 1871.70557, 11.46039, -280.01999},
	{233.14825, 1871.57593, 11.46039, -280.01999},
	{240.25099, 1868.13684, 11.46039, -183.29997},
	{238.95544, 1868.11731, 11.47990, -183.29997},
	{240.47992, 1869.55273, 11.46039, -183.29997},
	{239.18665, 1869.54724, 11.47990, -183.29997},
	{240.59129, 1871.10803, 11.46039, -183.29997},
	{242.75534, 1879.72571, 11.46039, -270.89999},
	{245.40047, 1879.72046, 11.46039, -270.89999},
	{247.49545, 1879.70410, 11.46039, -270.89999},
	{240.56699, 1878.28186, 11.46039, -183.29997},
	{240.74965, 1873.75146, 11.46039, -183.29997},
	{239.51297, 1873.84167, 11.46039, -183.29997},
	{239.44797, 1876.15051, 11.46039, -183.29997},
	{240.75044, 1875.91846, 11.46039, -183.29997},
	{225.29793, 1873.36157, 13.65534, -280.01999},
	{223.46278, 1873.09009, 13.65534, -280.01999},
	{208.60638, 1869.00183, 13.17589, -382.38000},
	{225.48058, 1867.88745, 13.17589, -448.37994},
	{225.25856, 1866.19836, 13.17589, -448.37994},
	{225.00117, 1864.61414, 13.17589, -448.37994},
	{224.81190, 1862.61084, 13.17589, -448.37994},
	{224.44438, 1860.81311, 13.17589, -449.51990},
	{221.99486, 1863.43396, 13.17589, -531.05975},
	{220.35326, 1863.73218, 13.17589, -531.05975},
	{218.87128, 1864.14819, 13.17589, -531.05975},
	{217.20683, 1864.51379, 13.17589, -531.05975},
	{215.82188, 1864.68933, 13.17589, -531.05975},
	{214.11917, 1864.69800, 13.17589, -531.05975},
	{212.70268, 1864.70874, 13.17589, -531.05975},
	{211.23346, 1864.73840, 13.17589, -531.05975},
	{209.49713, 1864.73560, 13.17589, -531.05975},
	{207.73720, 1864.45618, 13.17589, -531.05975},
	{205.93048, 1864.52783, 13.17589, -531.11975},
	{203.76297, 1861.80310, 13.17589, -531.05975},
	{203.46252, 1863.24744, 13.17589, -628.67920},
	{203.48932, 1864.70862, 13.17589, -628.67920},
	{203.40048, 1866.31189, 13.17589, -628.67920},
	{203.40852, 1867.81335, 13.17589, -628.67920},
	{203.47646, 1869.28027, 13.17589, -628.67920},
	{203.53896, 1870.48743, 13.17589, -628.67920},
	{203.64755, 1871.72754, 13.17589, -628.67920},
	{203.79951, 1873.22314, 13.17589, -685.43951},
	{205.30415, 1873.24841, 13.17589, -718.97974},
	{206.06415, 1871.22803, 13.17589, -718.97974},
	{207.45729, 1870.81006, 13.17589, -718.97974},
	{209.16997, 1870.77246, 13.17589, -719.03973},
	{210.52908, 1870.63098, 13.17589, -718.97974},
	{212.05305, 1870.33557, 13.17589, -718.97974},
	{213.55605, 1870.25635, 13.17589, -718.97974},
	{214.93677, 1870.28723, 13.17589, -718.97974},
	{216.56995, 1870.29846, 13.17589, -718.97974},
	{206.33035, 1868.67749, 13.17589, -718.97974},
	{209.36156, 1867.64343, 13.17589, -827.87952},
	{206.37036, 1866.87268, 13.17589, -761.45959},
	{222.40724, 1860.91431, 13.17589, -531.05975},
	{220.76976, 1861.18738, 13.17589, -531.05975},
	{219.29195, 1861.57751, 13.17589, -531.05975},
	{217.69655, 1861.88660, 13.17589, -531.05975},
	{216.25107, 1862.06726, 13.17589, -531.05975},
	{214.55255, 1862.04956, 13.17589, -531.05975},
	{213.14041, 1862.03418, 13.17589, -531.05975},
	{211.67558, 1862.03711, 13.17589, -531.05975},
	{209.94368, 1862.00720, 13.17589, -531.05975},
	{208.18823, 1861.70056, 13.17589, -531.05975},
	{206.38602, 1861.74475, 13.17589, -531.11975},
	{206.78427, 1873.08911, 13.17589, -718.97974},
	{208.18457, 1872.68970, 13.17589, -718.97974},
	{209.90457, 1872.67102, 13.17589, -719.03973},
	{211.27103, 1872.54810, 13.17589, -718.97974},
	{212.80238, 1872.27246, 13.17589, -718.97974},
	{214.31290, 1872.21228, 13.17589, -718.97974},
	{215.70117, 1872.26257, 13.17589, -718.97974},
	{217.34200, 1872.29358, 13.17589, -718.97974},
	{220.07123, 1869.89648, 13.17589, -718.97974},
	{222.48482, 1870.23340, 13.17589, -382.38000},
	{223.06697, 1868.92041, 13.17589, -827.87952},
	{220.12758, 1868.17004, 13.17589, -761.45959},
	{215.13936, 1865.95227, 13.17589, -761.45959},
	{218.12814, 1866.72583, 13.17589, -827.87952},
	{215.22975, 1867.74500, 13.17589, -718.97974},
	{217.59482, 1868.06006, 13.17589, -382.38000},
	{213.84763, 1867.05505, 13.17589, -827.87952},
	{210.90125, 1866.27905, 13.17589, -761.45959},
	{210.90651, 1868.07788, 13.17589, -718.97974},
	{213.22832, 1868.39612, 13.17589, -382.38000}
};

	/* Army vs. Terrorists */

new Float:armySpawnsType1[][] = {
	{-536.6452,1309.3185,3.7102,143.2186},
	{-535.7869,1307.3175,3.6655,144.8415},
	{-534.9776,1304.9730,3.5959,138.3177},
	{-534.4557,1302.6029,3.6028,133.0472},
	{-880.8651,1621.5620,30.8952,152.0271},
	{-880.4622,1617.4822,33.4015,245.7476},
	{-873.7017,1618.7975,33.4030,60.9587},
	{-883.3175,1615.1110,35.7468,240.8466},
	{-854.6778,1376.1045,1.2741,311.1262},
	{-851.0994,1372.8354,1.2741,315.1996}
};

new Float:armySpawnsType2[][] = {
	{-726.8176,1533.9048,40.1724,353.1638},
	{-729.1471,1534.0126,40.1633,356.0400},
	{-731.5231,1535.9725,40.2617,268.3620},
	{-729.3406,1538.0480,40.3969,2.6762},
	{-732.8348,1538.6995,40.4118,263.7181},
	{-730.0102,1539.9668,40.5042,164.1335},
	{-734.8888,1544.8472,39.0736,264.7473},
	{-734.6887,1547.8004,38.9713,266.9969},
	{-734.5697,1545.9861,41.5462,266.4031},
	{-734.1703,1555.2683,39.8209,272.7589}
};

	/* Big Smoke */

new Float:BigSmokeSpawns[][] = {
	{2532.9614,-1281.3271,1048.2891},
	{2524.3040,-1281.9133,1048.2891},
	{2520.3289,-1280.6376,1054.6406},
	{2542.9700,-1282.7721,1054.6406},
	{2542.3420,-1300.4220,1054.6406},
	{2546.8904,-1288.1726,1054.6406},
	{2553.3010,-1281.7985,1054.6470},
	{2568.7739,-1306.1091,1054.6406},
	{2581.2690,-1301.6436,1060.9922},
	{2579.9753,-1285.3286,1065.3594},
	{2551.5872,-1294.1041,1060.9844},
	{2568.3835,-1283.0282,1044.1250},
	{2575.8843,-1283.1638,1044.1250},
	{2566.9451,-1297.7665,1037.7734},
	{2566.3384,-1282.9639,1031.4219},
	{2572.0032,-1304.9718,1031.4219},
	{2546.4976,-1301.6432,1031.4219},
	{2530.7329,-1289.0771,1031.4219},
	{2527.4521,-1289.3014,1031.4219},
	{2543.1543,-1321.8826,1031.4219}
};

	/* Compound */

new Float:terroristcoumpoundattack[][] = {
	{-2180.1060,-268.1125,36.5156,273.4774}, // terrorits
	{-2180.0811,-265.7807,36.5156,269.0100}, // terrorits
	{-2180.0684,-263.1395,36.5156,271.2192}, // terrorits
	{-2179.9485,-260.2129,36.5156,267.1994}, // terrorits
	{-2179.9487,-257.7114,36.5156,267.1044}, // terrorits
	{-2184.7568,-253.8005,36.5156,267.2739}, // terrorits
	{-2184.5247,-251.0279,36.5156,265.7572}, // terrorits
	{-2184.3416,-248.1582,36.5156,266.0979}, // terrorits
	{-2184.1201,-245.0245,36.5156,264.3055}, // terrorits
	{-2183.7273,-242.0624,36.5156,263.6901}, // terrorits
	{-2185.4993,-238.8463,36.5220,268.0169}, // terrorits
	{-2185.2302,-235.9542,36.5220,264.1762}, // terrorits
	{-2184.8584,-232.8474,36.5156,267.1653}, // terrorits
	{-2184.5327,-230.1497,36.5156,262.6979}, // terrorits
	{-2181.9202,-227.0722,36.5156,260.0210}, // terrorits
	{-2170.1748,-237.7798,36.5156,357.3499}, // terrorits
	{-2166.4485,-237.7726,36.5156,358.0706} // terrorits
};

new Float:swatcompoundattack[][] = {
	{-1572.7030,748.0657,-5.2422,93.3019}, // cop
	{-1572.6538,744.2728,-5.2422,93.1385}, // cop
	{-1572.8400,740.5297,-5.2422,85.7576}, // cop
	{-1573.1174,736.6428,-5.2422,85.6028}, // cop
	{-1573.5133,732.7161,-5.2422,82.8390}, // cop
	{-1573.8737,728.5589,-5.2422,83.8352}, // cop
	{-1574.3877,724.3843,-5.2422,82.0114}, // cop
	{-1574.6088,719.8906,-5.2422,84.5743}, // cop
	{-1574.9963,715.1602,-5.2422,83.6905}, // cop
	{-1575.2784,708.9619,-5.2422,91.8934}, // cop
	{-1575.7524,702.8419,-4.9063,83.4896}, // cop
	{-1575.9858,697.0717,-4.9063,87.6192}, // cop
	{-1576.4403,691.0716,-5.2422,86.7354}, // cop
	{-1582.4408,684.6136,-5.2422,87.4182}, // cop
	{-1582.5164,680.3119,-4.9063,85.9078}, // cop
	{-1583.1206,676.1038,-4.9063,80.6373}, // cop
	{-1592.8230,674.3566,-4.9140,352.2764} // cop
};

	/* Drug Run */

new Float:drugSpawnsType1[][] = {
	{386.3043,2548.5906,16.5391,174.1982},
	{386.2205,2546.2419,16.5391,177.9582},
	{386.1368,2543.9036,16.5391,177.9582},
	{386.0403,2541.1985,16.5391,177.9582},
	{385.9525,2538.7400,16.5391,177.9582},
	{385.8694,2536.4104,16.5391,177.9582},
	{385.7797,2533.8972,16.5391,177.9582},
	{385.6798,2531.1011,16.5491,177.9582},
	{383.5614,2530.6782,16.5759,177.9582},
	{383.5607,2533.7908,16.5391,177.9582},
	{383.8788,2536.5457,16.5391,177.9582},
	{383.9685,2539.5559,16.5391,177.9582},
	{383.9574,2542.3435,16.5391,177.9582},
	{383.9225,2544.8630,16.5391,177.9582},
	{383.7946,2547.6460,16.5391,177.9582},
	{381.6566,2547.5417,16.5391,177.9582},
	{381.5372,2544.2039,16.5391,177.9582},
	{381.4406,2541.4956,16.5391,177.9582},
	{381.3459,2538.8496,16.5391,177.9582},
	{381.2657,2536.6025,16.5391,177.9582},
	{381.1742,2534.0408,16.5482,177.9582},
	{381.0813,2531.4390,16.5880,177.9582},
	{379.1826,2531.0791,16.5973,177.9582},
	{379.3771,2533.8757,16.5763,177.9582},
	{379.3782,2536.8149,16.5391,177.9582},
	{378.6484,2539.3767,16.5391,177.9582},
	{379.3178,2540.9807,16.5391,177.9582},
	{379.2309,2544.4143,16.5391,177.9582},
	{379.1219,2547.0881,16.5391,177.9582},
	{379.1389,2548.8113,16.5391,177.9582}
};

new Float:drugSpawnsType2[][] = {
	{1754.4464,-1886.6516,13.5569,271.7347},
	{1756.4623,-1886.5906,13.5564,271.7347},
	{1759.0895,-1886.5109,13.5558,271.7347},
	{1761.2360,-1886.4458,13.5553,271.7347},
	{1763.8300,-1886.3678,13.5546,271.7347},
	{1766.9156,-1886.2738,13.5539,271.7347},
	{1769.2448,-1886.2031,13.5533,271.7347},
	{1769.6971,-1888.5441,13.5601,271.7347},
	{1767.4825,-1888.3868,13.5537,271.7347},
	{1765.1946,-1888.3080,13.5543,271.7347},
	{1762.0735,-1888.4391,13.5551,271.7347},
	{1758.4504,-1887.7513,13.5559,271.7347},
	{1755.7251,-1888.0513,13.5566,271.7347},
	{1752.6431,-1888.3499,13.5574,271.7347},
	{1752.7349,-1890.3278,13.5573,271.7347},
	{1755.6147,-1890.4915,13.5566,271.7347},
	{1758.5013,-1890.4045,13.5559,271.7347},
	{1761.5813,-1890.3114,13.5552,271.7347},
	{1764.6033,-1890.2196,13.5544,271.7347},
	{1767.3138,-1890.1372,13.5603,271.7347},
	{1770.0690,-1890.0535,13.5610,271.7347},
	{1770.9042,-1892.0048,13.5621,271.7347},
	{1768.0706,-1891.3242,13.5611,271.7347},
	{1765.2567,-1891.3208,13.5604,271.7347},
	{1763.0635,-1891.2950,13.5548,271.7347},
	{1760.6603,-1891.1453,13.5554,271.7347},
	{1758.0073,-1891.5461,13.5561,271.7347},
	{1755.7379,-1891.1418,13.5566,271.7347},
	{1753.4752,-1891.4116,13.5572,271.7347},
	{1753.9664,-1893.4374,13.5570,271.7347},
	{1755.9385,-1893.3779,13.5566,271.7347}
};

// Plane event

new Float:PlaneSpawnType1[][] = {
	{1328.5518,-1559.9976,85.5482,261.6124},    //Rooftop dawgs
	{1329.3683,-1557.3896,85.5463,261.6124},	//Rooftop dawgs
	{1330.0658,-1555.1370,85.5476,261.6124},    //Rooftop dawgs
	{1330.5431,-1552.1804,85.5474,261.6124},    //Rooftop dawgs
	{1331.0220,-1548.7018,85.5472,261.6124},    //Rooftop dawgs
	{1332.2554,-1546.1392,85.5466,261.6124},    //Rooftop dawgs
	{1332.7635,-1543.0079,85.5463,261.6124},    //Rooftop dawgs
	{1333.5088,-1540.2433,85.5416,261.6124},    //Rooftop dawgs
	{1334.3801,-1537.4669,85.5403,261.6124},    //Rooftop dawgs
	{1344.9246,-1538.3875,85.5469,261.6124},    //Rooftop dawgs
	{1344.9893,-1542.0388,85.5469,261.6124},    //Rooftop dawgs
	{1345.0310,-1545.0365,85.5469,261.6124},    //Rooftop dawgs
	{1345.0284,-1548.6929,85.5469,261.6124},    //Rooftop dawgs
	{1344.9261,-1553.1475,85.5469,261.6124},    //Rooftop dawgs
	{1345.2081,-1555.5400,85.5469,261.6124},    //Rooftop dawgs
	{1344.5015,-1558.4845,85.5469,261.6124},    //Rooftop dawgs
	{1344.6753,-1561.6006,85.5469,261.6124},    //Rooftop dawgs
	{1344.7461,-1564.0417,85.5469,261.6124},    //Rooftop dawgs
	{1355.2986,-1568.8292,85.5469,255.3456},    //Rooftop dawgs
	{1356.7955,-1566.4377,85.5469,255.3456},    //Rooftop dawgs
	{1358.2108,-1563.1442,85.5469,255.3456},    //Rooftop dawgs
	{1358.7550,-1560.6874,85.5469,255.3456},    //Rooftop dawgs
	{1359.8666,-1557.1820,85.5469,255.3456},    //Rooftop dawgs
	{1360.7386,-1553.7102,85.5469,255.3456},    //Rooftop dawgs
	{1362.2638,-1551.1743,85.5469,255.3456},    //Rooftop dawgs
	{1363.5792,-1548.6090,85.5469,255.3456},    //Rooftop dawgs
	{1363.4777,-1545.8019,85.5469,255.3456},    //Rooftop dawgs
	{1364.0255,-1543.0754,85.5469,255.3456},    //Rooftop dawgs
	{1365.5203,-1540.6907,85.5469,255.3456}    	//Rooftop dawgs
};

new Float:planeSpawnsType2[][] = {
	{1925.0658,-2493.0122,13.5391,357.6970},    //Plane boiis
	{1931.4568,-2492.7917,13.5391,357.6970},    //Plane boiis
	{1928.3070,-2500.7466,13.5391,5.5304}    	//Plane boiis
};

new Float:PlaneVehicles[][e_DrugRunVehicles] = { // 9 vehicles
	{476,1975.9609,-2465.9646,14.2023,1.1585},      //Rustler
	{476,1964.0143,-2466.1470,14.2526,358.0305},    //Rustler
	{513,1951.4690,-2465.6086,14.0839,4.4540},      //Stunt
	{513,1942.2288,-2467.2751,14.0909,5.0026},      //Stunt
	{511,1926.2672,-2467.2434,14.9142,0.1272},      //Bigugly shit
	{512,1909.5729,-2469.3928,13.8225,4.2735},      //Crop/farm plane
	{512,1897.4233,-2469.6670,13.8198,1.8400},      //Crop/farm plane
	{553,1902.1135,-2493.8718,14.8745,91.1515},     //Big one
	{519,1952.4246,-2493.4648,14.4610,270.0481}     //Shamal
};

new DrugRunVehicles[][e_DrugRunVehicles] =
{
	{431, 1804.9897, -1928.3383, 13.4915, 359.5247},
	{567,1805.2609,-1911.4696,13.2676,359.9748},
	{567,1796.8599,-1931.1780,13.2519,2.8630},
	{536,1785.3833,-1931.5442,13.1238,0.4821},
	{567,1790.4397,-1931.3499,13.2531,359.2782},
	{560,1778.6602,-1932.2065,13.0915,359.6266},
	{522,1775.8104,-1925.5791,12.9557,228.7756},
	{455,1776.7750,-1911.1565,13.8224,182.1264},
	{433,325.4319,2541.5896,17.2446,178.8733},
	{433,291.5707,2542.2861,17.2572,181.1078},
	{470,331.9542,2527.1885,16.7732,89.7045},
	{470,339.5666,2527.3247,16.7636,89.7131},
	{470,345.7501,2527.4158,16.7324,90.8450},
	{470,352.0356,2527.3730,16.7001,90.3715},
	{470,358.3670,2527.4417,16.6720,91.0383},
	{470,364.3454,2527.4082,16.6404,89.8504}
};

	/* Hydra */

new Float:hydraSpawnsType1[][] = {
	{1939.58178711,1365.82348633,16.76304626,272.00000000},
	{1939.77551270,1323.51635742,16.76304626,271.50000000},
	{1968.00170898,1185.41442871,63.80590057,0.00000000},
	{1955.27209473,1173.72131348,63.80590439,180.00000000},
	{2163.80175781,1502.10534668,32.08264542,320.00000000},
	{2164.01171875,1463.47900391,32.08404922,222.00000000},
	{2106.23974609,1462.88977051,32.08428955,124.00000000},
	{2106.60009766,1502.69543457,32.08437729,52.00000000},
	{1950.36877441,1628.54748535,23.68749237,272.00000000},
	{1953.65820312,1603.13574219,73.17739105,39.99572754},
	{1906.02832031,1628.63964844,73.17739105,270.00000000},
	{1955.29699707,1655.69946289,73.17520905,39.99572754}
};

	/* Jeff TDM */

new Float:motelSpawnsType1[][] = {
	{2189.9846,-1139.2814,1029.7969,238.2805},
	{2189.1294,-1143.9292,1029.7969,273.2783},
	{2191.0825,-1146.8323,1029.7969,3.2783},
	{2196.0771,-1147.2567,1029.7969,3.2783},
	{2199.7551,-1147.3477,1029.7969,3.2783},
	{2202.3135,-1144.9834,1029.7969,90.6991},
	{2201.8625,-1143.1967,1029.7969,90.6991},
	{2199.8345,-1142.1290,1029.7969,180.9399},
	{2199.4023,-1139.0775,1029.7969,180.9399},
	{2196.8816,-1138.9806,1029.7969,180.9399},
	{2194.9197,-1139.0475,1029.7969,180.9399},
	{2194.1277,-1143.8186,1029.7969,0.9399},
	{2197.0967,-1144.2506,1029.7969,267.8791},
	{2193.4351,-1145.3593,1029.7969,181.3983},
	{2190.3499,-1142.9524,1030.3516,265.8307}
};

new Float:motelSpawnsType2[][] = {
	{2221.1633,-1154.1404,1025.7969,357.2927}, // Spawn1
	{2219.7998,-1153.8639,1025.7969,351.7650}, // Spawn2
	{2218.6963,-1153.5408,1025.7969,346.4945}, // Spawn3
	{2216.5090,-1152.4301,1025.7969,305.1901}, // Spawn4
	{2215.8010,-1150.7072,1025.7969,268.6424}, // Spawn5
	{2215.8596,-1149.2339,1025.7969,270.2654}, // Spawn6
	{2216.0044,-1147.0659,1025.7969,269.3816}, // Spawn7
	{2218.3806,-1147.1096,1025.7969,178.2570}, // Spawn8
	{2219.6746,-1145.5049,1025.7969,272.0005}, // Spawn9
	{2224.2832,-1142.2668,1025.7969,178.9960}, // Spawn10
	{2225.2764,-1145.0853,1025.7969,138.9451}, // Spawn11
	{2226.0496,-1147.5005,1025.7969,108.6078}, // Spawn12
	{2226.9717,-1150.2124,1025.7969,90.1771}, // Spawn13
	{2224.8855,-1150.6051,1025.7969,83.0266},// Spawn14
	{2219.8657,-1149.2186,1025.7969,268.5779}, // Spawn15
	{2218.7021,-1150.7179,1025.7969,180.3060}, // Spawn16
	{2218.6985,-1148.3522,1025.7969,353.6372} // Spawn17
};

	/* Mad Doggs */

new Float:MadDogSpawns[][] = {
	{1263.6385,-785.9014,1091.9063,350.3100},
	{1286.0574,-773.1819,1091.9063,125.5029},
	{1273.1113,-786.8727,1089.9299,234.6888},
	{1287.5909,-787.6873,1089.9375,168.4299},
	{1275.2504,-806.2203,1089.9375,343.1032},
	{1287.5999,-803.9429,1089.9375,163.7300},
	{1274.9194,-812.7767,1089.9375,237.6540},
	{1287.4939,-817.5425,1089.9375,173.1067},
	{1283.2192,-836.4002,1089.9375,2.6517},
	{1278.3448,-811.8217,1085.6328,169.6600},
	{1291.7516,-826.0576,1085.6328,175.3000},
	{1258.6934,-836.8271,1084.0078,266.1441},
	{1247.4591,-828.0005,1084.0078,281.1843},
	{1241.9280,-821.6576,1083.1563,165.1048},
	{1231.1757,-808.4885,1084.0078,145.0280},
	{1243.5769,-817.6377,1084.0078,47.9172},
	{1267.7944,-812.7502,1084.0078,4.0501},
	{1245.6238,-803.8966,1084.0078,274.1459},
	{1270.5660,-795.3015,1084.1719,350.1416},
	{1253.7341,-793.5455,1084.2344,260.3591},
	{1234.2546,-756.3163,1084.0150,180.9400},
	{1256.3524,-767.4749,1084.0078,196.7027},
	{1261.5895,-779.9619,1084.0078,4.8685},
	{1276.6580,-765.4781,1084.0078,177.5891},
	{1303.3036,-781.4746,1084.0078,87.0349},
	{1297.5220,-794.7298,1084.0078,358.2882}
};

	/* Minigun  */

new Float:minigunSpawnsType1[][] = {
	{1360.8236,2197.9639,9.7578,171.2087},
	{1396.4573,2176.7610,9.7578,84.2131},
	{1397.0870,2157.2017,11.0234,188.2790},
	{1410.2015,2100.4004,12.0156,359.9406},
	{1406.4691,2123.8171,17.2344,90.5182},
	{1406.5967,2183.2200,17.2344,84.8548},
	{1296.8109,2212.5212,12.0156,265.6498},
	{1300.6083,2207.5505,17.2344,183.5323},
	{1359.4872,2208.0378,17.2344,179.7720},
	{1298.4968,2198.1011,11.0234,178.2052},
	{1304.8771,2101.3682,11.0156,275.3395},
	{1396.1423,2101.5391,11.0156,89.8678},
	{1384.2648,2185.5144,11.0234,134.6748},
	{1330.3446,2204.9385,13.3759,358.6869},
	{1403.9540,2153.5938,13.2266,274.7129},
	{1396.5599,2103.8850,39.0228,48.1240},
	{1302.0127,2197.8630,39.0228,225.1588}
};

	/* Navy vs. Terrorists */

new Float:navySealsBoat[][] = {
	{-1451.8934,489.2393,3.0414,0.9636},
	{-1439.5277,489.2123,3.0414,357.9584},
	{-1435.7106,491.3882,3.0391,93.1610}, // Boatspawn_3
	{-1436.4033,495.6390,3.0391,93.1610}, // Boatspawn_4
	{-1446.0100,501.4157,3.0414,87.9335}, // Boatspawn_5
	{-1439.6398,501.8853,3.0414,359.0356}, // Boatspawn_6
	{-1432.6844,504.3380,3.0414,88.6373}, // Boatspawn_7
	{-1433.0454,508.8413,3.0414,88.6373}, // Boatspawn_8
	{-1437.2540,513.3931,3.0414,174.5301}, // Boatspawn_9
	{-1453.8115,513.5035,3.0414,177.5172}, // Boatspawn_10
	{-1424.9127,513.7139,3.0391,88.2392}, // Boatspawn_11
	{-1424.7781,508.5562,3.0391,95.7319}, // Boatspawn_12
	{-1426.6696,503.5713,3.0391,89.7576 }, // Boatspawn_13
	{-1427.1627,497.9672,3.0391,89.7576}, // Boatspawn_14
	{-1428.3741,492.3010,3.0391,89.7576}, // Boatspawn_15
	{-1429.5172,488.9036,3.0391,103.5731}, // Boatspawn_16
	{-1347.6814,500.0701,18.2344,3.1124} // Boatspawn_17
};

new Float:navyVehicles[][e_DrugRunVehicles] = { // 9 vehicles
	{476,-1270.1177,499.6811,18.9408,269.5298},
	{476,-1293.3729,492.2342,18.9422,270.5231},
	{476,-1303.7994,508.0874,18.9414,269.9069},
	{476,-1404.7931,493.4467,18.9422,356.9377},
	{476,-1458.4177,501.1433,18.9834,270.8403},
	{497,-1418.0540,516.1037,18.4192,270.9501},
	{497,-1420.1477,492.0164,18.4092,357.8716},
	{430,-1445.0782,497.6998,-0.2108,89.1427},
	{430,-1438.6812,504.7648,-0.1138,93.3837},
	{430,-1438.7063,509.4692,-0.1682,91.9946},
	{430,-1471.4034,488.0244,-0.2879,90.2242},
	{473,-1444.8440,491.8952,-0.2713,90.8142}
};

new Float:NavyTerroristVehicles[][e_DrugRunVehicles] = {
	{473,-544.2135,1290.1025,-0.2869,60.3390},
	{473,-545.9045,1301.1432,-0.2776,69.1840},
	{473,-544.9697,1308.0038,-0.2525,64.3189}
};

new Float:compoundVehicles[][e_DrugRunVehicles] = {
 	{497,-1630.3750,654.6266,7.3591,268.2673},
 	{497,-1604.6624,655.1348,7.3591,273.0138},
 	{490,-1616.0300,742.7470,-4.9922,89.5245},
    {490,-1604.0100,741.7650,-4.9922,87.7661},
    {490,-1593.0900,741.0660,-4.9922,87.6814},
    {490,-1582.0300,740.5920,-4.9922,87.4882},
    {490,-1581.0500,724.7320,-4.9922,359.0400},
    {490,-1581.0800,710.8540,-4.9922,358.8570},
    {490,-1581.7600,699.9149,-4.9844,358.7741}
};
	

new Float:terroristsBoat[][] = {
	{-1434.3325,1481.8838,1.8672,276.5517},
	{-1434.2948,1484.1460,1.8672,268.4611},
	{-1434.2507,1486.6434,1.8672,268.5173},
	{-1434.2252,1489.7177,1.8672,268.5735},
	{-1434.3741,1494.6810,1.8672,267.6897},
	{-1433.8632,1498.0852,1.8672,263.3593},
	{-1413.2545,1497.2257,1.8672,265.6650},
	{-1406.1989,1497.3625,1.8672,271.3051},
	{-1394.2034,1497.2762,1.8735,271.3051},
	{-1390.7335,1493.5171,1.8735,86.3641},
	{-1390.7863,1490.1801,1.8735,88.0595},
	{-1391.1282,1486.5408,1.8672,82.7890},
	{-1391.2137,1483.8008,1.8672,84.7253},
	{-1391.6104,1480.9357,1.8672,85.0948},
	{-1400.5376,1482.9449,1.8672,90.7348},
	{-1408.2819,1483.0409,1.8672,90.7348}
};

	/* Oil Rig */

new Float:swatoilrigspawns1[][] = {
	{-4989.2671,-1060.4849,62.3481,268.9522}, // SWATspawn1
	{-4989.2139,-1058.8197,62.3481,269.9485}, // SWATspawn2
	{-4989.2607,-1056.6619,62.3481,265.9313}, // SWATspawn3
	{-4989.2803,-1054.1078,62.3481,269.1208}, // SWATspawn4
	{-4989.1377,-1051.6665,62.3481,267.9237}, // SWATspawn5
	{-4989.0537,-1049.2660,62.3481,268.2932}, // SWATspawn6
	{-4989.0015,-1046.9961,62.3481,268.3495}, // SWATspawn7
	{-4988.9907,-1044.8541,62.3481,269.0324}, // SWATspawn8
	{-4989.0864,-1042.5729,62.3481,269.0886}, // SWATspawn9
	{-4984.8403,-1042.4364,62.3481,269.1448}, // SWATspawn10
	{-4984.7739,-1044.3013,62.3481,268.5744}, // SWATspawn11
	{-4984.6982,-1046.3790,62.3481,268.6869}, // SWATspawn12
	{-4984.5972,-1048.5526,62.3481,268.7432}, // SWATspawn13
	{-4984.3262,-1051.0364,62.3481,268.4861}, // SWATspawn14
	{-4984.2212,-1053.4729,62.3481,271.9891}, // SWATspawn15
	{-4984.1616,-1055.9543,62.3481,269.2253}, // SWATspawn16
	{-4984.1226,-1058.9647,62.3481,267.7148} // SWATspawn17
};

new Float:terroristoilrigspawns1[][] = { // terrorissts
	{-4848.1548,-1105.7831,52.1931,89.7017}, // Terrorspawn1
	{-4848.2217,-1104.4656,52.1929,87.5171}, // Terrorspawn2
	{-4848.2749,-1102.7365,52.1956,89.8487}, // Terrorspawn4
	{-4848.3560,-1101.0161,52.2002,89.0294}, // Terrorspawn3
	{-4848.4229,-1099.3506,52.2047,88.4292}, // Terrorspawn5
	{-4848.5532,-1097.4938,52.2097,88.2838}, // Terrorspawn6
	{-4848.5591,-1095.4310,52.2152,88.8179}, // Terrorspawn7
	{-4848.6245,-1093.4357,52.2206,87.7901}, // Terrorspawn8
	{-4854.3359,-1106.2627,52.1862,93.3493}, // Terrorspawn9
	{-4854.3325,-1104.7566,52.1902,89.1057}, // Terrorspawn10
	{-4854.3599,-1103.3361,52.1940,87.8238}, // Terrorspawn11
	{-4854.4463,-1101.3271,52.1994,91.0379}, // Terrorspawn12
	{-4854.5317,-1099.6100,52.2040,89.9278}, // Terrorspawn13
	{-4854.5986,-1097.7080,52.2283,89.0495}, // Terrorspawn14
	{-4854.8691,-1095.8661,52.2276,93.9821}, // Terrorspawn15
	{-4854.9053,-1094.2699,52.2275,89.5147}, // Terrorspawn16
	{-4854.8970,-1092.4136,52.2275,85.0473} // Terrorspawn17
};

	/* Pursuit */

new Float:pursuitVehicles[][] = {
	{612.4984,-1224.6945,17.8323,289.7163}, // Pursuit vehicle  0
	{565.6188,-1244.3657,16.9157,295.8679}, // 
	{566.4626,-1238.9558,16.9824,294.7580},	// 
	{563.5314,-1232.3390,16.9785,293.8539}, //
	{562.1167,-1228.7739,16.9802,293.5553}, //
	{570.1106,-1219.6626,17.3587,264.5331}, //
	{581.5428,-1241.3715,17.4123,324.3894}, //
	{546.8007,-1234.5836,16.5933,301.3257}, //
	{548.7852,-1240.2753,16.5859,298.6667}, //
	{551.3083,-1245.8103,16.5883,298.6719}, //
	{550.2395,-1282.4430,17.4245,335.9597}, // Maverick 1   10
	{553.7662,-1248.9722,16.6187,302.2399}, //
	{544.7589,-1254.8802,16.3637,304.2602}, //
	{542.4852,-1250.9253,16.3521,300.5960}, //
	{540.0701,-1245.4398,16.3468,303.6496}, //
	{537.5844,-1241.2225,16.3265,301.9268}, //
	{530.2521,-1246.8922,16.1160,306.0346}, //
	{532.6643,-1250.7150,16.1437,305.6226}, //
	{536.0997,-1255.8051,16.1669,304.6418}, //
	{538.0214,-1259.7885,16.1732,306.9165}, //
	{523.6465,-1252.1454,15.9460,307.8360}, //
	{525.4552,-1256.6023,15.9496,307.9929}, //
	{529.3110,-1260.3461,16.0049,305.8422}, //
	{532.2231,-1264.5140,16.0315,306.3712}, //
	{535.8637,-1280.3307,17.4137,324.3655}  // Maverick 2 24
};

new Float:HSpursuitVehicles[][] = {
    {612.4984,-1224.6945,17.8323,289.7163}, // Pursuit vehicle  0
	{565.6188,-1244.3657,16.9157,295.8679}, // 
	{566.4626,-1238.9558,16.9824,294.7580}, //
	{563.5314,-1232.3390,16.9785,293.8539}, //
	{562.1167,-1228.7739,16.9802,293.5553}, //
	{570.1106,-1219.6626,17.3587,264.5331}, //
	{581.5428,-1241.3715,17.4123,324.3894}, //
	{546.8007,-1234.5836,16.5933,301.3257}, //
	{548.7852,-1240.2753,16.5859,298.6667}, //
	{551.3083,-1245.8103,16.5883,298.6719}, //
	{553.7662,-1248.9722,16.6187,302.2399}, //
	{544.7589,-1254.8802,16.3637,304.2602}, //
	{542.4852,-1250.9253,16.3521,300.5960}, //
	{540.0701,-1245.4398,16.3468,303.6496}, //
	{537.5844,-1241.2225,16.3265,301.9268}, //
	{530.2521,-1246.8922,16.1160,306.0346}, //
	{532.6643,-1250.7150,16.1437,305.6226}, //
	{536.0997,-1255.8051,16.1669,304.6418}, //
	{538.0214,-1259.7885,16.1732,306.9165}, //
	{523.6465,-1252.1454,15.9460,307.8360}, //
	{525.4552,-1256.6023,15.9496,307.9929}, //
	{529.3110,-1260.3461,16.0049,305.8422}, //
	{532.2231,-1264.5140,16.0315,306.3712}, //
	{550.2395,-1282.4430,17.4245,335.9597}, // Maverick 1  23
	{535.8637,-1280.3307,17.4137,324.3655}  // Maverick 2 24
};

	/* Sumo */

new Float:sumoSpawnsType1[15][4] =
{
	{3770.844238, -1525.422973, 36.218750, 165.782379},
	{3760.332275, -1526.346435, 36.218750, 165.782379},
	{3781.483886, -1496.333984, 36.218650, 165.782379},
	{3747.465820, -1493.134521, 36.218750, 165.782379},
	{3753.536376, -1434.557739, 36.169601, 165.782379},
	{3778.360351, -1435.679443, 36.169586, 165.782379},
	{3632.698974, -1549.674072, 36.247207, 170.496109},
	{3651.617675, -1549.627441, 36.247196, 170.496109},
	{3664.941894, -1527.715209, 36.247135, 170.496109},
	{3621.671630, -1490.709472, 36.247188, 170.496109},
	{3665.038574, -1485.096679, 36.247230, 170.496109},
	{3634.828857, -1405.810913, 36.234485, 170.496109},
	{3622.596191, -1338.279785, 36.238059, 170.496109},
	{3622.376708, -1264.447509, 36.170368, 170.496109},
	{3681.760498, -1316.780395, 36.240844, 170.496109}
};

new Float:sumoSpawnsType2[15][4] = {
	{4791.94726562,-2043.65002441,14.0,82.00000000},
	{4790.67578125,-2049.04931641,14.0,71.99597168},
	{4788.72070312,-2053.98779297,14.0,65.99340820},
	{4786.09472656,-2058.88867188,14.0,55.98986816},
	{4792.23144531,-2037.80468750,14.0,95.99597168},
	{4791.53466797,-2032.01013184,14.0,101.99304199},
	{4790.06250000,-2026.42871094,14.0,111.99157715},
	{4787.96728516,-2021.58862305,14.0,119.98913574},
	{4784.91601562,-2016.86865234,14.0,129.98718262},
	{4780.93212891,-2012.68615723,14.0,137.98461914},
	{4777.05224609,-2009.32250977,14.0,141.98266602},
	{4772.77148438,-2006.47973633,14.0,151.98132324},
	{4767.81347656,-2004.35412598,14.0,161.98144531},
	{4762.79931641,-2002.90576172,14.0,168.48138428},
	{4757.82128906,-2002.34020996,14.0,177.98120117}
};

new Float:sumoSpawnsType3[15][4] = {
	{1488.4178,6265.4429,27.5201,359.7072},
	{1488.2949,6232.3647,27.4989,359.8356},
	{1469.1898,6246.8521,27.2210,90.6164},
	{1502.7943,6247.6836,27.7414,88.2535},
	{1405.6884,6244.0596,25.9826,139.4007},
	{1320.5160,6202.5352,26.0507,96.7300},
	{1280.3342,6213.2788,26.0509,95.6704},
	{1257.2800,6277.6987,26.0462,358.0646},
	{1282.4304,6320.6533,26.0062,322.3025},
	{1401.2308,6351.6323,26.8068,275.0645},
	{1446.4875,6319.3984,23.5806,199.6965},
	{1478.3333,6296.5176,25.7071,270.5961},
	{1535.2900,6257.3018,25.6623,186.7137},
	{1531.9629,6193.7227,25.7719,16.0374},
	{1631.1805,6259.5181,25.7823,176.3534}
};

new Float:sumoSpawnsType4[15][4] = {
	{-1484.40002441,949.40002441,1037.90002441,334.00000000},
	{-1488.30004883,951.59997559,1037.90002441,333.99536133},
	{-1492.69995117,954.00000000,1037.90002441,333.99536133},
	{-1497.09997559,957.29998779,1037.90002441,333.99536133},
	{-1501.09997559,960.90002441,1037.90002441,327.99536133},
	{-1504.40002441,964.20001221,1038.00000000,333.99536133},
	{-1508.40002441,968.40002441,1037.80004883,333.99536133},
	{-1511.69995117,971.70001221,1038.09997559,333.99536133},
	{-1514.69995117,975.59997559,1038.19995117,325.99536133},
	{-1517.40002441,980.50000000,1038.19995117,309.99536133},
	{-1518.90002441,984.29998779,1038.19995117,293.99475098},
	{-1520.90002441,992.09997559,1038.30004883,283.99414062},
	{-1520.30004883,988.20001221,1038.19995117,289.99414062},
	{-1521.40002441,997.29998779,1038.40002441,277.99108887},
	{-1521.09997559,1002.00000000,1038.40002441,265.98706055}
};

new Float:sumoSpawnsType5[15][4] = {
	{4272.3604,999.4564,500.6275,86.5218},
	{4176.0195,945.9434,500.5341,101.3996},
	{4047.7341,999.1551,500.5143,86.9434},
	{4091.0955,1146.4822,500.4341,1.6999},
	{4012.9485,1277.9446,500.5084,89.1949},
	{4042.1272,1191.2253,476.9365,180.4632},
	{4213.5005,1279.0221,504.7436,266.9754},
	{4370.5264,1093.3694,500.5674,323.3853},
	{4194.9370,1094.6921,500.5842,179.4744},
	{4189.2437,907.8942,524.1190,273.7524},
	{4290.7930,913.4462,524.2849,2.1497},
	{4369.5400,1054.1501,524.1741,270.7135},
	{4169.1250,1095.0826,500.5882,182.0604},
	{4027.7532,999.4358,500.5151,357.7991},
	{4004.3616,1135.5791,500.4542,359.5936}
};

// Construction spawns
new Float:constructionspawn1[][] = {		// Worker spawns
	{-2105.8777,132.7461,35.2208,84.3999},  
	{-2105.9705,130.5837,35.2083,87.5895},  
	{-2105.9905,128.0861,35.2340,86.7057},  
	{-2106.1968,125.5368,35.2601,87.0752},  
	{-2106.2571,122.5485,35.2908,87.4448},  
	{-2110.0081,122.7282,35.2889,86.5610},  
	{-2110.0093,125.4053,35.2615,86.3038},  
	{-2110.1201,128.0304,35.2345,86.9867},  
	{-2110.0186,130.4566,35.2103,84.8496},  
	{-2109.9939,133.1890,35.1421,86.4725},  
	{-2114.4136,133.4627,35.1809,87.4687},  
	{-2114.6108,130.9634,35.2025,85.9582},  
	{-2114.6724,128.4339,35.2229,86.3278},  
	{-2114.8159,125.8313,35.2447,87.0106},  
	{-2115.0244,123.0371,35.2857,88.3202} 	 
};

new Float:constructionspawn2[][] = {  		// Engineer spawns
	{-2082.0339,307.5149,35.4293,179.7911},  
	{-2083.8347,307.5473,35.4263,178.5939},  
	{-2085.6150,307.4026,35.4396,176.4568},  
	{-2087.9150,307.3770,35.4419,176.5130},  
	{-2090.9116,307.0113,35.4163,181.2693},  
	{-2090.9827,303.5557,35.3750,175.9987},  
	{-2088.4480,303.3395,35.4003,178.8750},  
	{-2085.8662,303.3599,35.4289,178.9312},  
	{-2084.1682,303.5374,35.4496,182.1208},  
	{-2081.7195,303.2591,35.4733,178.7303},  
	{-2081.8494,299.1623,35.4740,177.2198},  
	{-2083.8821,299.1319,35.4131,177.9026},  
	{-2086.2539,298.6504,35.3755,174.5122},  
	{-2088.4631,298.8038,35.3470,178.6417},  
	{-2090.8367,298.9302,35.3224,173.3712}  
};
new GunGameKills[MAX_PLAYERS] = {0, ...};
new lastGunGameWeapon[MAX_PLAYERS] = {38, ...};

new GunGameWeapons[] = {22, 23, 24, 25, 26, 27, 29, 28, 32, 30, 31, 33, 34, 35, 38, 16, 9, 9};

new Float:GunGameSpawns[GUNGAME_EVENTSLOT][4] =
{
	{-2374.05664, 2214.88843, 5.35340, 282.34399},	//1
	{-2442.86206, 2250.09546, 5.35340, 0.00000},	//2
	{-2537.19897, 2242.62646, 6.42303, 148.65356},	//3
	{-2441.80151, 2301.24902, 5.35340, 273.78021},	//4
	{-2415.97705, 2313.85059, 1.46309, 270.82578},	//5
	{-2435.45361, 2350.89697, 5.35340, 368.70001},	//6
	{-2428.86768, 2376.74927, 5.63292, 192.90941},	//7
	{-2491.24683, 2362.40259, 10.77754, 452.88022},	//8
	{-2506.31714, 2366.80615, 5.34199, 275.58066},	//9
	{-2602.08252, 2299.33154, 8.24006, 299.10297},	//10
	{-2582.07886, 2266.21021, 6.29522, 452.58011},	//11
	{-2436.65649, 2410.94775, 13.31322, 219.81975},	//12
	{-2470.34692, 2406.50903, 16.86855, 452.88022},	//13
	{-2420.84180, 2405.37915, 13.09915, 364.98019},	//14
	{-2422.58594, 2492.15820, 13.24550, 269.10019},	//15
	{-2491.35596, 2496.82373, 18.19505, 307.65671},	//16
	{-2424.42114, 2471.16968, 13.45690, 351.84030},	//17
	{-2381.27661, 2440.66357, 9.38372, 351.84030},	//18
	{-2382.25708, 2407.23120, 9.15547, 165.36780},	//19
	{-2384.33496, 2397.50244, 9.05451, 165.36780},	//20
	{-2405.40186, 2360.36255, 5.33048, 24.70221},	//21
	{-2184.15356, 2419.14624, 5.29688, 289.12640},	//22
	{-2374.51392, 2408.79565, 8.27291, 22.82044},	//23
	{-2212.88721, 2419.98779, 2.90394, 400.42636},	//24
	{-2230.41284, 2438.99731, 2.58229, 586.84625},	//25
	{-2368.14502, 2522.60303, 8.30027, 2.22145},	//26
	{-2226.91357, 2326.35156, 7.63424, 447.32742},	//27
	{-2291.88550, 2266.66724, 5.29688, 209.15526},	//28
	{-2334.68115, 2318.82739, 5.29688, 189.77348},	//29
	{-2293.77612, 2288.44092, 5.29688, 351.01221},	//30
	{-2405.70923, 2326.76270, 5.29688, 183.92668},	//31
	{-2329.12720, 2333.50928, 3.60759, 274.83377},	//32
	{-2501.37402, 2278.64673, 5.29688, 357.18857},	//33
	{-2601.77148, 2338.62891, 8.15924, 410.54633},	//34
	{-2523.41479, 2287.88818, 5.24976, 274.99368},	//35
	{-2534.90625, 2220.14063, 5.29156, 511.52640},	//36
	{-2625.03857, 2309.66772, 8.73312, 452.60657},	//37
	{-2638.68774, 2334.50439, 8.73312, 452.60657},	//38
	{-2627.14038, 2424.80981, 14.25060, 83.70193},	//39
	{-2600.86572, 2376.06030, 9.25959, 452.60657},	//40
	{-2631.28735, 2377.19678, 9.11210, 452.60657},	//41
	{-2539.29858, 2387.60059, 14.93818, 57.20950},	//42
	{-2319.05737, 2409.55078, 6.04895, 314.80670},	//43
	{-2341.60034, 2478.03101, 5.27529, 321.64066},	//44
	{-2310.01929, 2426.20923, 6.70236, 328.25150},	//45
	{-2479.85596, 2515.71387, 18.13885, 269.10019},	//46
	{-2495.13867, 2219.81958, 5.22876, 201.33659},	//47
	{-2617.08447, 2240.83154, 5.07396, 107.24717},	//48
	{-2489.08765, 2416.86890, 16.68762, 51.63237},	//49
	{-2522.32617, 2526.76123, 19.34723, 244.15265},	//50
	{-2539.92261, 2496.74316, 20.96751, 169.34283},	//51
	{-2416.01514, 2528.16187, 15.83256, 336.81885},	//52
	{-2236.51270, 2468.20972, 5.17351, 674.02679},	//53
	{-2446.31323, 2485.62500, 15.94782, 49.32770},	//54
	{-2444.52368, 2456.08301, 14.95989, 269.10019},	//55
	{-2349.14087, 2421.93311, 7.44275, 327.51926},	//56
	{-2388.01514, 2216.49976, 5.35340, 270.00000},	//57
	{-2572.99780, 2237.16699, 5.29156, 511.52640},	//58
	{-2615.16650, 2249.74219, 8.45328, 511.52640},	//59
	{-2547.23633, 2353.39990, 5.34199, 538.38000},	//60
	{-2630.54004, 2355.44653, 9.01229, 452.60657},	//61
	{-2632.45972, 2400.66479, 11.59148, 83.70193},	//62
	{-2555.81543, 2237.91577, 5.35697, 511.52640},	//63
	{-2335.72998, 2294.21606, 5.29688, 183.92668},	//64
	{-2305.58496, 2331.02905, 5.29688, 183.92668},	//65
	{-2242.08936, 2370.89185, 5.02420, 222.35147},	//66
	{-2234.72778, 2273.18726, 5.29688, 201.20045},	//67
	{-2244.81299, 2386.84595, 5.23065, 314.80670},	//68
	{-2284.75195, 2382.99170, 6.04895, 314.80670},	//69
	{-2333.36646, 2430.08301, 7.44128, 321.64066},	//70
	{-2545.36548, 2424.72070, 17.94265, 373.70407},	//71
	{-2438.76245, 2303.92993, 10.47762, 14.81094},	//72
	{-2394.18555, 2469.84009, 10.26640, 301.87344},	//73
	{-2491.02075, 2452.00122, 16.81218, 272.72873},	//74
	{-2479.22827, 2484.71216, 18.13885, 269.10019},	//75
	{-2457.31421, 2538.45435, 16.63840, 17.00333},	//76
	{-2344.74707, 2483.11426, 2.75071, 203.70636},	//77
	{-2315.70459, 2453.38037, 5.25983, 329.93933},	//78
	{-2250.81250, 2418.16455, 2.90394, 586.84625},	//79
	{-2235.05225, 2403.53418, 2.58229, 762.52570},	//80
	{-2273.58960, 2431.39209, 5.17351, 674.02679},	//81
	{-2209.10669, 2392.76929, 5.29688, 306.17462},	//82
	{-2213.33179, 2336.05200, 5.29688, 289.12640},	//83
	{-2292.43335, 2233.36572, 5.29688, 209.15526},	//84
	{-2485.50244, 2294.06104, 5.29688, 360.86652},	//85
	{-2563.34546, 2450.53735, 19.70659, 338.08707},	//86
	{-2663.30981, 2461.07690, 41.16936, 140.43378},	//87
	{-2594.87134, 2485.41602, 22.77028, 350.92599},	//88
	{-2640.46484, 2455.82715, 28.15317, 40.69649},	//89
	{-2583.06616, 2348.72705, 9.78389, 363.08636},	//90
	{-2578.94458, 2308.47559, 6.08386, 452.58011},	//91
	{-2587.42505, 2318.00073, 6.35024, 535.85968},	//92
	{-2584.09155, 2289.79980, 6.66338, 452.58011},	//93
	{-2556.52954, 2266.75732, 5.24976, 511.52640},	//94
	{-2489.87207, 2342.32617, 14.24818, 597.30029},	//95
	{-2458.98022, 2379.07275, 9.79248, 77.77088},	//96
	{-2515.53369, 2382.60889, 17.56006, 355.73212},	//97
	{-2513.56665, 2293.55908, 5.29688, 104.12930},	//98
	{-2432.80054, 2312.48926, 5.35340, 452.88022},	//99
	{-2690.69800, 2443.37817, 49.16903, 136.48888},	//100
	{-2660.46240, 2440.39844, 45.03195, 246.70251},	//101
	{-2700.79224, 2359.37402, 74.43792, 191.31453},	//102
	{-2702.31177, 2398.75562, 60.93114, 157.78239},	//103
	{-2686.67627, 2392.12524, 61.65710, 157.78239},	//104
	{-2717.45142, 2371.65283, 71.28976, 104.38560},	//105
	{-2467.05225, 2555.50708, 23.95999, 18.71424},	//106
	{-2338.33789, 2561.85254, 24.06358, 348.95764},	//107
	{-2391.15527, 2563.73657, 23.78101, 10.85424},	//108
	{-2333.12402, 2528.47534, 8.30027, -48.65852},	//109
	{-2259.32031, 2382.26270, 5.23065, 314.80670},	//110
	{-2280.32666, 2287.99487, 5.29688, 96.68684},	//111
	{-2279.37915, 2334.71265, 5.29688, 84.14684},	//112
	{-2297.25244, 2339.74390, 5.29688, 189.77348},	//113
	{-2351.90674, 2334.82104, 5.29688, 183.92668},	//114
	{-2410.90405, 2389.46875, 8.78935, 16.18221},	//115
	{-2356.38403, 2384.40356, 6.30132, 289.12640},	//116
	{-2358.00586, 2445.13989, 8.33985, 328.25150},	//117
	{-2374.72485, 2465.60278, 7.94248, 157.63971},	//118
	{-2429.50171, 2449.77808, 13.75728, 351.84030},	//119
	{-2487.85962, 2468.02466, 18.30120, 186.06285},	//120
	{-2586.99951, 2415.42310, 14.77947, 306.32416},	//121
	{-2484.05176, 2405.56641, 16.57833, 314.85309},	//122
	{-2467.89917, 2420.93726, 16.31232, 70.76892},	//123
	{-2437.57910, 2399.18896, 13.27553, 364.98019},	//124
	{-2409.54272, 2420.59106, 12.00283, 62.73977},	//125
	{-2399.99414, 2404.90332, 9.06267, 165.36780},	//126
	{-2387.34131, 2413.98877, 9.15547, 165.36780},	//127
	{-2344.37231, 2439.52490, 7.44275, 327.51926},	//128
	{-2350.65039, 2450.55786, 6.70236, 328.25150},	//129
	{-2435.84863, 2450.17554, 14.02895, 351.84030},	//130
	{-2452.42529, 2484.51660, 15.94782, 269.10019},	//131
	{-2422.30566, 2485.57739, 13.30277, 448.14029},	//132
	{-2382.56152, 2480.81909, 8.81137, 315.42050},	//133
	{-2378.60181, 2489.83862, 8.45731, 102.84289},	//134
	{-2241.09058, 2325.55640, 5.90795, 447.32742},	//135
	{-2204.21484, 2307.57349, 5.21640, 631.04749},	//136
	{-2302.87915, 2293.74780, 5.29688, 185.23225},	//137
	{-2325.20972, 2374.71240, 5.85106, 388.88669},	//138
	{-2432.92920, 2288.86401, 5.35340, 452.88022},	//139
	{-2416.81494, 2219.82275, 5.35340, 270.00000},	//140
	{-2517.21045, 2224.12183, 5.22876, 147.51660},	//141
	{-2532.60596, 2233.14771, 5.29156, 349.34656},	//142
	{-2593.71875, 2252.36060, 6.84788, 443.06650},	//143
	{-2629.50513, 2270.00854, 8.45328, 424.76648},	//144
	{-2599.60718, 2259.14600, 8.45328, 254.00661},	//145
	{-2626.01196, 2366.44458, 9.07845, 452.60657},	//146
	{-2629.48193, 2328.68286, 9.01229, 592.40631},	//147
	{-2633.70459, 2300.98560, 8.73312, 452.60657},	//148
	{-2579.66455, 2377.46606, 10.48249, 358.04282},	//149
	{-2433.54175, 2257.87329, 5.35340, 452.88022},	//150
	{-2497.40576, 2250.24634, 5.22876, 356.13666},	//151
	{-2516.54150, 2353.46191, 5.34199, 538.38000},	//152
	{-2546.12305, 2369.03296, 5.34199, 408.12015},	//153
	{-2448.40991, 2210.69214, 5.35340, -175.85999},	//154
	{-2520.50122, 2424.39771, 16.87073, 266.63998},	//155
	{-2464.50146, 2487.59766, 16.88958, 269.10019},	//156
	{-2459.36523, 2512.76050, 16.89569, 94.09369},	//157
	{-2545.65771, 2548.73486, 20.94196, 33.01267},	//158
	{-2578.06689, 2542.75293, 22.93094, 33.01267},	//159
	{-2596.87207, 2524.49951, 24.74534, 33.01267},	//160
	{-2622.14478, 2527.63330, 27.71770, 33.01267},	//161
	{-2570.54272, 2492.46509, 20.74647, 338.08707},	//162
	{-2311.74976, 2565.37817, 23.08396, 348.95764},	//163
	{-2340.74805, 2508.58643, 1.46813, -135.41852},	//164
	{-2338.89917, 2482.87524, 1.58655, -135.41852},	//165
	{-2284.72290, 2287.51733, 9.27523, 96.68684},	//166
	{-2480.61035, 2348.33008, 8.01603, 452.88022},	//167
	{-2487.09619, 2351.74292, 5.03304, 90.00000},	//168
	{-2527.23779, 2243.54565, 6.42303, 148.65356},	//169
	{-2540.51050, 2268.46167, 5.35697, 511.52640},	//170
	{-2669.61816, 2489.76416, 35.33456, 51.27384},	//171
	{-2501.12109, 2367.86816, 14.24818, 402.06030},	//172
	{-2494.01392, 2358.79077, 14.24818, 281.82034},	//173
	{-2438.51782, 2362.21436, 10.06536, 368.70001},	//174
	{-2424.24170, 2368.25244, 5.63292, 21.06941},	//175
	{-2453.13867, 2364.56274, 5.04423, -247.90909},	//176
	{-2392.63110, 2462.19214, 10.15766, 343.87332},	//177
	{-2492.74878, 2529.92358, 19.34723, 229.93263},	//178
	{-2446.23242, 2513.11157, 15.84563, 93.20335},	//179
	{-2472.35522, 2514.28247, 17.89128, 93.73370},	//180
	{-2518.19434, 2500.43286, 19.01481, 131.67505},	//181
	{-2504.82568, 2526.58960, 18.71487, 4.24379},	//182
	{-2716.96265, 2346.97656, 72.08465, 104.38560},	//183
	{-2645.89526, 2514.21338, 30.21190, 122.07380},	//184
	{-2644.46558, 2476.79663, 34.50800, 122.07384},	//185
	{-2628.66870, 2478.83276, 29.13920, 122.07384},	//186
	{-2603.39429, 2510.61963, 25.53460, 367.72583},	//187
	{-2678.79126, 2421.75830, 53.00713, 157.78239},	//188
	{-2489.07397, 2211.60840, 5.35340, -188.64001},	//189
	{-2659.07324, 2397.65674, 17.55773, 84.97570},	//190
	{-2640.33032, 2318.06323, 8.79147, 452.60657},	//191
	{-2380.74731, 2353.71826, 5.29688, 0.86667},	//192
	{-2413.81079, 2355.91187, 5.63292, -163.91057},	//193
	{-2423.09473, 2396.83911, 12.88292, 331.20038},	//194
	{-2338.73340, 2440.52368, 7.22075, 154.24080},	//195
	{-2261.13599, 2315.36157, 5.29688, -81.99316},	//196
	{-2454.04785, 2321.19385, 5.35340, 551.70020},	//197
	{-2582.90674, 2304.31714, 11.12904, 452.58011},	//198
	{-2638.52246, 2394.74951, 11.59148, 254.52179},	//199
	{-2635.18311, 2417.48145, 14.18488, 270.04883}	//200
};

new Float:Zombie_Civil_Spawn_1[ZOMBIE_EVENT_SLOTS][4]=
{
	{-64.17492, 1908.75281, 17.24453, -90.00000},
	{-64.96278, 1956.01343, 17.24453, -90.00000},
	{423.91019, 1936.46631, 17.33381, 96.06002},
	{214.61427, 2133.08545, 17.19019, 182.99992},
	{130.09933, 1647.11194, 17.35784, 4.38000},
	{-64.42719, 1895.57837, 17.24453, -90.00000},
	{192.37444, 2133.25146, 17.19019, 182.99992},
	{189.91402, 1647.77356, 17.35784, 4.38000},
	{424.45810, 1993.58179, 17.33381, 96.06002},
	{424.27228, 1959.01819, 17.33381, 96.06002},
	{-64.56583, 1915.50012, 17.26444, -90.00000},
	{180.68494, 1647.94666, 17.35784, 4.38000},
	{424.20432, 2004.41870, 17.33381, 96.06002},
	{159.95541, 1647.76855, 17.35784, 4.38000},
	{178.72624, 2133.61060, 17.19019, 182.99992},
	{-65.10545, 1876.65723, 17.24453, -90.00000},
	{-65.16927, 1873.82837, 17.24453, -90.00000},
	{165.86780, 1647.88452, 17.35784, 4.38000},
	{424.62021, 1919.88660, 17.33381, 96.06002},
	{424.12482, 1977.10864, 17.33381, 96.06002},
	{151.01109, 2133.70459, 17.19019, 182.99992},
	{-64.98040, 1958.89758, 17.24453, -90.00000},
	{424.60516, 1915.43115, 17.33381, 96.06002},
	{424.34744, 1928.56372, 17.33381, 96.06002},
	{424.24374, 2000.70093, 17.33381, 96.06002},
	{-65.48598, 1867.45947, 17.26444, -90.00000},
	{-64.64290, 1889.63220, 17.24453, -90.00000},
	{-65.09824, 1937.17725, 17.24453, -90.00000},
	{159.26102, 2133.24292, 17.19019, 182.99992},
	{-64.96409, 1879.45715, 17.24453, -90.00000},
	{155.15645, 1647.53162, 17.35784, 4.38000},
	{138.47925, 1647.30969, 17.35784, 4.38000},
	{424.25815, 1955.71179, 17.33381, 96.06002},
	{201.74825, 1647.98950, 17.35784, 4.38000},
	{424.69415, 1910.86768, 17.33381, 96.06002},
	{163.37837, 2133.50732, 17.19019, 182.99992},
	{166.00320, 2134.40381, 17.19019, 182.99992},
	{-65.23862, 1942.42834, 17.24453, -90.00000},
	{423.93195, 1940.71448, 17.33381, 96.06002},
	{174.62550, 2134.20850, 17.19019, 182.99992},
	{186.76860, 1648.04517, 17.35784, 4.38000},
	{-64.86997, 1946.56982, 17.26444, -90.00000},
	{132.80519, 1647.12634, 17.35784, 4.38000},
	{423.99823, 1965.40222, 17.33381, 96.06002},
	{-65.28532, 1870.46045, 17.22462, -90.00000},
	{192.82239, 1647.78174, 17.35784, 4.38000},
	{196.20354, 2133.36255, 17.19019, 182.99992},
	{152.47450, 1647.46045, 17.35784, 4.38000},
	{154.95381, 2133.50073, 17.19019, 182.99992},
	{423.67291, 1948.98083, 17.33381, 96.06002},
	{198.71809, 1647.93640, 17.35784, 4.38000},
	{195.81439, 1647.88940, 17.35784, 4.38000},
	{-65.06763, 1931.18433, 17.26444, -90.00000},
	{-65.04174, 1933.99365, 17.22462, -90.00000},
	{424.38797, 1924.08911, 17.33381, 96.06002},
	{168.92155, 1647.92883, 17.35784, 4.38000},
	{141.02118, 1647.37854, 17.35784, 4.38000},
	{135.61375, 1647.24890, 17.35784, 4.38000},
	{220.49405, 2132.60913, 17.19019, 182.99992},
	{-64.54164, 1924.78540, 17.24453, -90.00000},
	{423.70633, 1944.71033, 17.33381, 96.06002},
	{424.10455, 1973.22119, 17.33381, 96.06002},
	{-64.55897, 1899.57483, 17.26444, -90.00000},
	{423.89731, 1980.74121, 17.33381, 96.06002},
	{-64.21016, 1927.93481, 17.24453, -90.00000},
	{423.86121, 1984.65735, 17.33381, 96.06002},
	{-64.35720, 1902.56555, 17.22462, -90.00000},
	{424.03912, 1962.06848, 17.33381, 96.06002},
	{424.47488, 1997.26733, 17.33381, 96.06002},
	{143.65613, 1647.24561, 17.35784, 4.38000},
	{-64.57388, 1892.61890, 17.24453, -90.00000},
	{424.54611, 1989.80139, 17.33381, 96.06002},
	{149.66643, 1647.37939, 17.35784, 4.38000},
	{-64.03219, 1911.55249, 17.24453, -90.00000},
	{-65.09477, 1917.89990, 17.22462, -90.00000},
	{183.88681, 1647.99243, 17.35784, 4.38000},
	{182.95685, 2133.54858, 17.19019, 182.99992},
	{171.65363, 1647.98108, 17.35784, 4.38000},
	{146.32716, 1647.29053, 17.35784, 4.38000},
	{203.91370, 2133.12280, 17.19019, 182.99992},
	{-64.97000, 1882.95239, 17.26444, -90.00000},
	{177.54160, 1647.83984, 17.35784, 4.38000},
	{200.43878, 2133.39819, 17.19019, 182.99992},
	{423.99219, 1932.11511, 17.33381, 96.06002},
	{-64.79321, 1921.61133, 17.24453, -90.00000},
	{208.45361, 2132.90088, 17.19019, 182.99992},
	{218.33014, 2133.27881, 17.19019, 182.99992},
	{174.48059, 1647.83081, 17.35784, 4.38000},
	{-64.76416, 1886.10706, 17.22462, -90.00000},
	{-64.82954, 1949.64233, 17.22462, -90.00000},
	{212.10788, 2133.09277, 17.19019, 182.99992},
	{162.87108, 1647.77869, 17.35784, 4.38000},
	{424.18896, 1969.23694, 17.33381, 96.06002},
	{187.22255, 2133.42334, 17.19019, 182.99992},
	{224.28291, 2132.80493, 17.19019, 182.99992},
	{-64.87114, 1953.09448, 17.24453, -90.00000},
	{424.34760, 1952.30627, 17.33381, 96.06002},
	{-64.23997, 1905.92773, 17.24453, -90.00000},
	{170.10667, 2134.34912, 17.19019, 182.99992},
	{-65.20522, 1939.82312, 17.24453, -90.00000}
};

new Float:Zombie_Civil_Spawn_2[ZOMBIE_EVENT_SLOTS][4]=
{
	{145.05945, 1835.19873, 21.80386, -219.83992},
	{177.98967, 1832.58142, 23.86005, -277.79987},
	{223.32150, 1833.71863, 23.86005, -277.79987},
	{211.39009, 1810.59802, 25.19941, -277.79987},
	{207.86577, 1811.54688, 22.08409, -277.79987},
	{205.19463, 1811.70642, 17.76735, -175.97987},
	{146.38654, 1855.87854, 24.03824, -191.51994},
	{134.96469, 1877.06006, 22.51926, -191.51994},
	{117.90445, 1875.22974, 22.51926, -191.51994},
	{132.59116, 1900.83472, 22.86932, -191.51994},
	{149.05646, 1902.96863, 25.82085, -191.51994},
	{193.94270, 1929.62769, 23.24057, -191.51994},
	{218.25694, 1931.76404, 23.24057, -191.51994},
	{246.07834, 1862.99512, 21.46022, -191.51994},
	{239.15517, 1838.70386, 23.86005, -277.79987},
	{202.92101, 1835.21045, 23.86005, -277.79987},
	{246.96692, 1863.14636, 21.16876, -191.51994},
	{153.03835, 1837.04688, 21.80386, -266.21997},
	{145.73912, 1844.84888, 24.03824, -191.51994},
	{138.82927, 1873.24780, 22.51926, -191.21994},
	{122.38524, 1875.00488, 22.51926, -191.45995},
	{130.72145, 1906.72583, 22.86932, -191.51994},
	{143.53813, 1903.14453, 26.49533, -191.33995},
	{203.40248, 1933.66919, 23.24057, -191.51994},
	{230.48280, 1831.42542, 23.86005, -277.79987},
	{193.23280, 1831.41174, 23.86005, -277.79987},
	{188.03932, 1838.16711, 23.86005, -277.79987},
	{149.59578, 1834.84094, 21.80386, -266.21997},
	{141.73547, 1839.14001, 21.80386, -266.21997},
	{140.87778, 1850.35986, 25.38524, -191.51994},
	{150.36655, 1853.48401, 24.66537, -191.51994},
	{134.08696, 1871.50586, 22.51926, -191.21994},
	{141.87000, 1878.93286, 22.51926, -191.21994},
	{114.72359, 1870.97241, 22.51926, -191.45995},
	{114.34797, 1878.82617, 22.51926, -191.45995},
	{135.34785, 1895.54053, 22.99712, -191.33995},
	{134.29018, 1908.38086, 22.99712, -191.33995},
	{138.95139, 1898.28711, 24.96579, -191.51994},
	{138.67618, 1908.32764, 24.96579, -191.51994},
	{154.77623, 1908.21362, 24.55581, -191.51994},
	{154.61015, 1898.61462, 24.55581, -191.51994},
	{203.09052, 1928.40979, 23.24057, -191.51994},
	{212.20985, 1935.64539, 23.24057, -191.51994},
	{216.67113, 1927.22156, 23.24057, -191.51994},
	{221.75160, 1936.62634, 23.24057, -191.51994},
	{197.22353, 1935.26233, 23.24057, -191.51994},
	{196.86726, 1926.44556, 23.24057, -191.51994},
	{191.35315, 1935.68140, 23.24057, -191.51994},
	{210.49216, 1930.20923, 23.24057, -191.51994},
	{245.23724, 1862.38123, 21.16876, -191.51994},
	{246.28108, 1863.70728, 21.16876, -191.51994},
	{245.36736, 1862.91602, 21.16876, -191.51994},
	{213.63422, 1812.85718, 25.19941, -277.79987},
	{213.76602, 1809.43042, 25.19941, -277.79987},
	{209.24107, 1809.02271, 25.19941, -277.79987},
	{209.71767, 1813.03015, 25.19941, -277.79987},
	{205.22513, 1808.03333, 17.76735, -175.97987},
	{205.52730, 1815.32568, 17.76735, -175.97987},
	{207.51933, 1807.80212, 22.08409, -277.79987},
	{207.65094, 1814.51343, 22.08409, -277.79987},
	{211.55037, 1814.79480, 22.08409, -277.79987},
	{215.61720, 1814.53918, 22.08409, -277.79987},
	{216.12523, 1811.60095, 22.08409, -277.79987},
	{215.80356, 1807.58594, 22.08409, -277.79987},
	{213.08621, 1806.87378, 22.08409, -277.79987},
	{209.67851, 1806.94946, 22.08409, -277.79987},
	{206.00549, 1808.49548, 22.08409, -277.79987},
	{217.40082, 1808.78479, 22.08409, -277.79987},
	{211.63403, 1808.56921, 25.19941, -277.79987},
	{211.56949, 1813.10010, 25.19941, -277.79987},
	{213.69792, 1811.41748, 25.19941, -277.79987},
	{209.30072, 1811.26575, 25.19941, -277.79987},
	{193.34799, 1837.20630, 23.86005, -277.79987},
	{185.85007, 1831.71191, 23.86005, -277.79987},
	{181.86987, 1838.28406, 23.86005, -277.79987},
	{181.51707, 1830.31970, 23.86005, -277.79987},
	{175.73618, 1838.07715, 23.86005, -277.79987},
	{199.40169, 1829.80554, 23.86005, -277.79987},
	{201.23782, 1837.81555, 23.86005, -277.79987},
	{203.11302, 1831.38538, 23.86005, -277.79987},
	{226.36565, 1837.66113, 23.86005, -277.79987},
	{226.41975, 1829.87158, 23.86005, -277.79987},
	{232.37248, 1836.45215, 23.86005, -277.79987},
	{238.95163, 1830.92163, 23.86005, -277.79987},
	{242.97650, 1836.05664, 23.86005, -277.79987},
	{243.17657, 1829.55554, 23.86005, -277.79987},
	{217.85622, 1829.43518, 23.86005, -277.79987},
	{215.86151, 1832.78687, 23.86005, -277.79987},
	{218.10379, 1837.59680, 23.86005, -277.79987},
	{223.71201, 1838.49915, 23.86005, -277.79987},
	{152.50424, 1839.39050, 21.80386, -219.83992},
	{152.99365, 1833.52893, 21.80386, -219.83992},
	{139.71381, 1837.76001, 21.80386, -219.83992},
	{140.69267, 1833.72217, 21.80386, -219.83992},
	{144.50423, 1837.73474, 21.80386, -219.83992},
	{147.53477, 1832.95227, 21.80386, -219.83992},
	{150.36975, 1842.64319, 24.03824, -191.51994},
	{140.62218, 1842.37476, 24.03824, -191.51994},
	{142.06570, 1871.08044, 22.51926, -191.21994},
	{129.46532, 1895.41479, 22.86932, -191.51994}
};

new JPTDMEvent_Deaths[2];
new Float:JPTDM_Spawn1[JPTDM_EVENT_SLOTS][4]=
{
	{1661.94287, 1947.07666, 11.03581,57.84705},
	{1661.65515, 1951.51514, 11.03581,123.36707},
	{1659.88208, 1952.34436, 11.03581,163.56712},
	{1655.62329, 1950.22510, 11.03581,-136.85291},
	{1655.19031, 1947.75598, 11.03581,-78.41297},
	{1657.75696, 1945.09937, 11.03581,-9.95295},
	{1655.94116, 1945.52869, 11.03581,-14.69293},
	{1662.81958, 1948.30945, 11.03581,57.84705},
	{1662.77637, 1949.87085, 11.03581,97.08709},
	{1657.56714, 1951.89795, 11.03581,204.48708},
	{1635.85254, 1924.19910, 11.03581,-9.95295},
	{1634.13062, 1924.55847, 11.03581,-14.69293},
	{1633.46985, 1926.71680, 11.03581,-78.41297},
	{1631.24805, 1928.82056, 11.03581,-136.85291},
	{1633.30212, 1930.42432, 11.03581,204.48708},
	{1635.74084, 1930.80530, 11.03581,163.56712},
	{1637.63281, 1929.90552, 11.03581,123.36707},
	{1638.87000, 1928.19324, 11.03581,97.08709},
	{1639.02258, 1926.56201, 11.03581,57.84705},
	{1632.68176, 1923.98438, 11.03581,-9.95295},
	{1630.99719, 1924.50928, 11.03581,-14.69293},
	{1627.31592, 1925.60437, 11.03581,-78.47297},
	{1627.89612, 1928.19458, 11.03581,-136.85291},
	{1629.97937, 1929.98999, 11.03581,204.48708},
	{1632.44836, 1930.56226, 11.03581,163.56712},
	{1634.37158, 1929.85510, 11.03581,123.36707},
	{1635.63892, 1928.33594, 11.03581,97.08709},
	{1635.82043, 1926.89600, 11.03581,57.84705},
	{1635.08081, 1925.78381, 11.03581,57.84705},
	{1638.25098, 1925.25720, 11.03581,57.84705},
	{1622.00586, 1922.41113, 11.03581,-9.95295},
	{1616.87122, 1921.57605, 11.03581,-14.69293},
	{1616.22644, 1923.93604, 11.03581,-78.41297},
	{1616.75928, 1926.53442, 11.03581,-136.85291},
	{1618.79639, 1928.33728, 11.03581,204.48708},
	{1621.21582, 1928.91492, 11.03581,163.56712},
	{1623.08545, 1928.21289, 11.03581,123.36707},
	{1624.29944, 1926.70142, 11.03581,97.08709},
	{1624.42981, 1925.26819, 11.03581,57.84705},
	{1623.63586, 1924.15967, 11.03581,57.84705},
	{1660.30811, 1945.84863, 11.03581,44.70706},
	{1660.25647, 1933.71765, 11.03581,-14.69293},
	{1662.24133, 1933.29761, 11.03581,-9.95295},
	{1673.31873, 1934.60803, 11.03581,57.84705},
	{1674.44238, 1935.83899, 11.03581,57.84705},
	{1674.64648, 1937.39795, 11.03581,97.08709},
	{1673.77100, 1939.03931, 11.03581,123.36707},
	{1672.24219, 1939.86743, 11.03581,163.56712},
	{1670.17383, 1939.41846, 11.03581,204.48708},
	{1668.49304, 1937.74695, 11.03581,-136.85291},
	{1668.10193, 1935.28076, 11.03581,-78.47297},
	{1654.34631, 1932.87732, 11.03581,-9.95295},
	{1656.30139, 1934.76001, 11.03581,57.84705},
	{1657.42615, 1936.00232, 11.03581,57.84705},
	{1657.63049, 1937.57178, 11.03581,97.08709},
	{1656.75244, 1939.22314, 11.03581,123.36707},
	{1655.22168, 1940.06274, 11.03581,163.56712},
	{1653.14734, 1939.62439, 11.03581,204.42708},
	{1651.45984, 1937.96326, 11.03581,-136.85291},
	{1651.28003, 1935.50830, 11.03581,-78.41297},
	{1652.28284, 1933.29333, 11.03581,-14.69293},
	{1651.89355, 1924.10559, 11.03581,-14.69293},
	{1653.79468, 1923.58960, 11.03581,-9.95295},
	{1656.40515, 1925.41541, 11.03581,57.84705},
	{1657.35889, 1926.55347, 11.03581,57.84705},
	{1657.39258, 1928.02014, 11.03581,97.08709},
	{1656.34338, 1929.56689, 11.03581,123.36707},
	{1654.64136, 1930.30042, 11.03581,163.56712},
	{1652.39575, 1929.75586, 11.03581,204.48708},
	{1650.53833, 1927.98816, 11.03581,-136.85291},
	{1650.18738, 1925.42444, 11.03581,-78.47297},
	{1645.10815, 1922.25977, 11.03581,-9.95295},
	{1646.97144, 1924.03625, 11.03581,57.84705},
	{1648.00293, 1925.17188, 11.03581,57.84705},
	{1648.11230, 1926.63245, 11.03581,97.08709},
	{1647.13977, 1928.17407, 11.03581,123.36707},
	{1645.51392, 1928.90356, 11.03581,163.56712},
	{1643.34229, 1928.35364, 11.03581,204.48708},
	{1641.55615, 1926.57947, 11.03581,-136.85291},
	{1641.27734, 1924.01074, 11.03581,-78.41297},
	{1642.17944, 1921.68018, 11.03581,-14.69293},
	{1659.03552, 1926.84839, 11.03581,-78.41297},
	{1659.96021, 1924.71948, 11.03581,-14.69293},
	{1661.94800, 1924.38843, 11.03581,-9.95295},
	{1664.61511, 1925.47583, 11.03581,57.84705},
	{1665.65845, 1926.80969, 11.03581,57.84705},
	{1665.78064, 1928.47046, 11.03581,97.08709},
	{1664.82178, 1930.21204, 11.03581,123.36707},
	{1663.21106, 1931.14050, 11.03581,163.56712},
	{1661.05762, 1930.79065, 11.03581,204.48708},
	{1659.29248, 1929.21704, 11.03581,-136.85291},
	{1664.93567, 1935.21985, 11.03581,57.84705},
	{1665.97522, 1936.45703, 11.03581,57.84705},
	{1666.09473, 1938.02222, 11.03581,97.08709},
	{1665.13318, 1939.66956, 11.03581,123.36707},
	{1663.51917, 1940.50403, 11.03581,163.56712},
	{1661.36267, 1940.06152, 11.03581,204.48708},
	{1659.59387, 1938.39648, 11.03581,-136.85291},
	{1659.33362, 1935.93689, 11.03581,-78.47297},
	{1659.43362, 1935.83689, 11.03581,-78.47297}
};
new Float:JPTDM_Spawn2[JPTDM_EVENT_SLOTS][4]=
{
    {1338.85999, 2132.01831, 11.15632,-128.76003},
	{1340.59607, 2134.34399, 11.15632,-128.76003},
	{1343.01538, 2135.74487, 11.15632,-128.76003},
	{1345.27612, 2137.62183, 11.15632,-128.76003},
	{1347.09778, 2138.71094, 11.15632,-128.76003},
	{1340.24390, 2135.26880, 11.15632,-128.76003},
	{1338.41455, 2133.12891, 11.15632,-128.76003},
	{1342.14612, 2137.50146, 11.15632,-128.76003},
	{1344.21655, 2139.63965, 11.15632,-128.76003},
	{1345.71521, 2141.23145, 11.15632,-128.76003},
	{1334.38196, 2145.41846, 11.15632,-128.76003},
	{1332.45105, 2143.38330, 11.15632,-128.76003},
	{1336.51575, 2147.30884, 11.15632,-128.76003},
	{1338.71118, 2149.30054, 11.15632,-128.76003},
	{1340.40027, 2150.62842, 11.15632,-128.76003},
	{1338.99353, 2153.18970, 11.15632,-128.76003},
	{1337.54700, 2151.49805, 11.15632,-128.76003},
	{1335.59473, 2149.14209, 11.15632,-128.76003},
	{1333.71777, 2146.86548, 11.15632,-128.76003},
	{1332.00110, 2144.51758, 11.15632,-128.76003},
	{1332.14160, 2149.17480, 11.15632,-128.76003},
	{1330.31006, 2147.01929, 11.15632,-128.76003},
	{1334.41846, 2150.68311, 11.15632,-128.76003},
	{1336.57166, 2152.70020, 11.15632,-128.76003},
	{1338.21814, 2154.05273, 11.15632,-128.82002},
	{1336.76941, 2156.63916, 11.15632,-128.76003},
	{1335.28003, 2154.97314, 11.15632,-128.76003},
	{1333.03931, 2153.20898, 11.15632,-128.70003},
	{1330.95935, 2151.32275, 11.15632,-128.76003},
	{1329.03979, 2149.36401, 11.15632,-128.76003},
	{1327.27307, 2151.92017, 11.15632,-128.76003},
	{1329.31165, 2153.64868, 11.15632,-128.76003},
	{1331.37329, 2155.61157, 11.15632,-128.76003},
	{1333.78406, 2157.01318, 11.15632,-128.76003},
	{1335.31799, 2158.60449, 11.15632,-128.70003},
	{1334.05725, 2160.73486, 11.15632,-128.76003},
	{1332.45178, 2159.31616, 11.15632,-128.76003},
	{1330.33875, 2157.23267, 11.15632,-128.76003},
	{1328.30164, 2155.22778, 11.15632,-128.76003},
	{1326.42285, 2153.15552, 11.15632,-128.76003},
	{1325.77405, 2158.03906, 11.15632,-128.76003},
	{1324.03052, 2155.72681, 11.15632,-128.76003},
	{1327.95447, 2159.87598, 11.15632,-128.76003},
	{1330.11609, 2161.93262, 11.15632,-128.76003},
	{1331.77075, 2163.32593, 11.15632,-128.76003},
	{1330.33105, 2165.95459, 11.15632,-128.76003},
	{1328.84924, 2164.33008, 11.15632,-128.76003},
	{1326.86230, 2162.04297, 11.15632,-128.76003},
	{1324.95068, 2159.83057, 11.15632,-128.76003},
	{1323.19751, 2157.55273, 11.15632,-128.76003},
	{1321.54602, 2159.93628, 11.15632,-128.76003},
	{1323.42017, 2162.07739, 11.15632,-128.76003},
	{1325.49670, 2164.07300, 11.15632,-128.76003},
	{1327.63403, 2166.17139, 11.15632,-128.76003},
	{1329.26453, 2167.60742, 11.15632,-128.76003},
	{1327.79834, 2170.27783, 11.15632,-128.76003},
	{1326.29199, 2168.69727, 11.15632,-128.76003},
	{1324.27917, 2166.45264, 11.15632,-128.76003},
	{1322.34143, 2164.28711, 11.15632,-128.76003},
	{1320.56262, 2162.05273, 11.15632,-128.76003},
	{1315.77258, 2169.57031, 11.15632,-128.76003},
	{1317.47607, 2167.13062, 11.15632,-128.76003},
	{1318.70764, 2164.87402, 11.15632,-128.76003},
	{1320.50098, 2167.11621, 11.15632,-128.76003},
	{1319.28076, 2169.35327, 11.15632,-128.76003},
	{1317.59448, 2171.76782, 11.15632,-128.76003},
	{1319.61755, 2173.82153, 11.15632,-128.76003},
	{1321.24329, 2171.51001, 11.15632,-128.70003},
	{1322.58276, 2169.07666, 11.15632,-128.76003},
	{1324.69629, 2171.18555, 11.15632,-128.76003},
	{1326.30212, 2172.63135, 11.15632,-128.82002},
	{1324.81250, 2175.31372, 11.15632,-128.76003},
	{1323.28101, 2173.74292, 11.15632,-128.76003},
	{1323.27759, 2177.47241, 11.15632,-128.70003},
	{1321.70178, 2175.97803, 11.15632,-128.76003},
	{1314.29712, 2172.21826, 11.15632,-128.76003},
	{1316.13306, 2174.39038, 11.15632,-128.76003},
	{1318.12671, 2176.49634, 11.15632,-128.76003},
	{1320.19604, 2178.68018, 11.15632,-128.76003},
	{1321.75708, 2180.20190, 11.15632,-128.76003},
	{1334.04626, 2141.10327, 11.15632,-128.76003},
	{1334.44739, 2140.07178, 11.15632,-128.76003},
	{1336.13965, 2142.47803, 11.15632,-128.76003},
	{1335.74353, 2143.48340, 11.15632,-128.76003},
	{1337.59973, 2145.79785, 11.15632,-128.76003},
	{1338.42419, 2144.12524, 11.15632,-128.76003},
	{1340.63843, 2146.08496, 11.15632,-128.76003},
	{1339.53223, 2148.18604, 11.15632,-128.76003},
	{1340.95935, 2149.90967, 11.15632,-128.76003},
	{1342.34546, 2147.38135, 11.15632,-128.76003},
	{1336.06140, 2137.48511, 11.15632,-128.76003},
	{1336.48315, 2136.41772, 11.15632,-128.76003},
	{1338.19556, 2138.78735, 11.15632,-128.76003},
	{1337.81958, 2139.75610, 11.15632,-128.76003},
	{1339.69714, 2142.03345, 11.15632,-128.76003},
	{1340.54224, 2140.32251, 11.15632,-128.76003},
	{1342.77795, 2142.24512, 11.15632,-128.76003},
	{1341.69324, 2144.30859, 11.15632,-128.76003},
	{1344.55005, 2143.42578, 11.15632,-128.76003},
	{1343.14124, 2145.99414, 11.15632,-128.76003}
};

new Float:OSKill_Spawn[OSKill_EVENT_SLOTS][4]=
{
	{2371.99634, 142.12308, 28.50499,268.42181},
	{2318.28247, 8.07204, 26.62358,266.20319},
	{2441.69751, -74.69119, 28.11986,279.04187},
	{2430.37427, 12.08402, 26.45087,81.86522},
	{2484.54639, -36.03183, 28.54108,0.02148},
	{2318.17163, 75.56731, 26.57984,266.68311},
	{2244.14697, -65.36649, 26.56682,-1.38642},
	{2194.44141, -101.56245, 26.46900,3.22239},
	{2419.95386, 68.86727, 28.01270,0.02148},
	{2182.32275, 94.73595, 28.39522,81.20332},
	{2513.14722, -36.52583, 28.54108,0.02148},
	{2286.00732, 169.88268, 28.50296,366.94205},
	{2569.41577, 7.25282, 26.59729,90.29219},
	{2507.39941, 83.87825, 26.86543,359.23737},
	{2242.56592, 69.53082, 26.57984,92.46000},
	{2516.23267, 144.86131, 26.98326,184.91577},
	{2315.49902, 136.30878, 28.50296,455.32193},
	{2315.79565, 161.53058, 28.50296,455.32193},
	{2328.94482, 17.13156, 34.42499,227.62328},
	{2421.16431, 19.02400, 26.77898,-79.41481},
	{2567.57227, -8.39806, 27.04634,90.29219},
	{2254.95654, 70.66232, 26.57984,271.76865},
	{2252.26294, -57.08350, 26.56682,91.07359},
	{2267.10986, 119.50788, 28.39522,3.20329},
	{2502.71436, 146.96518, 26.48603,0.00000},
	{2415.10791, -68.53699, 28.11986,279.04187},
	{2507.89990, 19.39877, 28.53601,0.02148},
	{2311.45166, -47.35716, 33.00879,227.62328},
	{2196.05469, 106.50811, 28.39522,81.20332},
	{2386.59717, -53.59449, 28.11986,356.90912},
	{2315.51392, 33.28638, 27.49432,272.02313},
	{2502.65479, 61.88833, 27.07565,0.02148},
	{2550.47534, 60.59073, 27.65338,89.17540},
	{2293.86646, -135.72934, 28.13768,266.70267},
	{2372.36548, 166.86255, 28.50499,268.42181},
	{2270.55591, 60.11626, 26.57984,6.49487},
	{2462.63599, 139.46931, 26.98326,93.20496},
	{2365.89966, 42.38987, 28.40399,87.06696},
	{2371.36938, 186.33980, 28.50499,268.42181},
	{2224.79077, 190.61436, 25.00064,391.00208},
	{2372.19629, 117.97554, 28.50499,268.42181},
	{2433.22705, 88.89358, 27.83613,92.49169},
	{2236.33301, 178.41019, 28.19422,278.44208},
	{2399.36206, 119.75751, 28.39884,354.15918},
	{2315.13989, 206.99937, 25.82307, 455.32190},
	{2385.25537, 133.19327, 26.45734,-45.09501},
	{2322.30957, -84.45969, 31.46474,0.89832},
	{2248.25952, -132.26952, 27.50390,-94.26000},
	{2482.94287, 142.96545, 26.98326,74.17302},
	{2316.08716, 190.67560, 28.50296,455.32193},
	{2195.91968, 62.05967, 28.39522,81.20332},
	{2485.22144, 78.15998, 26.97053,87.84627},
	{2442.27832, 73.06783, 27.73714,0.02148},
	{2567.49756, 62.21077, 26.93824,89.17540},
	{2315.76636, 116.97936, 28.50296,455.32193},
	{2422.42261, 84.13144, 26.56815,92.49169},
	{2441.59619, -53.69067, 27.39851,3.69037},
	{2257.90991, 177.36000, 28.19422,278.44208},
	{2267.37671, -143.26430, 27.50390,266.70267},
	{2365.48608, 71.42014, 28.50499,87.06696},
	{2258.47876, -71.43893, 31.78294, -85.80000},
	{2362.19458, -73.03924, 27.48134,275.03970},
	{2326.75732, -9.55983, 30.15768,227.62328},
	{2446.36475, 4.99772, 26.97598,3.69037},
	{2382.70728, -63.67334, 27.48134,275.03970},
	{2569.47754, 76.53644, 26.62273,89.17540},
	{2522.13647, -49.81123, 27.40660,0.02148},
	{2485.08374, 19.14917, 28.04016,0.02148},
	{2565.49731, 17.73313, 27.04634,90.29219},
	{2332.95020, -142.53062, 28.13768,3.48951},
	{2303.98560, -124.76469, 28.13768,3.48951},
	{2184.87354, -41.12033, 27.48374,91.07359},
	{2366.07739, -8.71969, 28.50196,87.06696},
	{2366.30908, 21.32572, 28.40399,87.06696},
	{2531.84814, 140.42738, 26.62814,184.31721},
	{2565.48438, 98.97921, 27.13719,89.17540},
	{2492.60205, 68.33171, 26.77367,88.46146},
	{2194.41138, -87.07116, 27.75271,3.22239},
	{2293.12573, 183.50278, 26.28111,366.94205},
	{2188.47778, -60.77799, 28.18373,91.07359},
	{2248.88623, 119.76210, 28.39522,3.20329},
	{2273.03027, -50.33349, 26.56682,91.07359}

};

enum textde
{
	Text:TeamText,
	TeamScore,
	MemberCo
}
new GGTDMTeams[2][textde];

enum GGTDMPlayerDet
{
	PTeam,
	Spree
};

enum GGTDMTeamInfo
{
	Team_Name[18],
	Team_Skin,
	Team_Color
};
new Text:GGTDMLeadTeam;

new GGTDMPlayers[MAX_PLAYERS][GGTDMPlayerDet];
new GGTDM_TeamInfo[2][GGTDMTeamInfo]=
{
	{"Special Force", 288, COLOR_BLUE},
	{"Criminals", 107, COLOR_RED}
};
new GGTDM_PCurr_Streak[MAX_PLAYERS];
new GGTDM_PlCount;
new GGTDM_Kill_Target;
new Float:GGTDM_TSpawn[200][4]=
{
	//Spread out spawns 0 - 99
	//Close Pack spawns 100 - 199
	{-2137.23462, -2428.87842, 33.65812, 235.79747},
	{-2099.52075, -2373.03882, 30.71646, 58.53259},
	{-2119.41187, -2481.97192, 30.76459, 235.79747},
	{-2121.79639, -2306.94556, 30.71646, 244.92136},
	{-2171.53442, -2365.09619, 30.71646, 97.49546},
	{-2184.15161, -2423.32275, 30.86865, 229.99284},
	{-2069.29468, -2532.84424, 30.71646, 136.74751},
	{-2155.11255, -2455.41553, 35.32497, 235.79747},
	{-2077.41724, -2314.73438, 34.66660, 60.94207},
	{-2061.19604, -2346.10986, 30.71646, 136.74751},
	{-2194.35425, -2470.67725, 30.75852, 343.74820},
	{-2043.83435, -2529.45386, 30.71646, 136.74751},
	{-2242.16919, -2422.00732, 36.37007, 232.45810},
	{-2098.34888, -2401.79468, 30.71646, 315.34167},
	{-2202.56396, -2505.60693, 30.76459, 323.06427},
	{-2193.13086, -2434.48096, 30.66971, 326.67514},
	{-2115.87207, -2373.07275, 30.71646, 327.94171},
	{-2107.61230, -2457.96045, 30.59447, 234.64078},
	{-2215.27881, -2387.92480, 31.75034, -128.40205},
	{-2054.53882, -2436.33740, 30.71646, 326.85696},
	{-2121.80273, -2295.46997, 30.73878, 57.40744},
	{-2197.26782, -2454.57251, 31.17044, 64.14720},
	{-2148.71484, -2258.93213, 37.21858, 194.22369},
	{-2191.54321, -2303.09790, 30.67851, 319.71246},
	{-2108.19800, -2537.23486, 30.71646, 136.74751},
	{-2227.44702, -2276.17285, 30.77576, 229.99284},
	{-2167.40967, -2418.52441, 34.43551, 229.27148},
	{-2208.48120, -2336.99268, 30.66157, 229.99284},
	{-2206.70459, -2523.77881, 30.66766, 149.52892},
	{-2186.24268, -2491.72632, 30.75852, 343.74820},
	{-2186.13989, -2413.22144, 35.28918, 78.26019},
	{-2070.53369, -2319.15527, 30.70100, 224.23663},
	{-2168.66382, -2321.59131, 30.71646, 223.69576},
	{-2233.46680, -2290.53369, 30.67851, 319.71246},
	{-2147.84155, -2432.44678, 35.09983, 273.04895},
	{-2165.72119, -2482.52930, 31.26862, 235.79747},
	{-2235.91943, -2486.58130, 31.47468, 323.19662},
	{-2094.32104, -2547.56641, 30.71646, 136.74751},
	{-2145.65308, -2340.62427, 30.82261, 314.49030},
	{-2077.22876, -2565.65771, 30.71646, 136.74751},
	{-2221.18628, -2464.07324, 30.44107, 323.19662},
	{-2225.65552, -2289.75586, 35.40260, 300.38565},
	{-2176.26221, -2474.76270, 30.75852, 150.99178},
	{-2054.44604, -2461.37988, 35.55257, 235.67308},
	{-2105.61108, -2431.97852, 33.51786, 326.67514},
	{-2107.10913, -2398.34912, 31.48409, 298.42615},
	{-2201.67773, -2517.67505, 31.17063, 137.50833},
	{-2111.82642, -2522.15845, 30.76459, 235.79747},
	{-2169.30957, -2538.48486, 31.17167, 323.19662},
	{-2261.18896, -2411.81982, 31.86004, 232.45810},
	{-2089.96582, -2338.52393, 34.95667, 281.21625},
	{-2136.49487, -2491.34985, 30.76459, 235.79747},
	{-2198.26147, -2526.56665, 31.17167, 323.19662},
	{-2219.86475, -2432.07129, 30.44107, 57.87196},
	{-2081.38916, -2440.87524, 34.77871, 69.30090},
	{-2189.52856, -2418.81201, 30.86865, 229.99284},
	{-2115.15405, -2472.05908, 30.96354, 235.79747},
	{-2183.75586, -2534.89868, 31.17167, 323.19662},
	{-2195.88062, -2239.42334, 30.92959, 161.57245},
	{-2150.19531, -2397.13770, 30.66053, 503.01678},
	{-2066.74805, -2271.34473, 31.42758, 151.85959},
	{-2101.05054, -2222.77466, 30.51751, 154.61507},
	{-2249.90747, -2421.59888, 32.06079, 56.51453},
	{-2095.82544, -2587.99756, 37.44995, 146.64183},
	{-2215.09473, -2449.70068, 31.98478, 323.19662},
	{-2200.79053, -2356.69238, 30.71646, 223.69576},
	{-2167.87549, -2408.09619, 30.84368, 229.99284},
	{-2086.86987, -2504.91821, 30.71646, 136.74751},
	{-2171.44067, -2463.43311, 30.75852, 235.79747},
	{-2230.74731, -2495.79565, 31.47468, 323.19662},
	{-2041.92786, -2486.25293, 31.57828, 136.74751},
	{-2086.61719, -2439.11353, 30.71646, 330.35666},
	{-2242.69043, -2429.69116, 32.05675, 56.51453},
	{-2095.66382, -2249.55347, 30.71646, 149.52661},
	{-2143.58276, -2381.50928, 30.71646, 229.99284},
	{-2232.54443, -2332.33618, 30.75542, 157.75510},
	{-2193.44727, -2347.66064, 35.20239, 229.99284},
	{-2157.49780, -2300.55200, 30.71646, 150.43262},
	{-2176.43823, -2402.74756, 35.28918, 351.59427},
	{-2117.81396, -2226.52197, 30.73878, 170.14746},
	{-2110.11475, -2477.58203, 36.22531, 235.79747},
	{-2187.56494, -2322.13330, 30.75540, 229.99284},
	{-2088.38257, -2467.53491, 30.67294, 301.84439},
	{-2210.97314, -2254.41357, 30.63677, 269.44147},
	{-2150.65186, -2545.43164, 30.75230, 323.19662},
	{-2200.16284, -2575.50537, 30.69506, 324.01486},
	{-2161.73486, -2459.09424, 30.86865, 235.79747},
	{-2055.43579, -2347.19263, 41.02678, 132.91679},
	{-2248.53320, -2487.47241, 31.47468, 237.53612},
	{-2128.67383, -2342.47388, 30.71646, 327.94171},
	{-2233.35962, -2415.42676, 32.35870, 241.60371},
	{-2212.86157, -2284.62939, 30.62812, 229.99284},
	{-2079.26245, -2338.42065, 30.70100, 311.79776},
	{-2242.07422, -2494.95215, 30.55647, 147.32803},
	{-2073.56738, -2245.15210, 31.63467, 43.59690},
	{-2235.03369, -2382.18140, 32.77618, 232.45810},
	{-2094.29565, -2415.65723, 30.71646, 344.60068},
	{-2227.46729, -2394.67822, 32.58947, 51.05813},
	{-2186.24072, -2248.95166, 30.73814, 234.46323},
	{-2162.81909, -2281.15723, 30.70579, 57.40744},
	{-2211.43237, -2304.59375, 30.67851, 319.71246},
	{-2179.60938, -2439.28833, 30.63677, 168.18430},
	{-2093.67310, -2331.63745, 30.70100, 38.26497},
	{-2105.86133, -2341.20361, 30.70100, 38.26497},
	{-2130.71118, -2323.67578, 30.70100, 142.44382},
	{-2181.07227, -2304.10449, 30.70100, 310.04135},
	{-2188.18335, -2339.80054, 38.02566, 40.53906},
	{-2189.27783, -2332.93921, 35.24517, 40.53906},
	{-2173.59399, -2318.02124, 37.84273, 280.20886},
	{-2202.68140, -2303.88135, 34.78531, 300.38565},
	{-2213.93042, -2295.87085, 35.91270, 300.38565},
	{-2192.62622, -2261.54272, 30.63677, 240.84180},
	{-2168.94995, -2346.52368, 30.63677, 240.84180},
	{-2197.76807, -2375.07300, 30.63677, 277.13220},
	{-2165.98218, -2386.64111, 30.63677, 113.25833},
	{-2144.35107, -2457.92651, 30.86865, 235.79747},
	{-2149.43872, -2444.68506, 30.86865, 235.79747},
	{-2151.38086, -2451.31982, 33.94315, 127.20169},
	{-2109.15527, -2425.93945, 30.66971, 326.67514},
	{-2084.12451, -2426.74194, 35.17632, 78.19998},
	{-2056.22437, -2438.35083, 30.71646, 98.57742},
	{-2072.07275, -2451.38525, 34.77871, 69.30090},
	{-2113.69751, -2462.36523, 34.24006, 235.79747},
	{-2084.49121, -2446.80493, 30.71646, 136.74751},
	{-2051.42163, -2454.21167, 30.71646, 136.74751},
	{-2048.29468, -2462.61621, 30.71646, 136.74751},
	{-2033.07178, -2453.86377, 30.71646, 136.74751},
	{-2032.09595, -2415.71265, 30.71646, 136.74751},
	{-2071.25098, -2396.70410, 30.71646, 136.74751},
	{-2047.33862, -2375.65820, 30.71646, 136.74751},
	{-1994.96899, -2423.58276, 30.71646, 136.74751},
	{-1969.22095, -2430.91284, 30.71646, 179.95726},
	{-1953.93201, -2434.40161, 32.67793, 130.59285},
	{-1977.92761, -2413.78125, 36.99213, 130.59285},
	{-1988.16174, -2406.26318, 36.50816, 130.59285},
	{-2003.08032, -2384.83203, 36.50816, 130.59285},
	{-2020.57385, -2375.85376, 36.08141, 130.59285},
	{-2040.83545, -2358.02734, 41.02678, 132.91679},
	{-2038.58472, -2334.42993, 41.02678, 132.91679},
	{-2033.09973, -2344.62231, 41.02678, 132.91679},
	{-2253.31226, -2435.26831, 31.75803, 232.45810},
	{-2288.40576, -2450.79834, 25.96243, 286.10468},
	{-2256.74854, -2494.85107, 29.23276, 286.10468},
	{-2234.18384, -2554.06592, 32.18678, 286.10468},
	{-2234.51147, -2574.91455, 32.18678, 41.31186},
	{-2254.29590, -2564.85571, 32.18678, 271.62231},
	{-2160.72607, -2559.44946, 30.75230, 146.64183},
	{-2128.38135, -2589.20435, 35.15588, 146.64183},
	{-2120.65015, -2563.83813, 32.69402, 146.64183},
	{-2054.68359, -2558.93921, 30.71646, 136.74751},
	{-2025.41138, -2559.53857, 31.13374, 136.74751},
	{-2007.55994, -2511.53491, 33.19740, 136.74751},
	{-1987.84644, -2476.54077, 31.57828, 136.74751},
	{-2067.13696, -2458.89966, 30.71646, 136.74751},
	{-2113.00610, -2406.35352, 31.37599, 298.42615},
	{-2104.06641, -2427.03516, 35.17632, 326.67514},
	{-2092.24292, -2347.52563, 30.71646, 129.73286},
	{-2100.64209, -2341.19946, 34.95667, 106.39890},
	{-2079.98877, -2312.59546, 30.70100, 60.94207},
	{-2160.14795, -2288.18262, 36.07620, 57.40744},
	{-2155.29663, -2299.62964, 36.07620, 57.40744},
	{-2136.81982, -2269.13794, 37.20150, 91.40175},
	{-2159.43896, -2278.26001, 37.20150, 277.68613},
	{-2149.31372, -2285.68384, 37.20150, 349.92389},
	{-2149.97778, -2254.78833, 30.73878, 57.40744},
	{-2125.06567, -2267.28149, 30.73878, 57.40744},
	{-2105.68628, -2276.46484, 30.71646, 22.58942},
	{-2114.25562, -2240.67310, 30.71646, 289.97668},
	{-2241.33008, -2308.36475, 30.22208, 229.99284},
	{-2235.55420, -2322.90186, 30.62812, 229.99284},
	{-2223.88086, -2310.11768, 30.62812, 229.99284},
	{-2210.37915, -2314.45166, 30.62812, 229.99284},
	{-2205.97314, -2264.92407, 30.62812, 117.25280},
	{-2224.50220, -2300.21997, 30.62812, 229.99284},
	{-2247.55786, -2301.06006, 29.75556, 229.99284},
	{-2202.97266, -2245.04468, 30.83777, 240.84180},
	{-2200.65210, -2331.63428, 36.93696, 40.53906},
	{-2214.22852, -2383.11938, 31.85211, 232.45810},
	{-2191.02319, -2429.79907, 35.65390, 232.25710},
	{-2218.38599, -2391.75537, 36.37007, 232.45810},
	{-2196.08740, -2420.34131, 35.65390, 232.25710},
	{-2181.49121, -2434.38745, 35.65390, 232.25710},
	{-2136.41479, -2436.07349, 36.37119, 235.79747},
	{-2100.38916, -2472.29834, 34.24006, 235.79747},
	{-2104.88647, -2482.59058, 30.76459, 235.79747},
	{-2165.09766, -2523.34961, 30.55647, 323.19662},
	{-2059.56738, -2356.11597, 30.71646, 136.74751},
	{-1947.89246, -2425.33252, 30.71646, 136.74751},
	{-2042.07275, -2326.61182, 30.71646, 136.74751},
	{-2025.66077, -2336.37500, 30.71646, 136.74751},
	{-2002.12085, -2365.99683, 30.71646, 136.74751},
	{-2011.94641, -2351.77124, 30.71646, 136.74751},
	{-1982.66309, -2390.64624, 30.71646, 136.74751},
	{-1951.68152, -2412.42041, 30.71646, 136.74751},
	{-2161.19214, -2512.23828, 30.55647, 323.19662},
	{-2144.46973, -2482.59717, 30.55647, 323.19662},
	{-2166.81055, -2436.33936, 30.55647, 323.19662},
	{-2127.96802, -2416.66699, 30.66053, 323.19662},
	{-2130.32495, -2402.82837, 30.66053, 323.19662},
	{-2176.66382, -2414.94824, 35.28918, 229.99284}
};

new GGTDM_LeadingTeam;
new GGTDMWEAPONS[6][2]={{24,100},{25,25},{32,75},{31,100},{33,25},{9,1}};
new GGTDM_MSG[150];

/* Forwards */
	forward Event_EntranceFee(playerid, cost);

	/* Area 51 */
	
	forward area51_EventStart(playerid);
	forward area51_PlayerJoinEvent(playerid);
	forward area51_PlayerLeftEvent(playerid);
	forward area51_OneSecond();
	
	/* Army vs. Terrorists */
	
	forward army_EventStart(playerid);
	forward army_PlayerJoinEvent(playerid);
	forward army_PlayerLeftEvent(playerid);
	forward army_OneSecond();
	
	/* Big Smoke */
	
	forward bs_EventStart(playerid);
	forward bs_PlayerJoinEvent(playerid);
	
	/* Brawl */
	
	forward brawl_EventStart(playerid);
	forward brawl_PlayerJoinEvent(playerid);
	
	/* Compound */
	
	forward compound_EventStart(playerid);
	forward compound_PlayerJoinEvent(playerid);
	forward compound_PlayerLeftEvent(playerid);
	forward compound_OneSecond();
	
	/* Drug Run */
	
	forward drugrun_EventStart(playerid);
	forward drugrun_PlayerJoinEvent(playerid);
	forward drugrun_PlayerLeftEvent(playerid);
	forward drugrun_OneSecond();
	
	/* Hydra */
	
	forward hydra_EventStart(playerid);
	forward hydra_PlayerJoinEvent(playerid);
	forward hydra_PlayerLeftEvent(playerid);
	forward hydra_OneSecond();
	
	/* Jeff TDM */
	
	forward jefftdm_EventStart(playerid);
	forward jefftdm_PlayerJoinEvent(playerid);
	forward jefftdm_PlayerLeftEvent(playerid);
	forward jefftdm_OneSecond();
	
	/* Mad Doggs */
	
	forward md_EventStart(playerid);
	forward md_PlayerJoinEvent(playerid);
	
	/* Minigun */
	
	forward minigun_EventStart(playerid);
	forward minigun_PlayerJoinEvent(playerid);
	forward minigun_PlayerLeftEvent(playerid);
	forward minigun_OneSecond();
	
	/* Navy vs. Terrorists */
	
	forward navy_EventStart(playerid);
	forward navy_PlayerJoinEvent(playerid);
	forward navy_PlayerLeftEvent(playerid);
	forward navy_OneSecond();
	
	/* Oil Rig */
	
	forward oilrig_EventStart(playerid);
	forward oilrig_PlayerJoinEvent(playerid);
	forward oilrig_PlayerLeftEvent(playerid);
	forward oilrig_OneSecond();
	
	/* Pursuit */
	
	forward pursuit_EventStart(playerid);
	forward pursuit_PlayerJoinEvent(playerid);
	forward pursuit_PlayerLeftEvent(playerid);
	forward EndPursuit();
	forward pursuit_OneSecond();
	forward Random_Pursuit_Vehicle();
	
	forward hspursuit_EventStart(playerid);
	forward hspursuit_PlayerJoinEvent(playerid);
	forward hspursuit_PlayerLeftEvent(playerid);
	forward EndHSPursuit();
	forward hspursuit_OneSecond();
	forward RandomHS_Pursuit_Vehicle();
	
	/* Sumo */
	
	forward monster_EventStart(playerid);
	forward monster_PlayerJoinEvent(playerid);

	forward banger_EventStart(playerid);
	forward banger_PlayerJoinEvent(playerid);
	
	forward sandking_EventStart(playerid);
	forward sandking_PlayerJoinEvent(playerid);
	
	forward sandkingR_EventStart(playerid);
	forward sandkingR_PlayerJoinEvent(playerid);
	
	forward derby_EventStart(playerid);
    forward derby_PlayerJoinEvent(playerid);
    
   	forward sumo_PlayerLeftEvent(playerid);
   	forward sumo_OneSecond();
   	
   	/* Plane */
   	
   	forward plane_EventStart(playerid);
   	forward plane_PlayerJoinEvent(playerid);
   	forward plane_PlayerLeftEvent(playerid);
   	forward plane_OneSecond();
	
	/* Construction */
	
	forward construction_EventStart(playerid);
	forward construction_PlayerJoinEvent(playerid);
	forward construction_PlayerLeftEvent(playerid);
	forward construction_OneSecond();
	
	/* Labyrinth of Doom */
	
	forward lod_EventStart(playerid);
	forward lod_PlayerJoinEvent(playerid);
	forward lod_PlayerLeftEvent(playerid);
	forward lod_OneSecond();
	
	/* HotLava */
	forward HotLava_EventStart(playerid);
	forward HotLava_PlayerJoinEvent(playerid);
	forward HotLava_PlayerLeftEvent(playerid);
	forward HotLava_OneSecond();
	forward HotLava_CreateObjects();
	forward HotLava_SetDisco(Object_ID, ONOFF);
	forward HotLava_StarterDisco();
	forward Timer_Delete1Disco();
	forward Timer_RotateHotLavaPickups();
	forward HotLava_PickNewDisco(OldFloor);
	forward HotLava_SetDisco(Object_ID, ONOFF);
	forward HotLava_CreatePickups();
	forward HotLava_RotatePickups();
	forward HotLava_DeletePickups();
	forward HotLava_DeleteObjects();
	
	/* Domination */
	forward domination_EventStart(playerid);
	forward domination_PlayerJoinEvent(playerid);
	forward domination_PlayerDied(playerid);
	forward domination_PlayerLeftEvent(playerid);
	forward domination_OneSecond();
	forward domination_PlayerRespawn(playerid);

	/*Gun Game */
	forward GG_EventStart(playerid);
	forward GG_EventJoin(playerid);
	forward GG_LeaveEvent(playerid);
	forward GG_RejoinPlayer(playerid);
	forward GG_PlayerDeath(playerid, killerid, reason);
	forward GG_OnPlayerUpdate(playerid);

	/*Zombie vs Civilian*/
	forward Zombie_EventStart(playerid);
	forward Zombie_OnPlayerTakeDamage(playerid, issuerid, weaponid);
	forward Zombie_PlayerLeftEvent(playerid);
	forward Zombie_PlayerJoinEvent(playerid);
	forward Zombie_OneSecond();
	forward Zombie_PlayerDeath(playerid);
	
	/*JetPack TDM*/
	forward JPTDM_EventStart(playerid);
	forward JPTDM_PlayerLeftEvent(playerid);
	forward JPTDM_PlayerJoinEvent(playerid);
	forward JPTDM_OneSecond();
	
	/*One Shot Kill*/
	forward OSKill_EventStart(playerid);
	forward OSKill_PlayerLeftEvent(playerid);
	forward OSKill_PlayerKillPlayer(playerid, killerid);
	forward OSKill_PlayerJoinEvent(playerid);
	forward OSKill_OneSecond();
	
	/*GunGame TDM*/
	forward GGTDM_PlayerJoinEvent(playerid);
	forward GGTDM_PlayerReJoinEvent(playerid);
	forward GGTDM_EventEnd();
	forward GGTDM_PlayerDeath(playerid,killerid);
	forward GGTDM_PlayerLeave(playerid);
	forward GGTDM_PlayerStart(playerid);
	forward GGTDM_OneSecond();
	forward GGTDM_EditTeam_TextDraw(GGTDM_TeamID);
	forward GGTDM_EditLeader_TextDraw();
	forward GGTDM_CreateTextDraws();
	
/* Callbacks */

hook OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new string[128];
	if(rotate_pickups_lod <= 0)
	{
		rotate_pickups_lod = LOD_EVENT_SLOTS-1;
	}
	/* Labyrinth of Doom */
	if(pickupid >= LOD_Pickups[0] && pickupid <= LOD_Pickups[23] && Event_ID == LOD)
	{
		if(pickupid ==  LOD_Pickups[0])
		{
			if(GetPVarInt(playerid, "PlayerStatus") == 1)
			{
				new Float:armour;
				GivePlayerWeapon(playerid, 38, 250);
				Maze_Killer = playerid;
				DestroyDynamicPickup(LOD_Pickups[0]);
				SetPlayerColor(playerid, 0xFFFFFF00);
				GetPlayerArmour(playerid, armour);
				if(armour+50 >= 100)
				{
					SetPlayerArmour(playerid, 99);
				}
				else
				{
					SetPlayerArmour(playerid, armour+50);
				}
				SetPlayerSkin(playerid, 149);
				format(string, sizeof(string), "[EVENT]: %s(%d) has found the minigun and is now the maze killer! He is invisible for 30 seconds, avoid at all cost!", PlayerName(playerid), playerid);
				SendClientMessageToAll(COLOR_GREEN, string);
				Timer_MazeKiller = SetTimer("LOD_MazeKillerTimer", 30000, false);	// 30 seconds
			}
		}
		else if(pickupid == LOD_Pickups[1])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[1][0], LOD_Pickups_Wpns[1][1]);
			DestroyDynamicPickup(LOD_Pickups[1]);
			LOD_Pickups[1] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[1][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[2])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[2][0], LOD_Pickups_Wpns[2][1]);
			DestroyDynamicPickup(LOD_Pickups[2]);
			LOD_Pickups[2] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[2][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[3])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[3][0], LOD_Pickups_Wpns[3][1]);
			DestroyDynamicPickup(LOD_Pickups[3]);
			LOD_Pickups[3] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[3][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[4])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[4][0], LOD_Pickups_Wpns[4][1]);
			DestroyDynamicPickup(LOD_Pickups[4]);
			LOD_Pickups[4] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[4][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[5])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[5][0], LOD_Pickups_Wpns[5][1]);
			DestroyDynamicPickup(LOD_Pickups[5]);
			LOD_Pickups[5] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[5][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[6])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[6][0], LOD_Pickups_Wpns[6][1]);
			DestroyDynamicPickup(LOD_Pickups[6]);
			LOD_Pickups[6] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[6][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[7])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[7][0], LOD_Pickups_Wpns[7][1]);
			DestroyDynamicPickup(LOD_Pickups[7]);
			LOD_Pickups[7] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[7][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[8])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[8][0], LOD_Pickups_Wpns[8][1]);
			DestroyDynamicPickup(LOD_Pickups[8]);
			LOD_Pickups[8] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[8][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[9])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[9][0], LOD_Pickups_Wpns[9][1]);
			DestroyDynamicPickup(LOD_Pickups[9]);
			LOD_Pickups[9] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[9][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[10])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[10][0], LOD_Pickups_Wpns[10][1]);
			DestroyDynamicPickup(LOD_Pickups[10]);
			LOD_Pickups[10] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[10][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[11])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[11][0], LOD_Pickups_Wpns[11][1]);
			DestroyDynamicPickup(LOD_Pickups[11]);
			LOD_Pickups[11] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[11][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[12])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[12][0], LOD_Pickups_Wpns[12][1]);
			DestroyDynamicPickup(LOD_Pickups[12]);
			LOD_Pickups[12] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[12][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[13])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[13][0], LOD_Pickups_Wpns[13][1]);
			DestroyDynamicPickup(LOD_Pickups[13]);
			LOD_Pickups[13] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[13][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[14])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[14][0], LOD_Pickups_Wpns[14][1]);
			DestroyDynamicPickup(LOD_Pickups[14]);
			LOD_Pickups[14] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[14][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[15])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[15][0], LOD_Pickups_Wpns[15][1]);
			DestroyDynamicPickup(LOD_Pickups[15]);
			LOD_Pickups[15] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[15][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[16])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[16][0], LOD_Pickups_Wpns[16][1]);
			DestroyDynamicPickup(LOD_Pickups[16]);
			LOD_Pickups[16] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[16][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[17])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[17][0], LOD_Pickups_Wpns[17][1]);
			DestroyDynamicPickup(LOD_Pickups[17]);
			LOD_Pickups[17] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[17][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[18])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[18][0], LOD_Pickups_Wpns[18][1]);
			DestroyDynamicPickup(LOD_Pickups[18]);
			LOD_Pickups[18] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[18][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[19])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[19][0], LOD_Pickups_Wpns[19][1]);
			DestroyDynamicPickup(LOD_Pickups[19]);
			LOD_Pickups[19] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[19][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[20])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[20][0], LOD_Pickups_Wpns[20][1]);
			DestroyDynamicPickup(LOD_Pickups[20]);
			LOD_Pickups[20] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[20][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[21])
		{
			GivePlayerWeapon(playerid, LOD_Pickups_Wpns[21][0], LOD_Pickups_Wpns[21][1]);
			DestroyDynamicPickup(LOD_Pickups[21]);
			LOD_Pickups[21] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[21][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[22])
		{
			new Float:health;
			GetPlayerHealth(playerid, health);
			if(health+20 >= 100)
			{
				SetPlayerHealth(playerid, 99);
			}
			else
			{
				SetPlayerHealth(playerid, health+20);
			}
			DestroyDynamicPickup(LOD_Pickups[22]);
			LOD_Pickups[22] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[22][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
		else if(pickupid == LOD_Pickups[23])
		{
			new Float:armour;
			GetPlayerArmour(playerid, armour);
			if(armour+20 >= 100)
			{
				SetPlayerArmour(playerid, 99);
			}
			else
			{
				SetPlayerArmour(playerid, armour+20);
			}
			SetPlayerArmour(playerid, armour+50);
			DestroyDynamicPickup(LOD_Pickups[23]);
			LOD_Pickups[23] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[23][0]), 19, LODSpawns[rotate_pickups_lod][0], LODSpawns[rotate_pickups_lod][1], LODSpawns[rotate_pickups_lod][2], 1400, 15, -1, 100);
			rotate_pickups_lod--;
		}
	}
	/* HotLava */
	if(pickupid >= HotLava_Pickups[0][0] && pickupid <= HotLava_Pickups[HOTLAVA_PICKUPS-1][0] && Event_ID == HOTLAVA)
	{
		if(pickupid == HotLava_Pickups[0][0])
		{
			if(HotLava_Pickups[0][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[0][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[0][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[0][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[0][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[1][0])
		{
			if(HotLava_Pickups[1][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[1][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[1][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[1][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[1][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[2][0])
		{
			if(HotLava_Pickups[2][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[2][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[2][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[2][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[2][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[3][0])
		{
			if(HotLava_Pickups[3][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[3][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[3][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[3][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[3][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
		else if (pickupid == HotLava_Pickups[4][0])
		{
			if(HotLava_Pickups[4][2] == 5)
			{
				GivePlayerWeapon(playerid, 5, 1);
			}
			else if(HotLava_Pickups[4][2] == 16)
			{
				GivePlayerWeapon(playerid, 16, 1);
			}
			else if(HotLava_Pickups[4][2] == 39)
			{
				GivePlayerWeapon(playerid, 40, 1);
				GivePlayerWeapon(playerid, 39, 1);
			}
			else if(HotLava_Pickups[4][2] == 41)
			{
				GivePlayerWeapon(playerid, 41, 100);
			}
			else if(HotLava_Pickups[4][2] == 42)
			{
				GivePlayerWeapon(playerid, 42, 100);
			}
		}
	}
	Dr_OnPlayerPickUpDynamicPickup(playerid, pickupid);
	
	return 1;
}

forward event_OnGameModeInit();
public event_OnGameModeInit()
{
	//SetTimer("Event_OneSecond", 1000, true);
	foreach(new i : Player)
	{
	    EventDrugDelay[i] = -1;
	    Event_Players[i] = -1;
	}
	GGTDM_CreateTextDraws();
	return 1;
}

hook OnGameModeExit()
{
	TextDrawDestroy(GGTDMLeadTeam);
	TextDrawDestroy(GGTDMTeams[0][TeamText]);
	TextDrawDestroy(GGTDMTeams[1][TeamText]);
	return 1;
}

hook OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == DIALOG_EVENTS)
	{
	    if(!response)
	    {
	        return 1;
	    }

	    DialogIDOption[playerid] = listitem;

	    switch(listitem)
	    {
	        case MADDOGG:
	        {
	            ShowPlayerDialog(playerid, DIALOGID_MDWEAPON, DIALOG_STYLE_INPUT, "Event Options", "Which weapon should be used?", "Confirm", "Close");
	        }

	        case BIGSMOKE:
	        {
	            ShowPlayerDialog(playerid, DIALOGID_MDWEAPON, DIALOG_STYLE_INPUT, "Event Options", "Which weapon should be used?", "Confirm", "Close");
	        }

	        case MINIGUN:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(MINIGUN, playerid);
	        }

	        case BRAWL:
	        {
	            if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(BRAWL, playerid);
	        }

	        case HYDRA:
	        {
	            if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(HYDRA, playerid);
	        }

	        case JEFFTDM:
	        {
            	if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(JEFFTDM, playerid);
	        }

	        case AREA51:
	        {
            	if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(AREA51, playerid);
	        }

	        case ARMYVSTERRORISTS:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(ARMYVSTERRORISTS, playerid);
	        }

	        case NAVYVSTERRORISTS:
	        {
	            if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

				EventStart(NAVYVSTERRORISTS, playerid);
	        }

	        case COMPOUND:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(COMPOUND, playerid);
	        }

	        case OILRIG:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(OILRIG, playerid);
	        }

	        case DRUGRUN:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(DRUGRUN, playerid);
	        }

	        case MONSTERSUMO:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(MONSTERSUMO, playerid);
	        }

	        case BANGERSUMO:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(BANGERSUMO, playerid);
	        }

	        case SANDKSUMO:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(SANDKSUMO, playerid);
	        }

	        case SANDKSUMORELOADED:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(SANDKSUMORELOADED, playerid);
	        }

	        case DESTRUCTIONDERBY:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(DESTRUCTIONDERBY, playerid);
	        }

	        case PURSUIT:
	        {
				if(Event_InProgress != -1)
				{
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
				}

	            EventStart(PURSUIT, playerid);
	        }
	        
	        case HIGHSPEEDPURSUIT:
	        {
	            if(Event_InProgress != -1)
	            {
					SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
					return 1;
	            }
	            EventStart(HIGHSPEEDPURSUIT, playerid);
	        }
	        
	        case PLANE:
			{
			    if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    
			    EventStart(PLANE, playerid);
			}
			
			case CONSTRUCTION:
			{
			    if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    
			    EventStart(CONSTRUCTION, playerid);
			}
			
			case LOD:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(LOD, playerid);
			}
			case HOTLAVA:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(HOTLAVA, playerid);
			}
			case EVENT_DRACE:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(EVENT_DRACE, playerid);
			}
			case DOMINATION:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: This is disabled till it's finished :)");
			    //EventStart(DOMINATION, playerid);
			}
			case GUNGAME:
			{
			    if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }

			    EventStart(GUNGAME, playerid);
			}
			case CEM:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    return cmd_cem(playerid, "");
			}
			case ZOMVCIV:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(ZOMVCIV, playerid);
			}
			case JETPACKTDM:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(JETPACKTDM, playerid);
			}
			case ONESHOTKILL:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(ONESHOTKILL, playerid);
			}
			case GUNGAMETDM:
			{
				if(Event_InProgress != -1)
			    {
			        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
			        return 1;
			    }
			    EventStart(GUNGAMETDM, playerid);
			}
	    }
	}

	else if(dialogid == DIALOG_REJOINABLE)
	{
 	    if(response)
	    {
	        FoCo_Event_Rejoin = 1;
			foreach(Player, i)
			{
				FoCo_Event_Died[i] = 0;
			}
	    }

	    else
	    {
			FoCo_Event_Rejoin = 0;

			foreach(Player, i)
			{
				FoCo_Event_Died[i] = 0;
			}
	    }

	    if(Event_InProgress != -1)
	    {
	        return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: An event is already in progress.");
	    }

    	EventStart(DialogIDOption[playerid], playerid);
	}

	else if(dialogid == DIALOGID_MDWEAPON)
	{
	    if(!response)
		{
			return 1;
		}

		if(strval(inputtext) > 39 || strval(inputtext) < 1)
		{
			SendClientMessage(playerid, COLOR_WARNING, "Invalid value");
			return 1;
		}

		FFAWeapons = strval(inputtext);


		ShowPlayerDialog(playerid, DIALOG_FFAARMOUR, DIALOG_STYLE_MSGBOX, "Event Armour", "Should players spawn with armour or not?", "Yes", "No");

	}

	else if(dialogid == DIALOG_FFAARMOUR)
	{
		if(response)
		{
		    FFAArmour = 1;
		}

		else
		{
		    FFAArmour = 0;
		}

	    ShowPlayerDialog(playerid, DIALOG_REJOINABLE, DIALOG_STYLE_MSGBOX, "Event Rejoinable", "Should this event be rejoinable after death or not?", "Yes", "No");
	}
	return 1;
}

forward event_OnPlayerConnect(playerid);
public event_OnPlayerConnect(playerid)
{
	if(Event_InProgress > -1 && Event_InProgress < 2)
	{
		cmd_currentevent(playerid);
	}
    return 1;
}

forward event_OnPlayerDisconnect(playerid, reason);
public event_OnPlayerDisconnect(playerid, reason)
{
	if(Event_PlayerVeh[playerid] != -1)
	{
		DestroyVehicle(Event_PlayerVeh[playerid]);
		Event_PlayerVeh[playerid] = -1;
	}

	if(Event_ID != -1)
	{
		if(GetPVarInt(playerid, "InEvent") == 1)
		{
			PlayerLeftEvent(playerid);
		}
	}
	DR_OnPlayerDisconnect(playerid);
	return 1;
}


forward Get_FoCo_Event_Died(pid);
public Get_FoCo_Event_Died(pid)
{
	new temp = FoCo_Event_Died[pid];
	return temp;
}

forward Get_Event_InProgress();
public Get_Event_InProgress()
{
	return Event_InProgress;
}


public Edit_Event_InProgress(value)
{
	Event_InProgress = value;
	return 1;
}

forward Edit_FoCo_Event_Died(pid1, value);
public Edit_FoCo_Event_Died(pid1, value)
{
	FoCo_Event_Died[pid1] = value;
	return 1;
}

forward Edit_EventDelay(value);
public Edit_EventDelay(value)
{
	Event_Delay = value;
	return 1;
}

public Event_Currently_On()
{
	new temp = Event_ID;
	return temp;
}

forward Edit_Event_ID(eID);
public Edit_Event_ID(eID)
{
	Event_ID = eID;
	return 1;
}
forward event_OnPlayerSpawn(playerid);
public event_OnPlayerSpawn(playerid)
{
	switch(Event_ID)
	{
		case DOMINATION:
		{
			if(GetPVarInt(playerid, "PlayerStatus") == 1 && GetPVarInt(playerid, "InEvent") == 1)
			{
				domination_PlayerRespawn(playerid);	
			}
			return 2;
		}	
	}
	if(Event_PlayerVeh[playerid] != -1)
	{
		DestroyVehicle(Event_PlayerVeh[playerid]);
		Event_PlayerVeh[playerid] = -1;
	}
	
	if(GetPVarInt(playerid, "JustDied") == 1)
	{
	    if(GetPVarInt(playerid, "Resetskin") == 1)
	    {
	        SetPlayerSkin(playerid, oldskin[playerid]);
	    }
		SetPlayerSkin(playerid, GetDefaultSkin(playerid));
		SetPVarInt(playerid, "JustDied", 0);
	}
	return 1;
}

forward event_OnPlayerDeath(playerid, killerid, reason);
public event_OnPlayerDeath(playerid, killerid, reason)
{
	
	if(EventDrugDelay[playerid] != -1)
	{
		EventDrugDelay[playerid] = -1;
	}
	new didsomething = 0;
	if(Event_ID != -1)
	{
	    if(GetPVarInt(playerid, "PlayerStatus") == 1)
		{
			AddToEventKills(playerid, killerid);
			if(Event_ID == CEM)
			{
				CEM_OnPlayerDeath(playerid, killerid, reason);
				return 1;
			}
			if(Event_ID == EVENT_DRACE)
			{
				DR_PlayerDeath(playerid);
			}
			if(Event_ID == DOMINATION)
			{
				domination_PlayerDied(playerid);
				return 1;
			}
			if(Event_ID == GUNGAME)
			{
				GG_PlayerDeath(playerid, killerid, reason);
			}
			if(Event_ID == ZOMVCIV)
			{
			    Zombie_PlayerDeath(playerid);
			}
			if(Event_ID == ONESHOTKILL)
			{
			    OSKill_PlayerKillPlayer(playerid, killerid);
			}
			if(Event_ID == GUNGAMETDM)
			{
			    GGTDM_PlayerDeath(playerid,killerid);
			}
		    SetPVarInt(playerid, "InEvent", 0);
			SetPVarInt(playerid, "JustDied", 1);
			if(Event_ID == BIGSMOKE || Event_ID == MADDOGG || Event_ID == BRAWL)
			{
			    Event_Died[playerid]++;
       			FoCo_Event_Died[playerid]++;
				if(killerid != INVALID_PLAYER_ID)
				{
    				Event_Kills[killerid]++;
				    /* Checking if position 1, 2 and 3 have not yet been taken by anyone, aka that Position[0]etc == -1 */
				    if(Position[0] == -1 && Position[1] != killerid && Position[2] != killerid)
				    {
						Position[0] = killerid;
				    }
					else if(Position[1] == -1 && Position[0] != killerid && Position[2] != killerid)
					{
					    Position[1] = killerid;
					}
					else if(Position[2] == -1 && Position[0] != killerid && Position[1] != killerid)
					{
					    Position[2] = killerid;
					}
					else
					{
					    /* Checking if they have 1st, 2nd or 3rd already and if they should move up a rank */
					    if(killerid == Position[2])
					    {
					        if(Event_Kills[killerid] > Event_Kills[Position[1]])
					        {
					            new temp = Position[1];
								Position[1] = killerid;
								Position[2] = temp;
					        }
							if(Event_Kills[killerid] > Event_Kills[Position[0]])
							{
							    new temp = Position[0];
							    Position[0] = killerid;
							    Position[1] = temp;
							}
							didsomething = 0;
					    }
						if(killerid == Position[1] && didsomething == 0)
						{
						    if(Event_Kills[killerid] > Event_Kills[Position[0]])
						    {
						        new temp = Position[0];
						        Position[0] = killerid;
						        Position[1] = temp;
						    }
						    didsomething = 1;
						}
						if(killerid == Position[0])
						{
						    didsomething = 1;
						}
						/* All tests to check if player already is 1st, 2nd or 3rd done. Checking if they should get first, second or third below. */
						if(didsomething == 0)
						{
						    if(Position[2] != -1)
						    {
						        if(Event_Kills[killerid] > Event_Kills[Position[2]])
						        {
									Position[2] = killerid;
								}
								if(Position[1] != -1)
								{
									if(Event_Kills[killerid] > Event_Kills[Position[1]])
									{
									    new temp = Position[1];
									    Position[1] = killerid;
									    Position[2] = temp;
									}
									if(Position[0] != -1)
									{
									    if(Event_Kills[killerid] > Event_Kills[Position[0]])
									    {
									        new temp = Position[0];
									        new temp1 = Position[1];
									        Position[0] = killerid;
									        Position[1] = temp;
									        Position[2] = temp1;
									    }
									}
								}
						    }
						}
			 		}
				}
			}
			if((Event_ID == JEFFTDM || Event_ID == AREA51 || Event_ID == ARMYVSTERRORISTS || Event_ID == NAVYVSTERRORISTS || Event_ID == COMPOUND || Event_ID == OILRIG || Event_ID == DRUGRUN || Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT || Event_ID == PLANE) && killerid != INVALID_PLAYER_ID)
			{
			    if(killerid != INVALID_PLAYER_ID)
			    {
			        if(Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT)
			        {
			            if(playerid == FoCo_Criminal)
			            {
			                GiveAchievement(killerid, 79);
			            }
			        }
			        new TK1 = GetPVarInt(playerid, "MotelTeamIssued");
				    new TK2 = GetPVarInt(killerid, "MotelTeamIssued");
					if(TK1 == TK2)
					{
						new string[128];
						format(string, sizeof(string), "[Guardian]: %s has team killed %s in an event", PlayerName(killerid), PlayerName(playerid));
						SendAdminMessage(1, string);
					}
			    }
			}
			if(Event_ID == LOD)
			{
				if(killerid != INVALID_PLAYER_ID)
				{
					if(Maze_Killer != killerid)
					{
						new Float:health;
						new string[56];
						GetPlayerHealth(killerid, health);
						format(string, sizeof(string), "[INFO]: Rewarded +10HP for killing %s(%d)", PlayerName(playerid), playerid);
						SendClientMessage(killerid, COLOR_SYNTAX, string);
						if(health+10 >= 100)
						{
							SetPlayerHealth(killerid, 99);
						}
						else{
							SetPlayerHealth(killerid, health+10);
						}
					}
				}
			}
			if(killerid != INVALID_PLAYER_ID)
			{
				PlayerEventStats[killerid][kills]++;
			}
			PlayerLeftEvent(playerid);
		}
	}

	return 1;
}

hook OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
	if(GetPVarInt(issuerid, "InEvent") == 1)
	{
		PlayerEventStats[issuerid][damage] += amount;
	}
}

forward event_OnPlayerExitVehicle(playerid, vehicleid);
public event_OnPlayerExitVehicle(playerid, vehicleid)
{
    if(vehicleid == Event_PlayerVeh[playerid])
	{
		if(Event_ID == MONSTERSUMO || Event_ID == BANGERSUMO || Event_ID == SANDKSUMO || Event_ID == SANDKSUMORELOADED || Event_ID == DESTRUCTIONDERBY || Event_ID == HYDRA)
		{
			if(GetPVarInt(playerid, "InEvent") == 1)
			{
				SetPVarInt(playerid, "FellOffEvent", 1);
				PlayerLeftEvent(playerid);
				SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: You have been removed from the event for leaving your vehicle.");
			}
		}
	}
	Dr_OnPlayerExitVehicle(playerid, vehicleid);
		
	return 1;
}

forward event_OnPlayerEnterCheckpoint(playerid);
public event_OnPlayerEnterCheckpoint(playerid)
{
    if(Event_ID == DRUGRUN && GetPVarInt(playerid, "PlayerStatus") == 1 && GetPVarInt(playerid, "MotelTeamIssued") != 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_WARNING, "Get out of the vehicle!");
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, 1421.5542,2773.9951,10.8203, 4.0);
			return 1;
		}

		EventDrugDelay[playerid] = 60;
		SendClientMessage(playerid, COLOR_NOTICE, "Stay alive for sixty seconds to win!");
		/*ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 0, 0, 0);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 0, 0, 0);*/

		new string[128];

		format(string, sizeof(string), "%s has entered the checkpoint, kill him within 60 seconds!", PlayerName(playerid));

		SendEventPlayersMessage(string, COLOR_NOTICE);
	}
	else if(Event_ID == DOMINATION && GetPVarInt(playerid, "PlayerStatus") == 1 && GetPVarInt(playerid, "Team") != 0)
	{	
		DisablePlayerCheckpoint(playerid);
		GivePlayerWeapon(playerid, 46, 1); // Parachute
		SetPlayerVirtualWorld(playerid, 1400);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, domination_air_spawns[increment][0], domination_air_spawns[increment][1], domination_air_spawns[increment][2]);
		increment++;
	}
	return 1;
}

	/* Timers */

//forward Event_OneSecond();
/*task Event_OneSecond[1000]()
{
	else if(Event_Delay == 5)
	{	
		switch(Event_ID)
		{	
			case MINIGUN:
			{
				new freeSlots = MINIGUN_EVENT_SLOTS - Event_PlayersCount();
				if(freeSlots > 0)
				{
					for(new i = 0; i < freeSlots; i++)
					{
						minigun_PlayerJoinEvent(reservedSlotsQueue[i]);
					}
				}
			}
		}
	}

	return 1;
}
*/

timer EventDelay[1000]()
{
	Event_Delay--;
	if(Event_Delay <= 0)
	{		
		
		if(EventPlayersCount() <= 0)
		{
			foreach(Player, i)
			{
				if(GetPVarInt(i, "InEvent") == 1)
				{
					SendClientMessageToAll(COLOR_WARNING, "[Event ERROR]: Event has been ended due to a low amount of players participating.");
				}
			}
			stop DelayTimer;
			EndEvent();
		}
		
		
		else
		{
			Event_InProgress = 1;
		    
			stop DelayTimer;
			/*
			    Event_Bet_NoCanDo will allow for no further bets to be placed for the events.
			*/
			
			switch(Event_ID)
			{
				case MONSTERSUMO:
				{
					//Event_Bet_NoCanDo();
					sumo_OneSecond();
				} 
				case BANGERSUMO:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case SANDKSUMO:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case SANDKSUMORELOADED:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case DESTRUCTIONDERBY:
				{
                    //Event_Bet_NoCanDo();
                    sumo_OneSecond();
				} 
				case HYDRA:
				{
                    //Event_Bet_NoCanDo();
                    hydra_OneSecond();
				} 
				case JEFFTDM:
				{
                    //Event_Bet_NoCanDo();
                    jefftdm_OneSecond();
				} 
				case ARMYVSTERRORISTS:
				{
                    //Event_Bet_NoCanDo();
                    army_OneSecond();
				} 
				case MINIGUN:
				{
                    //Event_Bet_NoCanDo();
                    minigun_OneSecond();
				} 
				case DRUGRUN:
				{
                    //Event_Bet_NoCanDo();
                    drugrun_OneSecond();
				} 
				case PURSUIT:
				{
                    //Event_Bet_NoCanDo();
                    pursuit_OneSecond();
				} 
				case HIGHSPEEDPURSUIT:
				{
                    //Event_Bet_NoCanDo();
                    hspursuit_OneSecond();
				} 
				case AREA51:
				{
                    //Event_Bet_NoCanDo();
                    area51_OneSecond();
				} 
				case NAVYVSTERRORISTS:
				{
                    //Event_Bet_NoCanDo();
                    navy_OneSecond();
				} 
				case OILRIG:
				{
                    //Event_Bet_NoCanDo();
                    oilrig_OneSecond();
				} 
				case COMPOUND:
				{
                    //Event_Bet_NoCanDo();
                    compound_OneSecond();
				} 
				case PLANE:
				{
                    //Event_Bet_NoCanDo();
                    plane_OneSecond();
				} 
				case CONSTRUCTION:
				{
                    //Event_Bet_NoCanDo();
                    construction_OneSecond();
				}
				case LOD:
				{
					//Event_Bet_NoCanDo();
					lod_OneSecond();
				}
				case HOTLAVA:
				{
					HotLava_OneSecond();
				}
				case 24:
				{
					deathr_OneSecond();
				}
				case DOMINATION:
				{
					domination_OneSecond();
				}
				case ZOMVCIV:
				{
				    Zombie_OneSecond();
				}
				case JETPACKTDM:
				{
				    JPTDM_OneSecond();
				}
				case ONESHOTKILL:
				{
				    OSKill_OneSecond();
				}
				case GUNGAMETDM:
				{
				    GGTDM_OneSecond();
				}
			}
		}
	}

	else if(Event_Delay > 0)
	{
			
		new string[8];
		
		switch(Event_Delay)
		{
			case 5: format(string, sizeof(string), "~r~%d", Event_Delay);
			case 4: format(string, sizeof(string), "~r~~h~%d", Event_Delay);
			case 3: format(string, sizeof(string), "~y~%d", Event_Delay);
			case 2: format(string, sizeof(string), "~y~~h~%d", Event_Delay);
			case 1: format(string, sizeof(string), "~g~%d", Event_Delay);
		}
		
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				GameTextForPlayer(i, string, 1000, 3);
			}
		}
		
		if(Event_Delay == 5)
		{
			if(Event_ID == MONSTERSUMO || Event_ID == BANGERSUMO || Event_ID == SANDKSUMO || Event_ID == SANDKSUMORELOADED || Event_ID == DESTRUCTIONDERBY)
			{
				new
					Float:vehx,
					Float:vehy,
					Float:vehz,
					Float:vang;

				foreach(Player, i)
				{
					if(GetPVarInt(i, "InEvent") == 1)
					{
						GetPlayerPos(i, vehx, vehy, vehz);
						GetPlayerFacingAngle(i, vang);
						SetVehiclePos(Event_PlayerVeh[i], vehx, vehy, vehz);
						SetVehicleZAngle(i, vang);
						PutPlayerInVehicle(i, Event_PlayerVeh[i], 0);
						SetVehicleParamsEx(Event_PlayerVeh[i], false, false, false, true, false, false, false);
						TogglePlayerControllable(i, 0);
					}
				}
			}
		}
		
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				//SetCameraBehindPlayer(i);
				TogglePlayerControllable(i, 0);
			}
		}
	}
}

timer DrugDelay[1000]()
{
	foreach(Player, i)
	{
		if(EventDrugDelay[i] > -1)
		{
			if(EventDrugDelay[i] == 0)
			{
				SetPVarInt(i, "MotelTeamIssued", 0);
				EndEvent();
				increment = 0;
				SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Criminals succesfully dropped off the drugs!");
				EventDrugDelay[i] = -1;
				stop DrugDelayTimer;
				return 1;
			}

			EventDrugDelay[i]--;
		}
	}
	return 1;
}

timer PlaneFallCheck[1000]()
{
	foreach(Player, i)
	{
	    if(GetPVarInt(i, "InEvent") == 1 && GetPVarInt(i,"MotelTeamIssued") == 2)
	    {
	        if (!IsPlayerInAnyVehicle(i))
	        {
		        if(!IsPlayerInRangeOfPoint(i,100.0,1925.0658,-2493.0122,13.5391))
		        {
		            SetPlayerPos(i,1925.0658,-2493.0122,13.5391);
		        }
	        }
		}
	    else if(GetPVarInt(i, "InEvent") == 1 && GetPVarInt(i, "MotelTeamIssued") == 1)
	    {
	    	new Float:vx, Float:vy, Float:vz;
	        GetPlayerPos(i, vx,vy,vz);
		    if(IsPlayerInAnyVehicle(i))
		    {
		        SetPlayerPos(i, vx,vy,vz+10);
		        SendClientMessage(i, COLOR_WARNING, "You are not allowed to get in any vehicles!");
		    }
		    else if(vz < 67.2072)
		    {
				SetPlayerHealth(i,0);
				PlayerLeftEvent(i);
		    }
	    }
	}
}

timer SumoFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			new Float:vx, Float:vy, Float:vz;
			GetVehiclePos(Event_PlayerVeh[i], vx, vy, vz);
			if(vz < 8.0 || GetPlayerState(i) != PLAYER_STATE_DRIVER)
			{
			    SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);	
			}
		}
	}
}

timer HotLavaFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			new Float:vx, Float:vy, Float:vz;
			GetPlayerPos(i, vx, vy, vz);
			if(vz < 300.0)
			{
				SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);
			}
		}
	}
}

timer HydraFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
			{
			    SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);
			}
		}
	}
}

timer OilrigFallCheck[1000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			new Float:vx, Float:vy, Float:vz;
			GetPlayerPos(i, vx, vy, vz);
			if(vz < 5.0)
			{
				SetPVarInt(i, "FellOffEvent", 1);
				SetPlayerHealth(i, 0);
				PlayerLeftEvent(i);
			}
		}
	}
}

timer HydraEnd[480000]()
{
	EndEvent();
}

timer EndPursuit[300000]()
{
	SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal getting away!");
	GiveAchievement(FoCo_Criminal, 78);
	EndEvent();
	Motel_Team = 0;
}

timer EndHSPursuit[300000]()
{
	SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal getting away!");
	GiveAchievement(FoCo_Criminal, 78);
	EndEvent();
	Motel_Team = 0;
}

/* Functions */

	/* Main functions */
	
forward EventStart(type, playerid);
public EventStart(type, playerid)
{
	if(Event_InProgress != -1)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already an event running, end it first");
	}

    increment = 0;

	if(type != BIGSMOKE && type != MADDOGG && type != BRAWL && type != GUNGAME)
	{
		Event_Delay = 30;
		DelayTimer = repeat EventDelay();
		Event_FFA = 0;
	}
	
	/*
	for(new i = 0; i < VIP_EVENT_SLOTS; i++)
	{
		reservedSlotsQueue[i] = -1;
	}
	*/
	new string[52];
	format(string, sizeof(string), "Type: %d & domination: %d", type, DOMINATION);
	DebugMsg(string);
	new i;
	for(i = 0; i < MAX_EVENT_PLAYERS; i++)
	{
		EventPlayers[i] = -1;
	}
	EventCount = 0;
	switch(type)
	{
		case MADDOGG:
		{
            md_EventStart(playerid);
            Position[0] = -1;
            Position[1] = -1;
            Position[2] = -1;
            //Event_Bet_Start(0);
		} 
		case BIGSMOKE:
		{
			bs_EventStart(playerid);
			//Event_Bet_Start(1);
		} 
		case MINIGUN:
		{
            minigun_EventStart(playerid);
            //Event_Bet_Start(2);
		}
		case BRAWL:
		{
            brawl_EventStart(playerid);
            //Event_Bet_Start(3);
		}
		case GUNGAME: 
  		{
		    GG_EventStart(playerid);
		    //Event_Bet_Start(7);
		}
		case HYDRA:
		{
            hydra_EventStart(playerid);
            //Event_Bet_Start(4);
		} 
		case JEFFTDM: 
		{
		    jefftdm_EventStart(playerid);
		    //Event_Bet_Start(6);
		}
		case AREA51: 
  		{
		    area51_EventStart(playerid);
		    //Event_Bet_Start(7);
		}
		case ARMYVSTERRORISTS: 
		{
		    army_EventStart(playerid);
		    //Event_Bet_Start(8);
		}
		case NAVYVSTERRORISTS: 
		{
		    navy_EventStart(playerid);
		    //Event_Bet_Start(9);
		}
		case COMPOUND: 
		{
		    compound_EventStart(playerid);
		    //Event_Bet_Start(10);
		}
		case OILRIG: 
		{
		    oilrig_EventStart(playerid);
		    //Event_Bet_Start(11);
		}
		case DRUGRUN: 
		{
		    drugrun_EventStart(playerid);
		    //Event_Bet_Start(12);
		}
		case MONSTERSUMO: 
		{
		    monster_EventStart(playerid);
		    //Event_Bet_Start(13);
		}
		case BANGERSUMO: 
		{
		    banger_EventStart(playerid);
		    //Event_Bet_Start(14);
		}
		case SANDKSUMO: 
		{
		    sandking_EventStart(playerid);
		    //Event_Bet_Start(15);
		}
		case SANDKSUMORELOADED: 
		{
		    sandkingR_EventStart(playerid);
		    //Event_Bet_Start(16);
		}
		case DESTRUCTIONDERBY: 
		{
            derby_EventStart(playerid);
            //Event_Bet_Start(17);
		}
		case PURSUIT: 
		{
		    pursuit_EventStart(playerid);
		    //Event_Bet_Start(18);
		}
		case HIGHSPEEDPURSUIT: 
		{
		    hspursuit_EventStart(playerid);
		    //Event_Bet_Start(21);
		}
		case PLANE: 
		{
		    plane_EventStart(playerid);
		    //Event_Bet_Start(19);
		}
		case CONSTRUCTION: 
		{
            construction_EventStart(playerid);
            //Event_Bet_Start(20);
		}
		case LOD:
		{
			lod_EventStart(playerid);
		}
		case HOTLAVA:
		{
			HotLava_EventStart(playerid);
		}
		case EVENT_DRACE:
		{
			DR_EventStart(playerid);
		}
		case DOMINATION:
		{
			domination_EventStart(playerid);
		}
		case ZOMVCIV:
  		{
		    Zombie_EventStart(playerid);
		    //Event_Bet_Start(7);
		}
		case JETPACKTDM:
		{
		    JPTDM_EventStart(playerid);
		}
		case ONESHOTKILL:
		{
		    OSKill_EventStart(playerid);
		}
		case GUNGAMETDM:
  		{
		    GGTDM_PlayerStart(playerid);
		    //Event_Bet_Start(7);
		}
 	}
    ResetEKForEvent();
	SetEventTeamNames(type);
 	return 1;
}

forward PlayerJoinEvent(playerid);
public PlayerJoinEvent(playerid)
{
	DebugMsg("PlayerJoin..");
	/*if(EventPlayersCount() > 2-CountDonators(3))
	{
	    if(GetPVarInt(playerid, "Donation_Type") < 3)
	    {
			SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: The event is full and you're gay (gold VIP)");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: Using Donator slot!");
		}
	}*/
	
	if(FoCo_Event_Died[playerid] > 0 && FoCo_Event_Rejoin == 0)
	{
		SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is not rejoinable.");
	 	return 1;
 	}
	new string[56];
	format(string, sizeof(string), "Event_ID: %d", Event_ID);
	DebugMsg(string);
	switch(Event_ID)
	{
	    case MADDOGG: md_PlayerJoinEvent(playerid);
	    case BIGSMOKE: bs_PlayerJoinEvent(playerid);
	    case PLANE: plane_PlayerJoinEvent(playerid);
	    case MINIGUN: 
		{/*
			if(EventPlayersCount() < MINIGUN_EVENT_SLOTS - VIP_EVENT_SLOTS)
			{*/
				minigun_PlayerJoinEvent(playerid);
		/*	}
			
			else
			{
				if(IsVIP(playerid) == 3)
				{
					if(Event_PlayersCount() < MINIGUN_EVENT_SLOTS)
					{
						minigun_PlayerJoinEvent(playerid);
					}
					
					else
					{
						return SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: The event is full");
					}
				}
				
				else
				{
					for(new i = 0; i < VIP_EVENT_SLOTS; i++)
					{
						if(reservedSlotsQueue[i] == -1)
						{
							reservedSlotsQueue[i] = playerid;
							SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: Using reserved slot. You will join the event if this slot is free.");
							return 1;
						}
					}
					
					SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: Reserved slots queue is full, you can't join the event.");
					return 1;
				}
			}*/
			
		}
	    case BRAWL: brawl_PlayerJoinEvent(playerid);
		case GUNGAME:
		{
			if(AutoJoin[playerid] == 1)
			{
				GG_RejoinPlayer(playerid);
			}
			else
			{
				GG_EventJoin(playerid);
			}
		}
	    case HYDRA: hydra_PlayerJoinEvent(playerid);
	    case JEFFTDM: jefftdm_PlayerJoinEvent(playerid);
	    case AREA51: area51_PlayerJoinEvent(playerid);
	    case ARMYVSTERRORISTS: army_PlayerJoinEvent(playerid);
	    case NAVYVSTERRORISTS: navy_PlayerJoinEvent(playerid);
	    case COMPOUND: compound_PlayerJoinEvent(playerid);
	    case OILRIG: oilrig_PlayerJoinEvent(playerid);
	    case DRUGRUN: drugrun_PlayerJoinEvent(playerid);
	    case MONSTERSUMO: monster_PlayerJoinEvent(playerid);
		case BANGERSUMO: banger_PlayerJoinEvent(playerid);
		case SANDKSUMO: sandking_PlayerJoinEvent(playerid);
		case SANDKSUMORELOADED: sandkingR_PlayerJoinEvent(playerid);
		case DESTRUCTIONDERBY: derby_PlayerJoinEvent(playerid);
		case CONSTRUCTION:construction_PlayerJoinEvent(playerid);
		case PURSUIT:		
	    {
	        if(EventPlayersCount() == 26)
			{
	    		return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}

	        pursuit_PlayerJoinEvent(playerid);
	    }
	    case HIGHSPEEDPURSUIT:
	    {
	        if(EventPlayersCount() == 26)
	        {
	            return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
	        }
	        hspursuit_PlayerJoinEvent(playerid);
	    }
		case LOD: 
		{
			if(EventPlayersCount() == 50)
	        {
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			lod_PlayerJoinEvent(playerid);
		}
		case HOTLAVA: HotLava_PlayerJoinEvent(playerid);
		case EVENT_DRACE:
		{
			DR_EventJoin(playerid);
		}
		case DOMINATION: 
		{
			if(EventPlayersCount() == DOMINATION_EVENT_SLOTS)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			domination_PlayerJoinEvent(playerid);
		}
		case ZOMVCIV:
		{
			if(EventPlayersCount() == ZOMBIE_EVENT_SLOTS)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			Zombie_PlayerJoinEvent(playerid);
		}
		case JETPACKTDM:
		{
			if(EventPlayersCount() == JPTDM_EVENT_SLOTS)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			JPTDM_PlayerJoinEvent(playerid);
		}
		case ONESHOTKILL:
		{
			if(EventPlayersCount() == OSKill_EVENT_SLOTS)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[NOTICE]: The event is full.");
			}
			OSKill_PlayerJoinEvent(playerid);
		}
		case GUNGAMETDM:
		{
			if(AutoJoin[playerid] == 1)
			{
				GGTDM_PlayerReJoinEvent(playerid);
			}
			else
			{
				GGTDM_PlayerJoinEvent(playerid);
			}
		}
	}
 	
 	if(Event_ID == MADDOGG || Event_ID == BIGSMOKE)
 	{
 	    FoCo_Event_Died[playerid]++;
 	}
	
	SetPVarInt(playerid, "PlayerStatus", 1);
	SetPVarInt(playerid, "InEvent", 1);
	if(Event_ID != MADDOGG && Event_ID != BIGSMOKE && Event_ID != BRAWL && Event_ID != GUNGAME && Event_ID != CEM)
 	{
		EventPlayers[EventCount] = playerid;
		EventCount++;
  	}

	SetCameraBehindPlayer(playerid);
	
	PlayerEventStats[playerid][joinedevent] = 1;
	
	foreach(Player, i)
	{
		if(Event_Players[i] == -1)
		{
			Event_Players[i] = playerid;
			break;
		}
	}
	return 1;
}

forward PlayerLeftEvent(playerid);
public PlayerLeftEvent(playerid)
{
	if(GetPVarInt(playerid, "PlayerStatus") == 0)
	{
		return 1;
	}
	
	SetPlayerArmour(playerid, 0);
	SetPVarInt(playerid, "InEvent", 0);
	SetPVarInt(playerid, "PlayerStatus", 0);
	death[playerid] = 1;

	foreach(Player, i)
	{
		if(Event_Players[i] == playerid)
		{
			Event_Players[i] = -1;
			break;
		}
	}

	
	switch(Event_ID)
	{
	    case MINIGUN: minigun_PlayerLeftEvent(playerid);
	    case HYDRA: hydra_PlayerLeftEvent(playerid);
	    case JEFFTDM: jefftdm_PlayerLeftEvent(playerid);
	    case AREA51: area51_PlayerLeftEvent(playerid);
	    case ARMYVSTERRORISTS: army_PlayerLeftEvent(playerid);
	    case NAVYVSTERRORISTS: navy_PlayerLeftEvent(playerid);
	    case COMPOUND: compound_PlayerLeftEvent(playerid);
	    case OILRIG: oilrig_PlayerLeftEvent(playerid);
	    case DRUGRUN: drugrun_PlayerLeftEvent(playerid);
	    case MONSTERSUMO: sumo_PlayerLeftEvent(playerid);
	    case BANGERSUMO: sumo_PlayerLeftEvent(playerid);
	    case SANDKSUMO: sumo_PlayerLeftEvent(playerid);
	    case SANDKSUMORELOADED: sumo_PlayerLeftEvent(playerid);
		case DESTRUCTIONDERBY: sumo_PlayerLeftEvent(playerid);
		case PURSUIT: pursuit_PlayerLeftEvent(playerid);
		case HIGHSPEEDPURSUIT: hspursuit_PlayerLeftEvent(playerid);
		case PLANE: plane_PlayerLeftEvent(playerid);
		case CONSTRUCTION: construction_PlayerLeftEvent(playerid);
		case LOD: lod_PlayerLeftEvent(playerid);
		case HOTLAVA: HotLava_PlayerLeftEvent(playerid);
		case EVENT_DRACE: DR_LeaveEvent(playerid);
		case DOMINATION: domination_PlayerLeftEvent(playerid);
		case ZOMVCIV: Zombie_PlayerLeftEvent(playerid);
		case JETPACKTDM: JPTDM_PlayerLeftEvent(playerid);
		case ONESHOTKILL: OSKill_PlayerLeftEvent(playerid);
	}

	return 1;
}

forward EndEvent();
public EndEvent()
{
    Event_InProgress = -1;
	if(Event_ID == HYDRA)
	{
	    stop hydraTime;
		stop HydraFallCheckTimer;
	}
	
	else if(Event_ID == PURSUIT)
	{
		stop PursuitTimer;
		ForcedCriminal = -1;
	}
	else if(Event_ID == 24)
	{
		DR_EventEnd();
	}
	else if(Event_ID == HIGHSPEEDPURSUIT)
	{
	    stop HSPursuitTimer;
	    ForcedCriminal = -1;
	}
	
	else if(Event_ID == PLANE)
	{
	    stop PlaneFallCheckTimer;
	}
	
	else if(Event_ID == OILRIG)
	{
		stop OilrigFallCheckTimer;
	}
	
	else if(Event_ID == LOD)
	{
		new i;
		for(i = 0; i < MAX_LOD_PICKUPS; i++)
		{
			DestroyDynamicPickup(LOD_Pickups[i]);
			LOD_Pickups[i] = 0;
		}
		Maze_Killer = -1;
		KillTimer(Timer_MazeKiller);
	}
	else if(Event_ID == DOMINATION)
	{
		stop ZoneCaptureDomination;
		stop domination_TickDecreaserTimer;
		stop dom_AutoZoneDecreaserTimer;
	}
	
	else if(Event_ID == HOTLAVA)
	{
		stop HotLavaFallCheckTimer;
		stop HotLavaDiscoTimer;
		stop HotLavaDiscoRepeatTimer;
		KillTimer(Timer_Disco1D);
		KillTimer(Timer_RotateHLPickups);
		HotLava_DeleteObjects();
		HotLava_DeletePickups();
	}
	else if(Event_ID == GUNGAMETDM)
	{
	    GGTDM_EventEnd();
	}
	else if(Event_ID == MONSTERSUMO || Event_ID == BANGERSUMO || Event_ID == SANDKSUMO || Event_ID == SANDKSUMORELOADED || Event_ID == DESTRUCTIONDERBY)
	{
		stop SumoFallCheckTimer;
	}
	if(Event_ID == BIGSMOKE || Event_ID == MADDOGG)
	{
		foreach(Player, i)
		{
			AutoJoin[i] = 0;
		}
		if(Position[0] != -1)
		{
			GiveAchievement(Position[0], 83);
		}
		if(Position[1] != -1)
		{
			GiveAchievement(Position[1], 84);
		}
		if(Position[2] != -1)
		{
			GiveAchievement(Position[2], 85);
		}
		Position[0] = -1;
		Position[1] = -1;
		Position[2] = -1;
	}
	
	if(DelayTimer) stop DelayTimer;
	
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "InEvent") == 1 && death[i] == 0)
		{
		    if(Event_ID == JEFFTDM || Event_ID == ARMYVSTERRORISTS || Event_ID == DRUGRUN || 
			Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT || Event_ID == AREA51 || 
			Event_ID == NAVYVSTERRORISTS || Event_ID == OILRIG || Event_ID == COMPOUND || 
			Event_ID == PLANE || CONSTRUCTION || Event_ID == LOD || Event_ID == HOTLAVA)
		    {
		        SetPVarInt(i, "MotelTeamIssued", 0);
				SetPlayerSkin(i, GetPVarInt(i, "MotelSkin"));
				SetPlayerColor(i, GetPVarInt(i, "MotelColor"));

				if(Event_ID == NAVYVSTERRORISTS)
				{
				    DisablePlayerCheckpoint(i);
				}

				else if(Event_ID == PURSUIT)
				{
					SetPlayerMarkerForPlayer(i, FoCo_Criminal, GetPVarInt(FoCo_Criminal, "MotelColor"));
				}
				else if(Event_ID == CONSTRUCTION)
				{
					SetPVarInt(i, "Team",0);
				}
		    }
		    
		    if(Event_ID == ZOMVCIV)
			{
			    SetPlayerWeather(i, 0);
			}

		    if(Event_PlayerVeh[i] != -1)
			{
				DestroyVehicle(Event_PlayerVeh[i]);
				Event_PlayerVeh[i] = -1;
			}
			increment = 0;
			Motel_Team = 0;
			TogglePlayerControllable(i, 1);
		}
		if(GetPVarInt(i, "Team") > 0)
		{
			domination_PlayerLeftEvent(i);
		}
		
		if(GetPVarInt(i, "InEvent") == 1)
		{	
			if(IsPlayerInAnyVehicle(i))
			{
				RemovePlayerFromVehicle(i);
			}
			event_SpawnPlayer(i);
		}
	}
	if(Event_ID == GUNGAME)
	{
		foreach(Player, i)
		{
			TextDrawHideForPlayer(i, CurrLeader);
			TextDrawHideForPlayer(i, CurrLeaderName);
			TextDrawHideForPlayer(i, GunGame_MyKills[i]);
			TextDrawHideForPlayer(i, GunGame_Weapon[i]);
			GunGameKills[i] = 0;
		}
	}
	if(Event_ID == DRUGRUN || Event_ID == PURSUIT || Event_ID == HIGHSPEEDPURSUIT || Event_ID == NAVYVSTERRORISTS || Event_ID == COMPOUND || Event_ID == ARMYVSTERRORISTS || Event_ID == PLANE)
	{
		for(new i; eventVehicles[i] != 0; i++)
		{
			DestroyVehicle(eventVehicles[i]);
			eventVehicles[i] = 0;
		}
		Iter_Clear(Event_Vehicles);
	}

	if(Event_ID == JEFFTDM || Event_ID == ARMYVSTERRORISTS || Event_ID == DRUGRUN || Event_ID == AREA51 || Event_ID == NAVYVSTERRORISTS || Event_ID == OILRIG || Event_ID == COMPOUND || CONSTRUCTION)
	{
        Team1_Motel = 0;
		Team2_Motel = 0;
		Team1 = 0;
		Team2 = 0;
	}

	FoCo_Criminal = -1;
	Event_ID = -1;
	/*if(EventPlayersCount() > 0)
	{
	    foreach(Player, i)
	    {
				if(Event_Players[i] != -1)
				{
	        event_SpawnPlayer(Event_Players[i]);
	      }
	    }
	 */
	foreach(Player, i)
	{
		Event_Players[i] = -1;
	}
		

	// Bodge Job fix for some errors (existing and new).
	// Fixed a bug here where it sets PVarInt PlayerStatus for everyone . . . People in duels & AFK zone got fucked over. Gee thanks Shaney/Marcel or w/e - pEar
	foreach(Player, i)
	{
	    if(GetPVarInt(i, "PlayerStatus") == 1)
	    {
			SetPVarInt(i, "PlayerStatus", 0);
	    }
	    FoCo_Event_Died[i] = 0;
	    SetPVarInt(i, "InEvent", 0);
		AutoJoin[i] = 0; //AutoJoin Fix
	}
	increment = 0;
	
	if(lastEventWon != -1)
	{
		defer EventGift(lastEventWon);
		lastEventWon = -1;
	}
	
	/* Show event stats */
	
	
	/* Reset stats */
	
	foreach(Player, i)
	{
		PlayerEventStats[i][joinedevent] = 0;
		PlayerEventStats[i][kills] = 0;
		PlayerEventStats[i][damage] = 0;
		PlayerEventStats[i][pteam] = -1;
	}
	if(Event_FFA == 1)
	    DisplayEventLeader();
	return 1;
}


timer EventGift[7000](playerid)
{
    new ran = random(200);
    new string[150];
	switch(ran)
	{
		case 0..24: //5k 25% chance
		{
		    if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 5000);
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 5000);
				MoneyLog(moneystring);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $5000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 5000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 6000);
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 6000);
				MoneyLog(moneystring);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $6000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 6000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 6500);
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 6500);
				MoneyLog(moneystring);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $6500");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 6500$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 6000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $7500");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 7500);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 7500$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 25..35:    //10% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 7500);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $7500");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 7500);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 7500$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 9000);
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 9000);
				MoneyLog(moneystring);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $9000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 9000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 9750);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $9750");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 9750);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 9750$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 11250);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $11250");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 11250);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 11250$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 36..45:    //10% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 10000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $10000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 10000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 10000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 12000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $12000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 12000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 12000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 13000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $13000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 13000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 13000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 15000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $15000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 15000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 15000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 46..50:    //5% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 20000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $20000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 20000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 20000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 24000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $24000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 24000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 24000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 26000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $26000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 26000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 26000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 30000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $30000");
				new moneystring[256];
				format(moneystring, sizeof(moneystring), "%s(%d) gained %d$ from Event_Win.", PlayerName(playerid), playerid, 30000);
				MoneyLog(moneystring);
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 30000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 51..70:        //20% chance
		{
			SetPlayerArmour(playerid, 99);
			SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 100 armour");
		}
		case 71..80:        //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random Minigun.", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 150);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 175);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 200);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a minigun");
				GivePlayerWeapon(playerid, 38, 225);
			}
		}
		case 81..90:    //10% chance
		{
		    if(isVIP(playerid) < 1)
		    {
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 10;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 10 extra kills");
			}
			else if(isVIP(playerid) == 1)
			{
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 11;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 11 extra kills");
			}
			else if(isVIP(playerid) == 2)
			{
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 13;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 13 extra kills");
			}
			else if(isVIP(playerid) == 3)
			{
				FoCo_Playerstats[playerid][kills] = FoCo_Playerstats[playerid][kills] + 15;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 15 extra kills");
			}
		}
		case 91..100:       //10% chance
		{
		    if(isVIP(playerid) < 1)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 10;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 10 less deaths");
			}
			else if(isVIP(playerid) == 1)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 11;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 11 less deaths");
			}
			else if(isVIP(playerid) == 2)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 13;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 13 less deaths");
			}
			else if(isVIP(playerid) == 3)
		    {
				FoCo_Playerstats[playerid][deaths] = FoCo_Playerstats[playerid][deaths] - 15;
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted 15 less deaths");
			}
			
		}
		case 101..102:      //1% chance
		{
			if(isVIP(playerid) < 1)
		    {
				GivePlayerMoney(playerid, 50000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $50000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 50000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 1)
		    {
				GivePlayerMoney(playerid, 60000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $60000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 60000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 2)
		    {
				GivePlayerMoney(playerid, 65000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $65000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 65000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		    else if(isVIP(playerid) == 3)
		    {
				GivePlayerMoney(playerid, 75000);
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted $75000");
				format(string, sizeof(string), "[EVENT]: %s (%d) gained 75000$ due to winning an event.", PlayerName(playerid), playerid);
				MoneyLog(string);
		    }
		}
		case 103..113:      //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random RPG.", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 5);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 6);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 7);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 35, 8);
			}
		}
		case 114..120:      //7% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random heat-seeking RPG.", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 5);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 6);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 7);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an RPG");
				GivePlayerWeapon(playerid, 36, 8);
   			}
		}
		case 121..130:      // 10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random flamethrower", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 10);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 12);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 14);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted an flamethrower");
				GivePlayerWeapon(playerid, 37, 14);
   			}
		}
		case 131..140:      //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random grenades", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 5);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 6);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 7);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted grenades");
				GivePlayerWeapon(playerid, 16, 8);
   			}
		}
		case 141..150:      //10% chance
		{
			format(string, sizeof(string), "[NOTICE]: %s has won an event and won the random fire extinguisher", PlayerName(playerid));
			SendAdminMessage(1,string);
			SendClientMessageToAll(COLOR_WHITE, string);
			if(isVIP(playerid) < 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 15);
			}
			else if(isVIP(playerid) == 1)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 20);
			}
			else if(isVIP(playerid) == 2)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 25);
			}
			else if(isVIP(playerid) == 3)
			{
				SendClientMessage(playerid, COLOR_NOTICE, "[Event Gift]: For winning the event you have been gifted a fire extinguisher");
				GivePlayerWeapon(playerid, 42, 30);
   			}
		}
		default:
		{
			format(string, sizeof(string), "[Event Notice]: Unfortunately there was no reward for winning this event.");
            SendClientMessage(playerid, COLOR_NOTICE, string);
		}
	}

	return 1;
}

/* Event sub-functions */

/* Domination */

public domination_EventStart(playerid)
{
	new j;
	for(j = 0; j < DOMINATION_ZONES; j++)
	{
		dom_gangzones[j] = GangZoneCreate(domination_gangzones[j][0], domination_gangzones[j][1], domination_gangzones[j][2], domination_gangzones[j][3]);
		dom_zonestatus[j][0] = 0; // Capture status, 0 = neutral, 100 = blue team, -100 = red team
		dom_zonestatus[j][1] = 0;
		dom_zonestatus[j][2] = 0;
	}
	for(j = 0; j < DOMINATION_EVENT_SLOTS; j++)
	{
		dom_playercapture[j] = -1;
	}
    FoCo_Event_Rejoin = 0;
	event_count = 0;
	Team = 1;
	inc_t1 = 0;
	inc_t2 = 0;
	Team1 = 0;
	Team2 = 0;
	increment = 0;
	Event_ID = DOMINATION;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	event_start_message("Domination - US Airforce vs. Russian Mob", playerid, FFA_COST);
	
	Event_InProgress = 0;
	Event_Delay = 30;
	return 1;
}

public domination_PlayerJoinEvent(playerid)
{
	new i;
	DebugMsg("Reached dom playerjoin");
	SetPVarInt(playerid, "Dom_PID", event_count);
	event_count++;
	for(i = 0; i < 3; i++)
	{
		GangZoneShowForPlayer(playerid, dom_gangzones[i], COLOR_GREEN);
		GangZoneFlashForPlayer(playerid, dom_gangzones[i], COLOR_YELLOW);
	}
	new string[56];
	format(string, sizeof(string), "Military  Tickets: %d", Ticks);
	domination_textDraws[GetPVarInt(playerid, "Dom_PID")][0] = CreatePlayerTextDraw(playerid, 600.0, 420.0, string);
	format(string, sizeof(string), "Mobsters Tickets: %d", Ticks);
	domination_textDraws[GetPVarInt(playerid, "Dom_PID")][1] = CreatePlayerTextDraw(playerid, 600.0, 430.0, string);
	PlayerTextDrawColor(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][0], COLOR_BLUE);	// Blue
	PlayerTextDrawColor(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][1], COLOR_RED);	// Red


	for(i = 0; i < 2; i++)
	{
		PlayerTextDrawSetShadow(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i], 0);
		PlayerTextDrawAlignment(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i], 3);
		PlayerTextDrawFont(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i], 2);
		PlayerTextDrawShow(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][i]);
		
	}
	
	

	SetPVarInt(playerid, "skin", GetPlayerSkin(playerid));
	SetPVarInt(playerid, "color", GetPlayerColor(playerid));
	SetPVarInt(playerid, "Team", Team);


	// Army
	if(Team == 1)
	{
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		
		Team = 2;
		Team1++;
	}
	else
	{
		SetPlayerSkin(playerid, 112);
		SetPlayerColor(playerid, COLOR_RED);
		Team = 1;
		Team2++;
	}
	domination_PlayerRespawn(playerid);
	TogglePlayerControllable(playerid, 0);
	
	GameTextForPlayer(playerid, "~R~~n~~n~ Domination - US AirForce vs. Russian Mob ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
	return 1;
}

public domination_PlayerDied(playerid)
{
	DebugMsg("Played died dom");
	new string[128];
	if(GetPVarInt(playerid, "Team") == 1)
	{
		Ticks_t1--;
		if(Ticks_t1 <= 0)
		{
			format(string, sizeof(string), "[Event]: The russian mob won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	else if(GetPVarInt(playerid, "Team") == 2)
	{
		Ticks_t2--;
		if(Ticks_t2 <= 0)
		{
			format(string, sizeof(string), "[Event]: The army won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	new i;
	for(i = 0; i < EventCount; i++)
	{
		if(EventPlayers[i] != INVALID_PLAYER_ID)
		{
			domination_updateTextDraws(EventPlayers[i]);
		}
	}
	return 1;
}

public domination_PlayerLeftEvent(playerid)
{
	DebugMsg("Player Left Dom");
	new string[128];
	event_count--;
	SetPlayerSkin(playerid, GetPVarInt(playerid, "skin"));
	SetPlayerColor(playerid, GetPVarInt(playerid, "color"));
	DeletePVar(playerid, "skin");
	DeletePVar(playerid, "color");
	if(GetPVarInt(playerid, "Team") == 1)
	{
		Ticks_t1--;
		if(Ticks_t1 <= 0)
		{
			format(string, sizeof(string), "[Event]: The russian mob won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	else if(GetPVarInt(playerid, "Team") == 2)
	{
		Ticks_t2--;
		if(Ticks_t2 <= 0)
		{
			format(string, sizeof(string), "[Event]: The army won the domination event!");
			SendClientMessageToAll(COLOR_NOTICE, string);
			EndEvent();
			return 1;
		}
	}
	new i;
	for(i = 0; i < MAX_EVENT_PLAYERS; i++)
	{
		if(EventPlayers[i] != INVALID_PLAYER_ID)
		{
			domination_updateTextDraws(EventPlayers[i]);
		}
		
	}
	return 1;
}

public domination_OneSecond()
{
    Ticks = event_count * 100;
	Ticks_t1 = Ticks;
	Ticks_t2 = Ticks;
	new string[128];
	ZoneCaptureDomination = repeat domination_CaptureZoneTimer();
	domination_TickDecreaserTimer = repeat domination_TickDecreaser();
	dom_AutoZoneDecreaserTimer = repeat dom_AutoZoneDecreaser();

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			SendClientMessage(i, COLOR_SYNTAX, "[Event]: The objective is to capture as many zones and kill as many enemies as possible.");
			format(string, sizeof(string), "Each team has %d tickets available, and these will drain as you die or the enemy has a capture zone.", Ticks);
			SendClientMessage(i, COLOR_SYNTAX, string);
			domination_updateTextDraws(i);
		}
	}
	
	return 1;
}

public domination_PlayerRespawn(playerid)
{
	DebugMsg("Respawning player dom");
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "Team"));
	SetPlayerInterior(playerid, 9);
	SetPlayerCheckpoint(playerid, 315.8047, 1030.2465, 1947.7804, 4.0);
	
	if(GetPVarInt(playerid, "Team") == 1)
	{
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerFacingAngle(playerid, domination_plane_spawns[inc_t1][3]);
		SetPlayerPos(playerid, domination_plane_spawns[inc_t1][0], domination_plane_spawns[inc_t1][1], domination_plane_spawns[inc_t1][2]);
		inc_t1 += 1;
		inc_t1  = inc_t1 % DOMINATION_PLANE_SPAWNS;
	}
	else
	{
		SetPlayerSkin(playerid, 112);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerFacingAngle(playerid, domination_plane_spawns[inc_t2][3]);
		SetPlayerPos(playerid, domination_plane_spawns[inc_t2][0], domination_plane_spawns[inc_t2][1], domination_plane_spawns[inc_t2][2]);
		inc_t2 += 1;
		inc_t2 = inc_t2 % DOMINATION_PLANE_SPAWNS;
	}
	
	
	ResetPlayerWeapons(playerid);
	// Weapons - Dgl, Shotty, M4, Rifle
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 100);
	GivePlayerWeapon(playerid, 31, 500);
	GivePlayerWeapon(playerid, 34, 15);
    return 1;
}

forward domination_updateTextDraws(playerid);
public domination_updateTextDraws(playerid)
{
	new string[56];
	format(string, sizeof(string), "Military  Tickets: %d", Ticks_t1);
	PlayerTextDrawSetString(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][0], string);
	format(string, sizeof(string), "Mobsters Tickets: %d", Ticks_t2);
	PlayerTextDrawSetString(playerid, domination_textDraws[GetPVarInt(playerid, "Dom_PID")][1], string);
}

forward dom_IsPlayerInGangZone(playerid, gangzone);
public dom_IsPlayerInGangZone(playerid, gangzone)
{
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	if(Pos[0] >= domination_gangzones[gangzone][0] && Pos[0] <= domination_gangzones[gangzone][2] && Pos[1] <= domination_gangzones[gangzone][3] && Pos[1] >= domination_gangzones[gangzone][1])
	{
		if(Pos[2] > domination_gangzones[gangzone][4] + 10)
		{
			if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] != -1)
			{
				dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
			}
			return 0;
		}
		if(Pos[2] < domination_gangzones[gangzone][4] - 10)
		{
			if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] != -1)
			{
				dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
			}
			return 0;
		}
		return 1;
	}
	else
	{
		if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] != -1)
		{
			dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
		}
		return 0;
	}
}

#define DOMINATION_GZ 500 // Check every 0.5sec

timer domination_CaptureZoneTimer[DOMINATION_GZ]()
{
	new i, k;
	for(i = 0; i < EventCount; i++)
	{
		for(k = 0; k < 3; k++)
		{
			if(dom_IsPlayerInGangZone(EventPlayers[i], k) == 1)
			{
				if(dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] == -1)
				{
					DebugMsg("It is -1");
					// Nigga capturing zone.
					dom_zonestatus[k][2]++;
				}
				dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] = k;
				domination_CaptureZone(i, k);
				break;
			}
			else 
			{
				if(dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] != -1)
				{
					// Nigga left the zone.
					dom_zonestatus[k][2]--;
				}
				dom_playercapture[GetPVarInt(EventPlayers[i], "Dom_PID")] = -1;
			}	
		}
	}
}

timer domination_TickDecreaser[5000]()
{
	new i, dec;
	dec = Ticks/100;
	for(i = 0; i < DOMINATION_ZONES; i++)
	{
		if(dom_zonestatus[i][1] == 1)
		{
			Ticks_t2 -= dec;
			if(Ticks_t2 <= 0)
			{
				EndEvent();
			}
		}
		if(dom_zonestatus[i][1] == -1)
		{
			Ticks_t1 -= dec;
			if(Ticks_t1 <= 0)
			{
				EndEvent();
			}
		}
	}
	for(i = 0; i < EventCount; i++)
	{
		if(EventPlayers[i] != -1)
		{
			domination_updateTextDraws(i);	
		}
	}	
}

timer dom_AutoZoneDecreaser[2000]()
{
	new i, string[56];
	for(i = 0; i < DOMINATION_ZONES; i++)
	{
		// No people capturing it.
		if(dom_zonestatus[i][2] == 0)
		{
			// Zone is owned by blue's.
			if(dom_zonestatus[i][1] == 1 && dom_zonestatus[i][0] >= 20 && dom_zonestatus[i][0] < 100)
			{
				dom_zonestatus[i][0]++;
				format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
				DebugMsg(string);
				if(dom_zonestatus[i][0] == 100)
				{
					domination_UpdateZone(i, 1);
				}
			}
			// Zone is owned by reds.
			else if(dom_zonestatus[i][1] == 2 && dom_zonestatus[i][0] <= -20 && dom_zonestatus[i][0] > -100)
			{
				dom_zonestatus[i][0]--;
				format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
				DebugMsg(string);
				if(dom_zonestatus[i][0] == -100)
				{
					domination_UpdateZone(i, 2);
				}
			}
			// Zone was neutral
			else if(dom_zonestatus[i][1] == 0 && dom_zonestatus[i][0] != 0)
			{
				if(dom_zonestatus[i][0] > 0)
				{
					dom_zonestatus[i][0]--;
					format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
					DebugMsg(string);
				}
				else
				{
					dom_zonestatus[i][0]++;
					format(string, sizeof(string), "AutoThingymabob: %d on zone: %d", dom_zonestatus[i][0], i);
					DebugMsg(string);
				}
				if(dom_zonestatus[i][0] == 0)
				{
					domination_UpdateZone(i, 0);
				}
			}
		}
	}
}

CMD:dom_zone(playerid, params[])
{
	new string[56];
	new i;
	for(i = 0; i < DOMINATION_ZONES; i++)
	{
		format(string, sizeof(string), "Zone %d: %d status -> %d owns it -> %d people capping it ", i, dom_zonestatus[i][0], dom_zonestatus[i][1], dom_zonestatus[i][2]);
		DebugMsg(string);
	}
	return 1;
}



forward domination_CaptureZone(playerid, zone);
public domination_CaptureZone(playerid, zone)
{
	new string[128];
	new zone_names[3][28] = {
		{"motel"},
		{"construction"},
		{"farm"}
	};
	if(dom_playercapture[GetPVarInt(playerid, "Dom_PID")] == -1)
	{
		if(GetPVarInt(playerid, "Team") == 1 && dom_zonestatus[zone][1] != 1)
		{
			format(string, sizeof(string), "%s is capturing the %s zone.", PlayerName(playerid), zone_names[zone]);
			SendEventMessage(string, -1);
		}
		else if(GetPVarInt(playerid, "Team") == 2 && dom_zonestatus[zone][1] != -1)
		{
			format(string, sizeof(string), "%s is capturing the %s zone.", PlayerName(playerid), zone_names[zone]);
			SendEventMessage(string, -1);
		}
	}
	switch(GetPVarInt(playerid, "Team"))
	{
		case 1:
		{
			if(dom_zonestatus[zone][0] < 100)
			{
				if(dom_zonestatus[zone][0] == -100)
				{
					// Red flashing
					domination_UpdateZone(zone, 4);
				}
				
				// Can only capture if value is less than 100, aka not captured.
				dom_zonestatus[zone][0]++;
				format(string, sizeof(string), "Capturing.. %d", dom_zonestatus[zone][0]); 
				DebugMsg(string);
				if(dom_zonestatus[zone][0] == 0)
				{
					domination_UpdateZone(zone, 0);
				}
				if(dom_zonestatus[zone][0] >= 100)
				{
					dom_zonestatus[zone][1] = 1;
					// Make the zone blue
					domination_UpdateZone(zone, 1);
					format(string, sizeof(string), "%s captured the %s zone!", PlayerName(playerid), zone_names[zone]);
					dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
					SendEventMessage(string, -1);
					return 1;
				}
			}
		}
		case 2:
		{
			if(dom_zonestatus[zone][0] > -100)
			{
				if(dom_zonestatus[zone][0] == 100)
				{
					// Blue flashing
					domination_UpdateZone(zone, 3);
				}
				
				// Can only capture if value is less than 100, aka not captured.
				dom_zonestatus[zone][0]--;
				format(string, sizeof(string), "Capturing.. %d", dom_zonestatus[zone][0]); 
				DebugMsg(string);
				if(dom_zonestatus[zone][0] == 0)
				{
					domination_UpdateZone(zone, 0);
				}
				if(dom_zonestatus[zone][0] <= -100)
				{
					dom_zonestatus[zone][1] = -1;
					// Make the zone red
					domination_UpdateZone(zone, 2);
					format(string, sizeof(string), "%s captured the %s zone!", PlayerName(playerid), zone_names[zone]);
					dom_playercapture[GetPVarInt(playerid, "Dom_PID")] = -1;
					SendEventMessage(string, -1);
					return 1;
				}
			}

		}
	}
	return 1;
}

// 0 = Neutral, 1 = Military/Blue, 2 = Mob/Red -> 3 = Military under capture, 4 = Mob under capture
forward domination_UpdateZone(zone, team);
public domination_UpdateZone(zone, team)
{
	new color = -1, flash = -1, i;
	if(team == 0)
	{
		color = COLOR_GREEN;
		flash = 1;
	}
	else if(team == 1)
	{
		color = COLOR_BLUE;
		flash = 0;
	}
	else if(team == 2)
	{
		color = COLOR_RED;
		flash = 0;
	}
	else if(team == 3)
	{
		color = COLOR_BLUE;
		flash = 1;
	}
	else if(team == 4)
	{
		color = COLOR_RED;
		flash = 1;
	}
	if(flash != -1 && color != -1)
	{
		for(i = 0; i < EventCount; i++)
		{
			GangZoneShowForPlayer(EventPlayers[i], dom_gangzones[zone], color);
			if(flash == 0)
			{
				GangZoneStopFlashForPlayer(i, dom_gangzones[zone]);
			}
			else
			{
				GangZoneFlashForPlayer(EventPlayers[i], dom_gangzones[zone], COLOR_YELLOW);
			}
		}

	}
	
	return 1;
}

CMD:gz(playerid)
{
	new string[56];
	new i;
	for(i = 0; i < 3; i++)
	{
		format(string, sizeof(string), "In Gangzone %d: %d", i, dom_IsPlayerInGangZone(playerid, i));
		DebugMsg(string);
	}
	return 1;
}

/* HotLava */
new hotlava_pickups_start = 0;
public HotLava_EventStart(playerid)
{
	new j, i;
	
	FoCo_Event_Rejoin = 0;
	hotlava_pickups_start = 0;
	eCounter = 0;
	foreach(Player, k)
	{
		FoCo_Event_Died[k] = 0;
	}
	for(i = 0; i < 5; i++)
	{
		HotLava_Pickups[i][0] = -1;
		HotLava_Pickups[i][1] = -1;
		HotLava_Pickups[i][2] = -1;
		
	}
	for(j = 0; j < 10; j++)
	{
		HotLava_Disco[j] = -1;
	}
	Event_ID = HOTLAVA;
	
	event_start_message("HotLava", playerid, TDM_COST);
	
	Event_InProgress = 0;
	HotLava_CreateObjects();
	//HotLava_CreatePickups();
	HotLavaFallCheckTimer = repeat HotLavaFallCheck();
	
	return 1;
}

public HotLava_PlayerJoinEvent(playerid)
{
	if(eCounter >= 100)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is full");
	}	
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 150);
	SetPlayerArmour(playerid, 100);
	SetPlayerVirtualWorld(playerid, HOTLAVA_WORLD);
	SetPlayerInterior(playerid, HOTLAVA_INT);
	SetPVarInt(playerid, "eSkin", GetPlayerSkin(playerid));
	SetPVarInt(playerid, "eColor", GetPlayerColor(playerid));
	SetPlayerColor(playerid, COLOR_BLUE);
	SetPlayerSkin(playerid, 82); // elvis
	SetPVarInt(playerid, "InEvent", 1);
	SetPVarInt(playerid, "InHotLava", 1);
	SetPVarInt(playerid, "PlayerStatus", 1);
	SetPlayerPos(playerid, HotLavaSpawns[eCounter][0], HotLavaSpawns[eCounter][1], HotLavaSpawns[eCounter][2]+1);
	
	SendClientMessage(playerid, COLOR_SYNTAX, "[EVENT]: The floor will disappear.. Your task is to be the last one alive, good luck!");
	GameTextForPlayer(playerid, "~R~~n~~n~ HotLava! ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	
	eCounter++;
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

public HotLava_PlayerLeftEvent(playerid)
{
	new string[128];
	SetPVarInt(playerid, "InHotLava", 0);	// Gotta be first otherwise bug below.
	if(eCounter - 1 == 1)
	{
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InHotLava") == 1 && i != playerid)
			{
				SetPlayerColor(i, GetPVarInt(i, "eColor"));
				SetPlayerSkin(i, GetPVarInt(i, "eSkin"));
				SetPVarInt(i, "PlayerStatus", 0);
				
				DeletePVar(i, "eSkin");
				DeletePVar(i, "eColor");
				format(string, sizeof(string), "[EVENT]: %s(%d) died and %s(%d) is therefore the winner of the HotLava event!", PlayerName(playerid), playerid, PlayerName(i), i);
				SendClientMessageToAll(COLOR_CMDNOTICE, string);
				break;
			}
		}
		EndEvent();
		return 1;
	}
	eCounter--;
	format(string, sizeof(string), "[EVENT]: %s(%d) died, there are %d survivors left!", PlayerName(playerid), playerid, eCounter);
	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	SetPlayerColor(playerid, GetPVarInt(playerid, "eColor"));
	SetPlayerSkin(playerid, GetPVarInt(playerid, "eSkin"));
	SetPVarInt(playerid, "PlayerStatus", 0);
	SetPVarInt(playerid, "InEvent", 0);
	
	DeletePVar(playerid, "eSkin");
	DeletePVar(playerid, "eColor");
	if(eCounter <= 0)
	{
		EndEvent();
	}
	return 1;
}

public HotLava_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: HotLava is now in progress and can not be joined.");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	HotLava_StarterDisco();
	return 1;
}

public HotLava_StarterDisco()
{
	new i, j, rand;
	for(i = 0; i < HOTLAVA_MAXDISCO; i++)
	{
		PickingDisco:
		rand = random(100);
		for(j = 0; j < HOTLAVA_MAXDISCO; j++)
		{
			if(HotLava_Disco[j] == -1)
			{
				break;
			}
			if(rand == HotLava_Disco[j])
			{
				goto PickingDisco;
			}
		}
		HotLava_Disco[i] = rand;
		HotLava_SetDisco(HotLava_Objects[rand], 1);
	}
	HotLavaDiscoTimer = repeat Timer_Delete1Disco();
	HotLavaDiscoRepeatTimer = repeat Timer_RotateHotLavaPickups();
	return 1;
}

timer Timer_Delete1Disco[3000]()
{
	new rand;
	rand = random(HOTLAVA_MAXDISCO);
	DestroyDynamicObject(HotLava_Objects[HotLava_Disco[rand]]);
	HotLava_Objects[HotLava_Disco[rand]] = -1;
	HotLava_Disco[rand] = -1;
	HotLava_PickNewDisco(rand);
	return 1;
}

timer Timer_RotateHotLavaPickups[8000]()
{
	HotLava_RotatePickups();
	return 1;
}

public HotLava_PickNewDisco(OldFloor)
{
	new rand, i, amt, tmp;
	rand = random(HOTLAVA_OBJECTS_AMT);
	if(HotLava_Objects[rand] == -1)
	{
		amt = HOTLAVA_OBJECTS_AMT - rand;
		tmp = rand;
		if(amt >= HOTLAVA_OBJECTS_AMT / 2)
		{
			for(i = 0; i < amt; i++)
			{
				rand++;
				if(HotLava_Objects[rand] != -1)
				{
					break;
				}
			}
			if(rand == HOTLAVA_OBJECTS_AMT && HotLava_Objects[rand] == -1)
			{
				for(i = tmp; i >= 0; i--)
				{
					tmp--;
					if(HotLava_Objects[tmp] != -1)
					{
						rand = tmp;
						break;
					}	
				}
			}
		}
		else
		{
			for(i = tmp; i >= 0; i--)
			{
				rand--;
				if(HotLava_Objects[rand] != -1)
				{
					break;
				}
			}
			if(rand == 0 && HotLava_Objects[rand] == -1)
			{
				for(i = 0; i < amt; i++)
				{
					tmp++;
					if(HotLava_Objects[tmp] != -1)
					{
						rand = tmp;
						break;
					}
				}
			}
		}
	}
	HotLava_SetDisco(HotLava_Objects[rand], 1);
	HotLava_Disco[OldFloor] = rand;
	
	return 1;
}

public HotLava_CreateObjects()
{
	new i;
	for(i = 0; i < HOTLAVA_OBJECTS_AMT; i++)
	{
		HotLava_Objects[i] = CreateDynamicObject(19128, HotLavaSpawns[i][0], HotLavaSpawns[i][1], HotLavaSpawns[i][2], 0.0, 0.0, 0.0, HOTLAVA_WORLD, HOTLAVA_INT); 
		SetDynamicObjectMaterial(HotLava_Objects[i], 0, 19454, "all_walls", "mp_motel_whitewall", 0xFFFFFFFF);//Add the White overcoat
	}
	return 1;
}

public HotLava_SetDisco(Object_ID, ONOFF)
{
	if(ONOFF == 0)
	{
		SetDynamicObjectMaterial(Object_ID, 0, 19454, "all_walls", "mp_motel_whitewall", 0xFFFFFFFF);//Set it to White OverCoat
	}
	else
	{
		SetDynamicObjectMaterial(Object_ID, 0, 19128, "none", "none", 0);//Set it back to Disco
	}
	return 1;
}


public HotLava_CreatePickups()
{
	new i, rand_wpn;
	for(i = 0; i < HOTLAVA_PICKUPS; i++)
	{
		rand_wpn = random(5);
		HotLava_Pickups[i][0] = CreateDynamicPickup(Convert_Wpn_To_PickupID(HotLava_Weapons[rand_wpn][0]), 19, HotLavaSpawns[HotLava_Disco[i]][0], HotLavaSpawns[HotLava_Disco[i]][1], HotLavaSpawns[HotLava_Disco[i]][2]+1.5, 1300, 0, -1, 100);
		HotLava_Pickups[i][1] = HotLava_Disco[i];
		HotLava_Pickups[i][2] = HotLava_Weapons[rand_wpn][0]; // Keeping track of what weapon it is.
	}
	return 1;
}

public HotLava_RotatePickups()
{
	new i;
	if(hotlava_pickups_start != 0)
	{
		for(i = 0; i < HOTLAVA_PICKUPS; i++)
		{
			DestroyDynamicPickup(HotLava_Pickups[i][0]);
			HotLava_Pickups[i][1] = -1;
			HotLava_Pickups[i][2] = -1;
		}
		
	}
	hotlava_pickups_start++;
	
	HotLava_CreatePickups();
	return 1;
}

public HotLava_DeletePickups()
{
	new i;
	for(i = 0; i < HOTLAVA_PICKUPS; i++)
	{
		DestroyDynamicPickup(HotLava_Pickups[i][0]);
	}
	return 1;
}

public HotLava_DeleteObjects()
{
	new i;
	for(i = 0; i < HOTLAVA_OBJECTS_AMT; i++)
	{
		DestroyDynamicObject(HotLava_Objects[i]);
	}
	return 1;
}	

/* Labyrinth of Doom */

forward LOD_MazeKillerTimer();
public LOD_MazeKillerTimer()
{
	SetPlayerColor(Maze_Killer, COLOR_RED);
	SendClientMessageToAll(COLOR_GREEN, "[EVENT]: The maze killer is marked in RED, he may have a minigun or he might've ran out of ammo.");
	SendClientMessageToAll(COLOR_GREEN, "[EVENT]: If you kill him, you will become the maze killer!");
	return 1;
}

public lod_EventStart(playerid)
{
	Maze_Killer = -1;
	lod_CreatePickups();
    FoCo_Event_Rejoin = 0;
	event_count = 0;
	rotate_pickups_lod = LOD_EVENT_SLOTS - 1;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = LOD;
	event_start_message("Labyrinth of Doom", playerid, TDM_COST);
	Event_InProgress = 0;
	Event_Delay = 30;
	
	return 1;
}

forward lod_CreatePickups();
public lod_CreatePickups()
{
	new i;
	for(i = 0; i < MAX_LOD_PICKUPS; i++)
	{
		LOD_Pickups[i] = CreateDynamicPickup(Convert_Wpn_To_PickupID(LOD_Pickups_Wpns[i][0]), 19, LODWeapSpawns[i][0], LODWeapSpawns[i][1], LODWeapSpawns[i][2], 1400, 15, -1, 100);
	}
	return 1;
}

public lod_PlayerJoinEvent(playerid)
{
	event_count++;
	SetPlayerHealth(playerid, 50);
	SetPlayerArmour(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1400);
	SetPlayerInterior(playerid, 15);
	ResetPlayerWeapons(playerid);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Labyrinth of Doom! ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	SetPlayerPos(playerid, LODSpawns[increment][0], LODSpawns[increment][1], LODSpawns[increment][2]);
	SetPlayerFacingAngle(playerid, LODSpawns[increment][3]+180.0);

	SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
	SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
	SetPlayerSkin(playerid, 33);
	GivePlayerWeapon(playerid, 1, 1);
	SendClientMessage(playerid, COLOR_SYNTAX, "[INFO]: Your goal is to be the last survivor in the maze. Kill at any cost and avoid the maze killer!");
	SendClientMessage(playerid, COLOR_SYNTAX, "[INFO]: A minigun is spawned in the middle of the maze. Reach it first and receive a minigun and become the invisible maze killer!");
	SetPlayerColor(playerid, COLOR_BLUE);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	
	return 1;
}

public lod_PlayerLeftEvent(playerid)
{
	new string[128];
	event_count--;
	if(event_count == 1)
	{
		foreach(Player, i)
		{
			if(GetPVarInt(i, "PlayerStatus") == 1)
			{
				winner = i;
				break;
			}	
		}
		format(string, sizeof(string), "[EVENT]: %s(%d) won the Labyrinth of Doom event!", PlayerName(winner), winner);
		SendClientMessageToAll(COLOR_GREEN, string);
		EndEvent();
		return 1;
	}
    if(playerid == Maze_Killer)
	{
		format(string, sizeof(string), "[EVENT]: %s(%d) the maze killer was killed! His minigun is up for grabs! There are %d players left.", PlayerName(Maze_Killer), Maze_Killer, event_count);
		SendClientMessageToAll(COLOR_GREEN, string);
		DestroyDynamicPickup(LOD_Pickups[0]);
		LOD_Pickups[0] = CreateDynamicPickup(Convert_Wpn_To_PickupID(38), 19, Maze_X, Maze_Y, Maze_Z, 1400, 15, -1, 100);
		Maze_Killer = -1;
		KillTimer(Timer_MazeKiller);
	}
	else
	{
		format(string, sizeof(string), "[EVENT]: %s(%d) died, there are %d players alive.", PlayerName(playerid), playerid, event_count);
		SendClientMessageToAll(COLOR_GREEN, string);
	}
	return 1;
}

public lod_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Labyrinth of Doom is now in progress and can not be joined. The minigun has spawned in the middle of the maze!");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	return 1;
}

/* Area 51 */

public area51_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = AREA51;
	event_start_message("Special Forces vs. Scientists TDM", playerid, TDM_COST);
	Event_InProgress = 0;
	
	return 1;
}


public area51_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, area51SpawnsAF[increment][0], area51SpawnsAF[increment][1], area51SpawnsAF[increment][2]);
		SetPlayerFacingAngle(playerid, area51SpawnsAF[increment][3]);
		Motel_Team = 1;
		increment++;
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 70);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, area51SpawnsCrim[increment-1][0], area51SpawnsCrim[increment-1][1], area51SpawnsCrim[increment-1][2]);
		SetPlayerFacingAngle(playerid, area51SpawnsCrim[increment-1][3]);
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 500);
	GivePlayerWeapon(playerid, 31, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Area 51 ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public area51_PlayerLeftEvent(playerid)
{
	new
	    t1,
	    t2;
	new
	    msg[128];

    if(GetPlayerSkin(playerid) == 70)
	{
		Team1_Motel++;
	}

	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: US Special Forces %d - %d Nuclear Scientists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Nuclear Scientists have won the event!");
		Event_Bet_End(1);
		return 1;
	}
	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The US Special Forces have won the event!");
		Event_Bet_End(0);
		return 1;
	}
	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public area51_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Area 51 DM is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	return 1;
}

/* Army vs. Terrorists */

public army_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = ARMYVSTERRORISTS;
	event_start_message("Army vs. Terrorists Team DM", playerid, TDM_COST);
	Event_InProgress = 0;
		
	for(new i; i < 3; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(NavyTerroristVehicles[i][modelID], NavyTerroristVehicles[i][dX], NavyTerroristVehicles[i][dY], NavyTerroristVehicles[i][dZ], NavyTerroristVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else
		{
			break;
		}
	}

	return 1;
}


public army_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);
	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, armySpawnsType1[increment][0], armySpawnsType1[increment][1], armySpawnsType1[increment][2]);
		SetPlayerFacingAngle(playerid, armySpawnsType1[increment][3]);
		Motel_Team = 1;
		increment++;
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 73);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, armySpawnsType2[increment-1][0], armySpawnsType2[increment-1][1], armySpawnsType2[increment-1][2]);
		SetPlayerFacingAngle(playerid, armySpawnsType2[increment-1][3]);
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 750);
	GivePlayerWeapon(playerid, 34, 50);
	GameTextForPlayer(playerid, "~R~~n~~n~ Army vs. Terrorists ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
    Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public army_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 73)
	{
		Team1_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: Army %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);


	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Army have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}

	return 1;
}


public army_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Army vs. Terrorists DM is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

/* Big Smoke */

public bs_EventStart(playerid)
{
    new
	    string[256];

    Event_ID = BIGSMOKE;
	event_start_message("Bigsmoke", playerid, FFA_COST);
    if(FoCo_Event_Rejoin == 1)
    {
        format(string, sizeof(string), "[EVENT]: Type /(auto)join! - This event is rejoinable.");
        SendClientMessageToAll(COLOR_CMDNOTICE, string);
    }
    if(FoCo_Event_Rejoin == 0)
    {
        format(string, sizeof(string), "[EVENT]: Type /(auto)join! - This event is NOT rejoinable.");
        SendClientMessageToAll(COLOR_CMDNOTICE, string);
    }
	foreach(Player, i)
	{
	    if(i != INVALID_PLAYER_ID)
	    {
	        Event_Died[i] = 0;
	    }
	}
	IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
	Event_InProgress = 0;
	Event_FFA = 1;
	return 1;
}


public bs_PlayerJoinEvent(playerid)
{
	if(FFAArmour == 1)
    {
		SetPlayerArmour(playerid, 99);
	}

	else
	{
	    SetPlayerArmour(playerid, 0);
	}

    if(FoCo_Event_Died[playerid] == 0)
	{
 		Event_Kills[playerid] = 0;
	}
	new randomnum = random(20);
	SetPlayerHealth(playerid, 99);
	SetPlayerInterior(playerid, 2);
	SetPlayerPos(playerid, BigSmokeSpawns[randomnum][0], BigSmokeSpawns[randomnum][1], BigSmokeSpawns[randomnum][2]);
	SetPlayerVirtualWorld(playerid, 1500);
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, FFAWeapons, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Big ~h~ Smoke!", 800, 3);
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

/* Brawl */

public brawl_EventStart(playerid)
{
    if(BrawlX == 0.0)
	{
		GetPlayerPos(playerid, BrawlX, BrawlY, BrawlZ);
		GetPlayerFacingAngle(playerid, BrawlA);
		BrawlInt = GetPlayerInterior(playerid);
		BrawlVW = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_SYNTAX, "[INFO]: Since you're a dick and forgot to set brawl location, it has been set to your current position.");
	}
    FoCo_Event_Rejoin = 1;
	Event_ID = BRAWL;
	event_start_message("Brawl", playerid, FFA_COST);
	Event_InProgress = 0;
	Event_FFA = 1;
	return 1;
}

public brawl_PlayerJoinEvent(playerid)
{
	
	GiveAchievement(playerid, 24);
	SetPVarInt(playerid,"PlayerStatus",1);
	SetPlayerPos(playerid, BrawlX, BrawlY, BrawlZ);
	SetPlayerFacingAngle(playerid, BrawlA);
	SetPlayerInterior(playerid, BrawlInt);
	SetPlayerHealth(playerid, 99);
	SetPlayerArmour(playerid, 0);
	SetPlayerVirtualWorld(playerid, BrawlVW);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ The ~h~ Brawl!", 800, 3);
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

/* Compound */

public compound_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = COMPOUND;
	
	event_start_message("Compound Attack", playerid, TDM_COST);
	Event_InProgress = 0;
	
	for(new i; i < 9; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(compoundVehicles[i][modelID], compoundVehicles[i][dX], compoundVehicles[i][dY], compoundVehicles[i][dZ], compoundVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else
		{
			break;
		}
	}
	return 1;
}


public compound_PlayerJoinEvent(playerid)
{
    SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		////SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, swatcompoundattack[increment][0], swatcompoundattack[increment][1], swatcompoundattack[increment][2]);
		SetPlayerFacingAngle(playerid, swatcompoundattack[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the Compound.");
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 221);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, terroristcoumpoundattack[increment-1][0], terroristcoumpoundattack[increment-1][1], terroristcoumpoundattack[increment-1][2]);
		SetPlayerFacingAngle(playerid, terroristcoumpoundattack[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the Compound ...");
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 33, 30);
	GivePlayerWeapon(playerid, 31, 500);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Compound Attack ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public compound_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 221)
	{
		Team1_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: SWAT %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: SWAT have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public compound_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Compound Attack is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				SetPlayerCheckpoint(i, -2126.5669,-84.7937,35.3203,2.3031);
			}
		}
	}
}

/* Drug Run */

public drugrun_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		EventDrugDelay[i] = -1;
	}
	
	DrugDelayTimer = repeat DrugDelay();

	Event_ID = DRUGRUN;
	event_start_message("Team Drug Run", playerid, TDM_COST);
	Event_InProgress = 0;

	Iter_Clear(Event_Vehicles);

	for(new i; i < 16; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(DrugRunVehicles[i][modelID], DrugRunVehicles[i][dX], DrugRunVehicles[i][dY], DrugRunVehicles[i][dZ], DrugRunVehicles[i][Rotation], 1, 1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else 
		{
			break; 
		}
	}
	return 1;
}


public drugrun_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 285);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, drugSpawnsType1[increment][0], drugSpawnsType1[increment][1], drugSpawnsType1[increment][2]);
		SetPlayerFacingAngle(playerid, drugSpawnsType1[increment][3]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the checkpoint, don't let a drug runner enter ...");
		SendClientMessage(playerid, COLOR_GREEN, ".. it else they will win, you will win by eliminating there team..");
		Motel_Team = 1;
		increment++;
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 21);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, drugSpawnsType2[increment-1][0], drugSpawnsType2[increment-1][1], drugSpawnsType2[increment-1][2]);
		SetPlayerFacingAngle(playerid, drugSpawnsType2[increment-1][3]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the checkpoint, don't let the SWAT team ...");
		SendClientMessage(playerid, COLOR_GREEN, ".. kill you else you will lose. Your team MUST drop off the package..");
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Team Drug ~h~ Run!~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public drugrun_PlayerLeftEvent(playerid)
{
   	new
	   t1,
	   t2,
	   msg[128];

    if(GetPlayerSkin(playerid) == 285)
	{
		Team2_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 21)
	{
		Team1_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: SWAT %d - %d Drug Runners", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);
	DisablePlayerCheckpoint(playerid);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Criminals have won the event!");
        Event_Bet_End(1);
		return 1;
	}
	
	if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: S.W.A.T have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}

	return 1;
}


public drugrun_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Team Drug Run is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			SetPlayerCheckpoint(i, 1421.5542,2773.9951,10.8203, 4.0);
		}
	}
}

/* Hydra */

public hydra_EventStart(playerid)
{
    Event_ID = HYDRA;
	
	event_start_message("Hydra Wars", playerid, FFA_COST);
	Event_InProgress = 0;
	HydraFallCheckTimer = repeat HydraFallCheck();
	Event_Delay = 30;
	Event_FFA = 1;
	return 1;
}


public hydra_PlayerJoinEvent(playerid)
{
    if(EventPlayersCount() == 12)
	{
		return SendClientMessage(playerid, COLOR_NOTICE, "                This event is full");
	}

	SetPlayerVirtualWorld(playerid, 505);
	SetPlayerPos(playerid, hydraSpawnsType1[increment][0], hydraSpawnsType1[increment][1], hydraSpawnsType1[increment][2]);
	Event_PlayerVeh[playerid] = CreateVehicle(520, hydraSpawnsType1[increment][0], hydraSpawnsType1[increment][1], hydraSpawnsType1[increment][2], hydraSpawnsType1[increment][3], -1, -1, 15);
	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	PutPlayerInVehicle(playerid, Event_PlayerVeh[playerid], 0);
	GameTextForPlayer(playerid, "~R~~n~~n~ HYDRA ~n~ WARS", 1500, 3);
	TogglePlayerControllable(playerid, 0);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public hydra_PlayerLeftEvent(playerid)
{
	SetPVarInt(playerid, "LeftEventJust", 1);
	event_SpawnPlayer(playerid);

	new
	    msg[128];

	if(EventPlayersCount() == 1)
	{
		
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				winner = i;
				break;
			}
		}
	
		format(msg, sizeof(msg), "				%s has won the Hydra Wars event!", PlayerName(winner));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		GiveAchievement(winner, 82);
		SendClientMessage(winner, COLOR_NOTICE, "You have won the Hydra Wars event! You have earnt 10 score!");
		FoCo_Player[winner][score] = FoCo_Player[winner][score] + 10;
		lastEventWon = winner;
		Event_Bet_End(winner);
		EndEvent();
	}

	return 1;
}


public hydra_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Hydra wars is now in progress and can not be joined");
	hydraTime = defer HydraEnd();
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
		}
	}
}

/* Jeff TDM */

public jefftdm_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

    foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = JEFFTDM;
	event_start_message("Jefferson Motel Team DM", playerid, TDM_COST);
	Event_InProgress = 0;

	return 1;
}


public jefftdm_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 15);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 285);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, motelSpawnsType1[increment][0], motelSpawnsType1[increment][1], motelSpawnsType1[increment][2]);
		SetPlayerFacingAngle(playerid, motelSpawnsType1[increment][3]);
		Motel_Team = 1;
		increment++;
	}

	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 50);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, motelSpawnsType2[increment-1][0], motelSpawnsType2[increment-1][1], motelSpawnsType2[increment-1][2]);
		SetPlayerFacingAngle(playerid, motelSpawnsType2[increment-1][3]);
		Motel_Team = 0;
	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 500);
    TogglePlayerControllable(playerid, 0);
	GameTextForPlayer(playerid, "~R~~n~~n~ Motel ~h~ TDM!~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public jefftdm_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 285)
	{
		Team2_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 50)
	{
		Team1_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: S.W.A.T %d - %d Criminals", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Criminals have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: S.W.A.T have won the event!");
		Event_Bet_End(0);
		return 1;
	}

	/*if(EventPlayersCount() == 1)
	{
		EndEvent();
	}*/
	return 1;
}


public jefftdm_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Jefferson Motel DM is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

/* Mad Doggs */

public md_EventStart(playerid)
{
	   	new
		    string[256];

	    Event_ID = MADDOGG;
		event_start_message("Mad Dogg's Mansion DM", playerid, FFA_COST);
	    if(FoCo_Event_Rejoin == 1)
	    {
         	format(string, sizeof(string), "[EVENT]: Type /(auto)join! - This event is rejoinable.");
         	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	    }
	    if(FoCo_Event_Rejoin == 0)
	    {
         	format(string, sizeof(string), "[EVENT]: Type /join! - This event is NOT rejoinable.");
         	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	    }
		foreach(Player, i)
		{
		    if(i != INVALID_PLAYER_ID)
		    {
		        Event_Died[i] = 0;
		    }
		}
		IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
		Event_InProgress = 0;
		Event_FFA = 1;
		return 1;
}


public md_PlayerJoinEvent(playerid)
{
	if(Event_ID == MADDOGG)
	{
	    if(FFAArmour == 1)
        {
			SetPlayerArmour(playerid, 99);
		}

		else
		{
		    SetPlayerArmour(playerid, 0);
		}

		if(Event_Died[playerid] != 1)
		{
		    Event_Kills[playerid] = 0;
		}
		FoCo_Event_Died[playerid]++;
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 5);
		new randomnum = random(25);
		SetPlayerPos(playerid, MadDogSpawns[randomnum][0], MadDogSpawns[randomnum][1], MadDogSpawns[randomnum][2]);
		SetPlayerFacingAngle(playerid, MadDogSpawns[randomnum][3]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, FFAWeapons, 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Mad ~h~ Doggs!", 800, 3);
	}
	Event_EntranceFee(playerid, FFA_COST);
	return 1;
}

/* Minigun */

public minigun_EventStart(playerid)
{
	Event_ID = MINIGUN;
	event_start_message("Minigun Wars", playerid, FFA_COST);
	SendClientMessageToAll(COLOR_CMDNOTICE,  "[EVENT]: 30 seconds before it starts, type /join!");
	Event_InProgress = 0;
	
	return 1;
}


public minigun_PlayerJoinEvent(playerid)
{
    if(EventPlayersCount() == 17)
	{
		return SendClientMessage(playerid, COLOR_NOTICE, "                This event is full");
	}

	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerPos(playerid, minigunSpawnsType1[increment][0], minigunSpawnsType1[increment][1], minigunSpawnsType1[increment][2]);
	SetPlayerFacingAngle(playerid, minigunSpawnsType1[increment][3]);
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	SetPVarInt(playerid, "sWepExc", 1);		// Special Weapons Exception, for anticheat.
	GivePlayerWeapon(playerid, 38, 3000);
	GameTextForPlayer(playerid, "~R~~n~~n~ MINIGUN ~n~ WARS", 1500, 3);
	TogglePlayerControllable(playerid, 0);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public minigun_PlayerLeftEvent(playerid)
{
    SetPVarInt(playerid, "LeftEventJust", 1);

	if(EventPlayersCount() == 1)
	{
		new
				msg[128];
	        
		foreach(Player, i)
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				winner = i;
				break;
			}
		}
		
		format(msg, sizeof(msg), "				%s has won the Minigun Wars event!", PlayerName(winner));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		GiveAchievement(winner, 80);
		SendClientMessage(winner, COLOR_NOTICE, "You have won the Minigun Wars event! You have earnt 10 score!");
		FoCo_Player[winner][score] += 10;
		lastEventWon = winner;
		Event_Bet_End(winner);
		EndEvent();
	}
	return 1;
}


public minigun_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Minigun wars is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
		}
	}
}

/* Navy vs Terrorists */

public navy_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}
		
	Event_ID = NAVYVSTERRORISTS;
	event_start_message("Navy Seals vs. Terrorists", playerid, TDM_COST);
	Event_InProgress = 0;
	
	
	for(new i; i < 12; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(navyVehicles[i][modelID], navyVehicles[i][dX], navyVehicles[i][dY], navyVehicles[i][dZ], navyVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else 
		{
			break; 
		}
	}
	
	return 1;
}


public navy_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, navySealsBoat[increment][0], navySealsBoat[increment][1], navySealsBoat[increment][2]);
		SetPlayerFacingAngle(playerid, navySealsBoat[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the boat in the checkpoint and eliminate all terrorist activity.");
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 221);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, terroristsBoat[increment-1][0], terroristsBoat[increment-1][1], terroristsBoat[increment-1][2]);
		SetPlayerFacingAngle(playerid, terroristsBoat[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the boat at all costs ...");
	}


	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 29, 750);
	GivePlayerWeapon(playerid, 31, 500);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Navy Seals Vs. Terrorists ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public navy_PlayerLeftEvent(playerid)
{
   	new
	   	t1,
		t2,
		msg[128];

    if(GetPlayerSkin(playerid) == 221)
	{
		Team1_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: Navy Seals %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}
	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}
	else if(t2 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Navy Seals have won the event!");
		Event_Bet_End(0);
		return 1;
	}
	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public navy_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Navy Seals Vs. Terrorists is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			DisablePlayerCheckpoint(i);
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				SetPlayerCheckpoint(i, -1446.6353,1502.6423,1.7366, 4.0);
			}
		}
	}
}

/* Oil Rig */

public oilrig_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = OILRIG;
	event_start_message("Oil Rig Terrorists", playerid, TDM_COST);
	Event_InProgress = 0;
	OilrigFallCheckTimer = repeat OilrigFallCheck();
	
	return 1;
}


public oilrig_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);

	if(Motel_Team == 0)
	{
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		PlayerEventStats[playerid][pteam] = 1;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 287);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, swatoilrigspawns1[increment][0], swatoilrigspawns1[increment][1], swatoilrigspawns1[increment][2] + 4);
		SetPlayerFacingAngle(playerid, swatoilrigspawns1[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Attack the Oil Rig.");
	}
	else
	{
 		SetPVarInt(playerid, "MotelTeamIssued", 2);
		PlayerEventStats[playerid][pteam] = 2;
		//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 221);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, terroristoilrigspawns1[increment-1][0], terroristoilrigspawns1[increment-1][1], terroristoilrigspawns1[increment-1][2]);
		SetPlayerFacingAngle(playerid, terroristoilrigspawns1[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Defend the Oil Rig ...");
	}
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 31, 500);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Oil Rig Terrorists ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public oilrig_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(GetPlayerSkin(playerid) == 221)
	{
		Team1_Motel++;
	}
	else if(GetPlayerSkin(playerid) == 287)
	{
		Team2_Motel++;
	}

	format(msg, sizeof(msg), "[EVENT SCORE]: SWAT %d - %d Terrorists", Team1_Motel, Team2_Motel);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "MotelTeamIssued") == 1)
			{
				t1++;
			}
			else if(GetPVarInt(i, "MotelTeamIssued") == 2)
			{
				t2++;
			}
		}
	}

	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Terrorists have won the event!");
		Event_Bet_End(1);
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: SWAT have won the event!");
		Event_Bet_End(0);
		increment = 0;
		return 1;
	}

	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}


public oilrig_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Oil Rig Terrorists is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

new increment2;
new mycounter;
public plane_EventStart(playerid)
{
	increment2 = 0;
	FoCo_Event_Rejoin = 0;
	Team1_Motel = 0;
	Team2_Motel = 0;
	mycounter = 0;
	
	foreach(Player, i)
	{
	    FoCo_Event_Died[i] = 0;
	}

	Event_ID = PLANE;
	event_start_message("Plane Survival", playerid, TDM_COST);
	Event_InProgress = 0;
	
	for(new i; i < 33; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			new eCarID = CreateVehicle(PlaneVehicles[i][modelID], PlaneVehicles[i][dX], PlaneVehicles[i][dY], PlaneVehicles[i][dZ], PlaneVehicles[i][Rotation], -1, -1, 600000);
			SetVehicleVirtualWorld(eCarID, 1500);
			eventVehicles[i] = eCarID;
			Iter_Add(Event_Vehicles, eCarID);
		}

		else
		{
			break;
		}
	}
	
    PlaneFallCheckTimer = repeat PlaneFallCheck();
	return 1;
}

public plane_PlayerJoinEvent(playerid)
{
    if(mycounter == 30)
	{
		return SendClientMessage(playerid, COLOR_NOTICE, "This event is full");
	}
	
    SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);
	
	if(mycounter == 0 || mycounter == 10 || mycounter == 20)
	{
		Team1_Motel++;          // Pilots.
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerSkin(playerid, 61);
		SetPlayerPos(playerid, planeSpawnsType2[increment2][0], planeSpawnsType2[increment2][1], planeSpawnsType2[increment2][2]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Ram the hobos off the roof with a plane of your own choosing.");
		increment2++;
	}
    else
	{
	    Team2_Motel++;          // Hobos team
		SetPVarInt(playerid, "MotelTeamIssued", 2);
		SetPlayerSkin(playerid, 137);
		SetPlayerColor(playerid, COLOR_RED);
        SetPlayerPos(playerid, PlaneSpawnType1[increment][0], PlaneSpawnType1[increment][1], PlaneSpawnType1[increment][2]);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive!");
		increment++;
 	}
 	ResetPlayerWeapons(playerid);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Plane Survival! ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	mycounter++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
	
}

public plane_PlayerLeftEvent(playerid)
{
	new msg[128];
	
    if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
	    Team2_Motel--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Pilots %d - %d Hobos", Team1_Motel, Team2_Motel);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}

	if(GetPVarInt(playerid, "MotelTeamIssued") == 1)
	{
		Team1_Motel--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Pilots %d - %d Hobos", Team1_Motel, Team2_Motel);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}

	if(Team2_Motel == 0)
	{
	    SendClientMessageToAll(COLOR_NOTICE, "[NOTICE]: The event ended due to all hobos falling off the roof.");
	    Event_Bet_End(0);
		EndEvent();
	}
	
	else if(Team1_Motel == 0)
	{
     	SendClientMessageToAll(COLOR_NOTICE, "[NOTICE]: The event ended due to all pilots dying.");
     	Event_Bet_End(1);
		EndEvent();
	}

	SetPVarInt(playerid, "MotelTeamIssued", 0);
	return 1;
}

public plane_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Plane Survival is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public hspursuit_EventStart(playerid)
{
	FoCo_Event_Rejoin = 0;
    team_issue = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = HIGHSPEEDPURSUIT;
	event_start_message("High-speed Pursuit", playerid, TDM_COST);
	Event_InProgress = 0;
	
	new car;
	caridx = 0;
	Iter_Clear(Event_Vehicles);
	for(new i = 0; i <= 24; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			if(i == 0)     // If you change this, also change the ones on top!!
			{
				car = CreateVehicle(RandomHS_Pursuit_Vehicle(), HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], -1, -1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				E_HSPursuit_Criminal = car;
				eventVehicles[i] = car;
			}
			else if (i == 10 || i == 24)    // If this is changed, change accordingly on top. Mavericks
 			{
   				car = CreateVehicle(497, HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], 125, 125, 600000);
   				SetVehicleVirtualWorld(car, 1500);
      			eventVehicles[i] = car;
	        	Iter_Add(Event_Vehicles, car);
    		}
    		else if (i % 4 == 0)    // Cheetahs
    		{
    			car = CreateVehicle(415, HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], 125, 125, 600000);
   				SetVehicleVirtualWorld(car, 1500);
      			eventVehicles[i] = car;
	        	Iter_Add(Event_Vehicles, car);
    		}
		    else        // Sultans
		    {
	    		car = CreateVehicle(560, HSpursuitVehicles[i][0], HSpursuitVehicles[i][1], HSpursuitVehicles[i][2], HSpursuitVehicles[i][3], 0, 1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				eventVehicles[i] = car;
				Iter_Add(Event_Vehicles, car);
  			}
		}
		else
		{
			break;
		}
	}
	if(ForcedCriminal != -1)
	{
		PlayerJoinEvent(ForcedCriminal);
	    hspursuit_PlayerJoinEvent(ForcedCriminal);
	}
	return 1;
}

public hspursuit_PlayerJoinEvent(playerid)
{
	if(playerid != -1)
	{
		new string[128];
		SetPlayerArmour(playerid, 99);
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);

		if(ForcedCriminal != -1)
		{
	 		if(ForcedCriminal == playerid)
	   		{
	        	Motel_Team = 1;
				SetPVarInt(playerid, "MotelTeamIssued", 1);
				SetPlayerColor(playerid, COLOR_RED);
				FoCo_Criminal = playerid;
				HSPursuitTimer = defer EndHSPursuit();
				SetPlayerSkin(playerid, 50);
				PutPlayerInVehicle(playerid, E_HSPursuit_Criminal, 0);
				SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
				format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_GREEN, string);
				SendClientMessage(playerid, COLOR_NOTICE, "You have been chosen by an admin to be the criminal");
				ForcedCriminal = -1;
	     	}
		}
		else if(Motel_Team == 0 && ForcedCriminal == -1)
		{
			Motel_Team = 1;
			SetPVarInt(playerid, "MotelTeamIssued", 1);
			SetPlayerColor(playerid, COLOR_RED);
			FoCo_Criminal = playerid;
			HSPursuitTimer = defer EndHSPursuit();
			SetPlayerSkin(playerid, 50);
			PutPlayerInVehicle(playerid, E_HSPursuit_Criminal, 0);
			SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
			format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_GREEN, string);
		}
		else
		{
			SetPVarInt(playerid, "MotelTeamIssued", 2);
			SetPlayerSkin(playerid, 280);
			SetPlayerColor(playerid, COLOR_BLUE);
			team_issue++;
			caridx++;
	        PutPlayerInVehicle(playerid, eventVehicles[caridx], 0);


			SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Take out the criminal car at all costs ...");

			if(FoCo_Criminal != INVALID_PLAYER_ID)
			{
				SetPlayerMarkerForPlayer( playerid, FoCo_Criminal, 0xFFFFFF00);
			}
	 	}

		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 25, 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Pursuit ~h~ ~n~~n~ ~w~You are now in the queue", 4000, 3);
		Event_EntranceFee(playerid, TDM_COST);
	}
	return 1;
}


public hspursuit_PlayerLeftEvent(playerid)
{
    if(playerid == FoCo_Criminal)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal being caught!");
		Event_Bet_End(0);
		EndEvent();
	}

	if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
     	team_issue--;
	}

	if(team_issue == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the police being killed!");
		Event_Bet_End(1);
		EndEvent();
	}
	SetPVarInt(playerid, "MotelTeamIssued", 0);

	return 1;
}


public hspursuit_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Pursuit is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

/* Pursuit */

public pursuit_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;
    team_issue = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = PURSUIT;
	event_start_message("Pursuit", playerid, TDM_COST);
	Event_InProgress = 0;


	new car;
	caridx = 0;
	Iter_Clear(Event_Vehicles);
	for(new i = 0; i < 25; i++)
	{
		if(i < MAX_EVENT_VEHICLES)
		{
			if(i == 0)     // If you change this, also change the ones on top!!
			{
				car = CreateVehicle(Random_Pursuit_Vehicle(), pursuitVehicles[i][0], pursuitVehicles[i][1], pursuitVehicles[i][2], pursuitVehicles[i][3], -1, -1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				E_Pursuit_Criminal = car;
				eventVehicles[i] = car;
			}
			else if (i == 10 || i == 24)    // If this is changed, change accordingly on top
 			{
   				car = CreateVehicle(497, pursuitVehicles[i][0], pursuitVehicles[i][1], pursuitVehicles[i][2], pursuitVehicles[i][3], 0, 1, 600000);
   				SetVehicleVirtualWorld(car, 1500);
      			eventVehicles[i] = car;
	        	Iter_Add(Event_Vehicles, car);
    		}
		    else
		    {
	    		car = CreateVehicle(596, pursuitVehicles[i][0], pursuitVehicles[i][1], pursuitVehicles[i][2], pursuitVehicles[i][3], 0, 1, 600000);
				SetVehicleVirtualWorld(car, 1500);
				eventVehicles[i] = car;
				Iter_Add(Event_Vehicles, car);
  			}
		}
		else
		{
			break;
		}
	}
	if (ForcedCriminal != -1)
	{
		PlayerJoinEvent(ForcedCriminal);
	    pursuit_PlayerJoinEvent(ForcedCriminal);
	}
	return 1;
}

public pursuit_PlayerJoinEvent(playerid)
{
	new string[128];
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1500);
	SetPlayerInterior(playerid, 0);
	
	if(ForcedCriminal != -1)
	{
 		if(ForcedCriminal == playerid)
   		{
        	Motel_Team = 1;
			SetPVarInt(playerid, "MotelTeamIssued", 1);
			SetPlayerColor(playerid, COLOR_RED);
			FoCo_Criminal = playerid;
			PursuitTimer = defer EndPursuit();
			SetPlayerSkin(playerid, 50);
			PutPlayerInVehicle(playerid, E_Pursuit_Criminal, 0);
			SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
			format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_NOTICE, "You have been chosen by an admin to be the criminal");
			ForcedCriminal = -1;
     	}
	}
	else if(Motel_Team == 0 && ForcedCriminal == -1)
	{
		Motel_Team = 1;
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPlayerColor(playerid, COLOR_RED);
		FoCo_Criminal = playerid;
		PursuitTimer = defer EndPursuit();
		SetPlayerSkin(playerid, 50);
		PutPlayerInVehicle(playerid, E_Pursuit_Criminal, 0);
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Stay alive, evade the PD ...");
		format(string, sizeof(string), "%s was chosen to be the criminal, kill him at all costs!",PlayerName(playerid));
		SendClientMessageToAll(COLOR_GREEN, string);
	}
	else
	{
		SetPVarInt(playerid, "MotelTeamIssued", 2);
	//	//SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
	//	//SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 280);
		SetPlayerColor(playerid, COLOR_BLUE);
		team_issue++;
		
		caridx++;
        PutPlayerInVehicle(playerid, eventVehicles[caridx], 0);
        

		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Take out the criminal car at all costs ...");

		if(FoCo_Criminal != INVALID_PLAYER_ID)
		{
			SetPlayerMarkerForPlayer( playerid, FoCo_Criminal, 0xFFFFFF00);
		}
 	}

	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 500);
	GameTextForPlayer(playerid, "~R~~n~~n~ Pursuit ~h~ ~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public pursuit_PlayerLeftEvent(playerid)
{
    if(playerid == FoCo_Criminal)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the criminal being caught!");
		Event_Bet_End(0);
		EndEvent();
	}

	if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
     	team_issue--;
	}
	
	if(team_issue == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The pursuit has ended due to the police being killed!");
		Event_Bet_End(1);
		EndEvent();
	}
	

	SetPVarInt(playerid, "MotelTeamIssued", 0);
	//SetPlayerSkin(playerid, GetPVarInt(playerid, "MotelSkin"));
	//SetPlayerColor(playerid, GetPVarInt(playerid, "MotelColor"));

	return 1;
}


public pursuit_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Pursuit is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public construction_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
	}

	Event_ID = CONSTRUCTION;
	event_start_message("Construction-TDM ", playerid, TDM_COST);
	Event_InProgress = 0;
	Event_Delay = 30;
	Team1 = 0;
	Team2 = 0;
	
	return 1;
}

public construction_PlayerJoinEvent(playerid)
{
	SetPlayerArmour(playerid, 99);
	SetPlayerHealth(playerid, 99);
	SetPlayerVirtualWorld(playerid, 1400);
	SetPlayerInterior(playerid, 0);
	
	if(Motel_Team == 0)
	{
		Team1++;
		SetPVarInt(playerid, "MotelTeamIssued", 1);
		SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 27);
		SetPlayerColor(playerid, COLOR_BLUE);
		SetPlayerPos(playerid, constructionspawn1[increment][0], constructionspawn1[increment][1], constructionspawn1[increment][2] + 4);
		SetPlayerFacingAngle(playerid, constructionspawn1[increment][3]);
		Motel_Team = 1;
		increment++;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Kill the engineers!");
	}
	else
	{
		Team2++;
 		SetPVarInt(playerid, "MotelTeamIssued", 2);
		SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
		SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
		SetPlayerSkin(playerid, 153);
		SetPlayerColor(playerid, COLOR_RED);
		SetPlayerPos(playerid, constructionspawn2[increment-1][0], constructionspawn2[increment-1][1], constructionspawn2[increment-1][2]);
		SetPlayerFacingAngle(playerid, constructionspawn2[increment-1][3]);
		Motel_Team = 0;
		SendClientMessage(playerid, COLOR_GREEN, "[OBJECTIVE]: Kill the workers!");
	}
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid, 24, 500);
	GivePlayerWeapon(playerid, 25, 250);
	GivePlayerWeapon(playerid, 33, 150);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, "~R~~n~~n~ Oil Rig Terrorists ~h~~n~~n~ ~w~You are now in the queue", 4000, 3);
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}

public construction_PlayerLeftEvent(playerid)
{
	new msg[128];

	if(GetPVarInt(playerid, "MotelTeamIssued") == 1)
	{
		Team1--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Workers %d - %d Engineers", Team1, Team2);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}
	else if(GetPVarInt(playerid, "MotelTeamIssued") == 2)
	{
		Team2--;
		format(msg, sizeof(msg), "[EVENT SCORE]: Workers %d - %d Engineers", Team1, Team2);
		SendClientMessageToAll(COLOR_NOTICE, msg);
	}
	
	
	if(Team1 == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The engineers have won the event!");
		increment = 0;
		Event_Bet_End(1);
		EndEvent();
	}
	else if(Team2 == 0)
	{
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The workers have won the event!");
		increment = 0;
		Event_Bet_End(0);
		EndEvent();
	}
	
	SetPVarInt(playerid, "MotelTeamIssued", 0);
	
	return 1;
}

public construction_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Construction TDM is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public Random_Pursuit_Vehicle()
{
	new randVeh, vehicle;
	randVeh = random(50);
	switch(randVeh)
	{
		case 0: { vehicle = 402; }
		case 1: { vehicle = 405; }
		case 2: { vehicle = 402; }
		case 3: { vehicle = 426; }
		case 4: { vehicle = 434; }
		case 5: { vehicle = 439; }
		case 6: { vehicle = 402; }
		case 7: { vehicle = 489; }
		case 8: { vehicle = 495; }
		case 9: { vehicle = 412; }
		case 10: { vehicle = 419; }
		case 11: { vehicle = 421; }
		case 12: { vehicle = 422; }
		case 13: { vehicle = 426; }
		case 14: { vehicle = 436; }
		case 15: { vehicle = 445; }
		case 16: { vehicle = 466; }
		case 17: { vehicle = 467; }
		case 18: { vehicle = 470; }
		case 19: { vehicle = 474; }
		case 20: { vehicle = 475; }
		case 21: { vehicle = 477; }
		case 22: { vehicle = 491; }
		case 23: { vehicle = 492; }
		case 24: { vehicle = 500; }
		case 25: { vehicle = 506; }
		case 26: { vehicle = 508; }
		case 27: { vehicle = 516; }
		case 28: { vehicle = 517; }
		case 29: { vehicle = 526; }
		case 30: { vehicle = 527; }
		case 31: { vehicle = 529; }
		case 32: { vehicle = 533; }
		case 33: { vehicle = 534; }
		case 34: { vehicle = 535; }
		case 35: { vehicle = 536; }
		case 36: { vehicle = 537; }
		case 37: { vehicle = 540; }
		case 38: { vehicle = 542; }
		case 39: { vehicle = 549; }
		case 40: { vehicle = 550; }
		case 41: { vehicle = 555; }
		case 42: { vehicle = 566; }
		case 43: { vehicle = 567; }
		case 44: { vehicle = 575; }
		case 45: { vehicle = 576; }
		case 46: { vehicle = 579; }
		case 47: { vehicle = 580; }
		case 48: { vehicle = 587; }
		case 49: { vehicle = 602; }
		case 50: { vehicle = 603; }
	}
	return vehicle;
}

public RandomHS_Pursuit_Vehicle()
{
	new randVeh, vehicle;
	randVeh = random(30);
	switch(randVeh)
	{
		case 0: { vehicle = 402; }
		case 1: { vehicle = 411; }
		case 2: { vehicle = 415; }
		case 3: { vehicle = 424; }
		case 4: { vehicle = 429; }
		case 5: { vehicle = 451; }
		case 6: { vehicle = 461; }
		case 7: { vehicle = 463; }
		case 8: { vehicle = 468; }
		case 9: { vehicle = 471; }
		case 10: { vehicle = 477; }
		case 11: { vehicle = 494; }
		case 12: { vehicle = 495; }
		case 13: { vehicle = 496; }
		case 14: { vehicle = 502; }
		case 15: { vehicle = 503; }
		case 16: { vehicle = 506; }
		case 17: { vehicle = 509; }
		case 18: { vehicle = 541; }
		case 19: { vehicle = 555; }
		case 20: { vehicle = 556; }
		case 21: { vehicle = 559; }
		case 22: { vehicle = 560; }
		case 23: { vehicle = 562; }
		case 24: { vehicle = 565; }
		case 25: { vehicle = 568; }
		case 26: { vehicle = 581; }
		case 27: { vehicle = 587; }
		case 28: { vehicle = 589; }
		case 29: { vehicle = 602; }
		case 30: { vehicle = 603; }
	}
	return vehicle;
}


/* Sumo */

public monster_EventStart(playerid)
{
    Event_ID = MONSTERSUMO;
	event_start_message("Monster Sumo", playerid, TDM_COST);
	Event_InProgress = 0;
	
	return 1;
}



public banger_EventStart(playerid)
{
	Event_ID = BANGERSUMO;
	event_start_message("Banger Sumo", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}



public sandking_EventStart(playerid)
{
	Event_ID = SANDKSUMO;
	event_start_message("SandKing Sumo", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}



public sandkingR_EventStart(playerid)
{
	Event_ID = SANDKSUMORELOADED;
	event_start_message("SandKing Sumo Reloaded", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}


public derby_EventStart(playerid)
{
	Event_ID = DESTRUCTIONDERBY;
	event_start_message("Destruction Derby", playerid, TDM_COST);
	Event_InProgress = 0;
		
	return 1;
}


public monster_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType1[increment][0], sumoSpawnsType1[increment][1], sumoSpawnsType1[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType1[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(556, sumoSpawnsType1[increment][0], sumoSpawnsType1[increment][1], sumoSpawnsType1[increment][2], sumoSpawnsType1[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType1[increment][3]);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	
	return 1;
}


public banger_PlayerJoinEvent(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType2[increment][0], sumoSpawnsType2[increment][1], sumoSpawnsType2[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType2[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(504, sumoSpawnsType2[increment][0], sumoSpawnsType2[increment][1], sumoSpawnsType2[increment][2], sumoSpawnsType2[increment][3], -1, -1, 15);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
    return 1;
}


public sandking_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType3[increment][0], sumoSpawnsType3[increment][1], sumoSpawnsType3[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType3[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(495, sumoSpawnsType3[increment][0], sumoSpawnsType3[increment][1], sumoSpawnsType3[increment][2], sumoSpawnsType3[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType3[increment][3]);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public sandkingR_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerPos(playerid, sumoSpawnsType5[increment][0], sumoSpawnsType5[increment][1], sumoSpawnsType5[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType5[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(495, sumoSpawnsType5[increment][0], sumoSpawnsType5[increment][1], sumoSpawnsType5[increment][2], sumoSpawnsType5[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType5[increment][3]);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public derby_PlayerJoinEvent(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 505);

	SetPlayerInterior(playerid, 15);
	SetPlayerPos(playerid, sumoSpawnsType4[increment][0], sumoSpawnsType4[increment][1], sumoSpawnsType4[increment][2]+5);
	SetPlayerFacingAngle(playerid, sumoSpawnsType4[increment][3]);
	Event_PlayerVeh[playerid] = CreateVehicle(504, sumoSpawnsType4[increment][0], sumoSpawnsType4[increment][1], sumoSpawnsType4[increment][2], sumoSpawnsType4[increment][3], -1, -1, 15);
	SetVehicleZAngle(Event_PlayerVeh[playerid], sumoSpawnsType4[increment][3]);
	LinkVehicleToInterior(Event_PlayerVeh[playerid], 15);

	SetVehicleVirtualWorld(Event_PlayerVeh[playerid], 505);
	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 99);
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid, "~R~SUMO~n~~n~ ~w~You are now in the queue!", 4000, 3);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	increment++;
	Event_EntranceFee(playerid, TDM_COST);
	return 1;
}


public sumo_PlayerLeftEvent(playerid)
{
  	SetPVarInt(playerid, "LeftEventJust", 1);
	RemovePlayerFromVehicle(playerid);
	event_SpawnPlayer(playerid);

	if(EventPlayersCount() == 1)
	{
		new msg[128];
		foreach(Player, i)
	  	{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				winner = i;
				break;
			}
		}
		format(msg, sizeof(msg), "				%s has won the Sumo event!", PlayerName(winner));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		GiveAchievement(winner, 81);
		SendClientMessage(winner, COLOR_NOTICE, "You have won Sumo event! You have earnt 10 score!");
		FoCo_Player[winner][score] += 10;
		lastEventWon = winner;
		Event_Bet_End(winner);
		EndEvent();
		return 1;
	}
	
	return 1;
}



public sumo_OneSecond()
{
	SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Sumo is now in progress and can not be joined.");
	SumoFallCheckTimer = repeat SumoFallCheck();
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			SetVehicleParamsEx(Event_PlayerVeh[i], true, false, false, true, false, false, false);
			TogglePlayerControllable(i, 1);
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			increment = 0;
		}
	}
	return 1;
}

public Zombie_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: Zombie vs Civilian is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
}

public Zombie_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;
	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		PlayerEventStats[i][pteam] = 0;
	}
	Event_ID = ZOMVCIV;
	increment = 0;
	event_start_message("Zombie vs Civilian", playerid, TDM_COST);
	Event_InProgress = 0;
	ZomEvent_Deaths[0] = 0;
	ZomEvent_Deaths[1] = 0;
	return 1;
}

public Zombie_OnPlayerTakeDamage(playerid, issuerid, weaponid)
{
	if(Event_ID == ZOMVCIV)
	{
		if(PlayerEventStats[issuerid][pteam] == 1)
		{
			if(PlayerEventStats[playerid][pteam] == 2)
			{
				SetPlayerColor(playerid, CIV_VIS_COL);
			}
			else
			{
				GameTextForPlayer(issuerid, "~r~You must not eat your fellow Zombies.", 1000, 4);
			}
		}
		else if(PlayerEventStats[issuerid][pteam] == 2)
		{
			if(PlayerEventStats[playerid][pteam] == 1)
			{
				SetPlayerColor(playerid, ZOM_VIS_COL);
			}
			else
			{
				GameTextForPlayer(issuerid, "~r~You must not shoot your fellow men.", 1000, 4);
			}
		}
	}
	return 1;
}

public Zombie_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(PlayerEventStats[playerid][pteam] == 1)
	{
		ZomEvent_Deaths[1]++;
	}
	else if(PlayerEventStats[playerid][pteam] == 2)
	{
		ZomEvent_Deaths[0]++;
	}
    PlayerEventStats[playerid][pteam] = 0;
	format(msg, sizeof(msg), "[EVENT SCORE]: Zombies %d - %d Civilians", ZomEvent_Deaths[0], ZomEvent_Deaths[1]);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerEventStats[i][pteam] == 1)
			{
				t1++;
			}
			else if(PlayerEventStats[i][pteam] == 2)
			{
				t2++;
			}
		}
	}
	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: The Civilians have killed all Zombies!");
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Zombies have bitten all Civilians!");
		increment = 0;
		return 1;
	}
	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	SetPlayerWeather(playerid, 0);
	return 1;
}

public Zombie_PlayerDeath(playerid)
{
	SetPlayerWeather(playerid, 0);
	return 1;
}

public Zombie_PlayerJoinEvent(playerid)
{
	if(increment < ZOMBIE_EVENT_SLOTS)
	{
		SetPlayerVirtualWorld(playerid, 1499);
		SetPlayerInterior(playerid, 0);
		if(Motel_Team == 0)
		{
			SetPVarInt(playerid, "MotelTeamIssued", 1);
			SetPlayerSkin(playerid, 0);
			PlayerEventStats[playerid][pteam] = 1;
			SetPlayerPos(playerid,Zombie_Civil_Spawn_1[increment][0], Zombie_Civil_Spawn_1[increment][1], Zombie_Civil_Spawn_1[increment][2]+1.0);
			SetPlayerFacingAngle(playerid, Zombie_Civil_Spawn_1[increment][3]);
			SetPlayerColor(playerid, ZOM_INV_COL);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 9, 1);
			SetPlayerHealth(playerid, 99.0);
			SetPlayerArmour(playerid, 99.0);
			SendClientMessage(playerid, COLOR_GREEN, "[HINT]: Punch Civilian to make him visible on map. If you get shot by Sniper, you become visible on map. You are too dumb to use weapon.");
			SendClientMessage(playerid, COLOR_GREEN, "[HINT]: Bon app�tit, madafucka'.");
			Motel_Team = 1;

		}
		else
		{
			SetPVarInt(playerid, "MotelTeamIssued", 2);
			SetPlayerSkin(playerid, 259);
			PlayerEventStats[playerid][pteam] = 2;
			SetPlayerPos(playerid,Zombie_Civil_Spawn_2[increment][0], Zombie_Civil_Spawn_2[increment][1], Zombie_Civil_Spawn_2[increment][2]+2.0);
			SetPlayerFacingAngle(playerid, Zombie_Civil_Spawn_2[increment][3]);
			SetPlayerColor(playerid, CIV_INV_COL);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 24, 100);
			GivePlayerWeapon(playerid, 34, 15);
			SetPlayerHealth(playerid, 50.0);
			SetPlayerArmour(playerid, 50.0);
			SendClientMessage(playerid, COLOR_GREEN, "[HINT]: Shoot Zombie with Sniper to make him visible on map. Getting Punched by one makes you visible on map.");
			SendClientMessage(playerid, COLOR_GREEN, "[HINT]: No Mercy!!! Shoot on Sight, son.");
			increment++;
			Motel_Team = 0;
		}
		SetPlayerWeather(playerid, 19);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Event is full.");
	}
}
public OSKill_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: One Shot Kill event is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			GivePlayerWeapon(i, 30, increment);
			GameTextForPlayer(i, "~R~Event Started!~n~~b~No Teaming!", 1000, 3);
		}
	}
	increment = 0;
}

public OSKill_PlayerKillPlayer(playerid, killerid)
{
	DebugMsg("PKP");
	if(GetPVarInt(playerid, "InEvent") == 1 && GetPVarInt(killerid, "InEvent") == 1)
	{
	    DebugMsg("WeaponTime");
		AddPlayerHealth(killerid, 9.0);
  		GivePlayerWeapon(playerid, 30, 1);
	}
	return 1;
}

public OSKill_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;
	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		PlayerEventStats[i][pteam] = 0;
	}
	Event_ID = ONESHOTKILL;
	increment = 0;
	event_start_message("One Shot Kill", playerid, TDM_COST);
	Event_FFA = 1;
	Event_InProgress = 0;
	ZomEvent_Deaths[0] = 0;
	ZomEvent_Deaths[1] = 0;
	return 1;
}

public OSKill_PlayerLeftEvent(playerid)
{
    new
		pc,
		msg[128],
		lstid;
	SetPVarInt(playerid, "MotelTeamIssued", 0);
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "InEvent") == 1)
			{
				pc++;
				lstid = i;
			}
		}
	}
	if(pc > 1)
	{
		if(GetPVarInt(playerid, "InEvent") == 1)
		{
			format(msg, sizeof(msg), "[EVENT]: %s died in event. %i players left", PlayerName(playerid), pc);
			SendClientMessageToAll(COLOR_GREEN, msg);
		}
	}
	else if(pc == 1)
	{
		format(msg, sizeof(msg), "%s has won the One-Shot-Kill event.", PlayerName(lstid));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		EndEvent();
	}
	else
	{
		format(msg, sizeof(msg), "%s has won the One-Shot-Kill event.", PlayerName(playerid));
		SendClientMessageToAll(COLOR_NOTICE, msg);
		EndEvent();
	}
	return 1;
}

public OSKill_PlayerJoinEvent(playerid)
{
	if(increment < OSKill_EVENT_SLOTS)
	{
		SetPlayerSkin(playerid, 230);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, OSKill_Spawn[increment][0], OSKill_Spawn[increment][1], OSKill_Spawn[increment][2]+2.0);
		SetPlayerFacingAngle(playerid, OSKill_Spawn[increment][3]);
		SetPlayerColor(playerid, COLOR_RED);
		increment++;
		GameTextForPlayer(playerid, "~r~No teaming!!!", 3000, 4);
		TogglePlayerControllable(playerid, 0);
		SetPlayerHealth(playerid, 9.0);
		SetPlayerArmour(playerid, 0.0);
		ResetPlayerWeapons(playerid);
		Motel_Team = 0;
	}
	else
	{
		SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Event is full.");
	}
}

public JPTDM_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: JetPack TDM is now in progress and can not be joined");

	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			increment = 0;
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
			SetPlayerSpecialAction(i, SPECIAL_ACTION_USEJETPACK);
		}
	}
}

public JPTDM_EventStart(playerid)
{
    FoCo_Event_Rejoin = 0;
	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		PlayerEventStats[i][pteam] = -1;
	}
	Event_ID = JETPACKTDM;
	increment = 0;
	event_start_message("JetPack TDM", playerid, TDM_COST);
	Event_InProgress = 0;
	JPTDMEvent_Deaths[0] = 0;
	JPTDMEvent_Deaths[1] = 0;
	return 1;
}

public JPTDM_PlayerLeftEvent(playerid)
{
    new
		t1,
		t2,
		msg[128];

	if(PlayerEventStats[playerid][pteam] == 1)
	{
		JPTDMEvent_Deaths[1]++;
	}
	else if(PlayerEventStats[playerid][pteam] == 2)
	{
		JPTDMEvent_Deaths[0]++;
	}
	PlayerEventStats[playerid][pteam] = 0;
	format(msg, sizeof(msg), "[EVENT SCORE]: Gangsters %d - %d Scientists", JPTDMEvent_Deaths[0], JPTDMEvent_Deaths[1]);
	SendClientMessageToAll(COLOR_NOTICE, msg);

	SetPVarInt(playerid, "MotelTeamIssued", 0);
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerEventStats[i][pteam] == 1)
			{
				t1++;
			}
			else if(PlayerEventStats[i][pteam] == 2)
			{
				t2++;
			}
		}
	}
	if(t1 == 0)
	{
		EndEvent();
		increment = 0;
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Scientists have killed all Gangsters!");
		return 1;
	}

	else if(t2 == 0)
	{
		EndEvent();
		SendClientMessageToAll(COLOR_NOTICE, "[EVENT NEWS]: Gangsters have killed all Scrientists!");
		increment = 0;
		return 1;
	}
	if(EventPlayersCount() == 1)
	{
		EndEvent();
	}
	return 1;
}

public JPTDM_PlayerJoinEvent(playerid)
{
	if(increment < JPTDM_EVENT_SLOTS)
	{
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 9999);
		SetPlayerHealth(playerid, 99.0);
		SetPlayerArmour(playerid, 99.0);
		if(Motel_Team == 0)
		{
			SetPVarInt(playerid, "MotelTeamIssued", 1);
			SetPlayerSkin(playerid, 230);
			PlayerEventStats[playerid][pteam] = 1;
			SetPlayerPos(playerid, JPTDM_Spawn1[increment][0], JPTDM_Spawn1[increment][1], JPTDM_Spawn1[increment][2]+1.0);
			SetPlayerFacingAngle(playerid, JPTDM_Spawn1[increment][3]);
			SetPlayerColor(playerid, COLOR_BLUE);
			Motel_Team = 1;

		}
		else
		{
			SetPVarInt(playerid, "MotelTeamIssued", 2);
			SetPlayerSkin(playerid, 147);
			PlayerEventStats[playerid][pteam] = 2;
			SetPlayerPos(playerid, JPTDM_Spawn2[increment][0], JPTDM_Spawn2[increment][1], JPTDM_Spawn2[increment][2]+2.0);
			SetPlayerFacingAngle(playerid, JPTDM_Spawn2[increment][3]);
			SetPlayerColor(playerid, COLOR_RED);
			increment++;
			Motel_Team = 0;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Event is full.");
	}
}

public GGTDM_PlayerDeath(playerid,killerid)
{
	if(killerid!=INVALID_PLAYER_ID)
	{
		if(GGTDMPlayers[killerid][PTeam] != -1)
		{
		   	GGTDM_PCurr_Streak[killerid]++;
	    	GGTDMTeams[GGTDMPlayers[killerid][PTeam]][TeamScore]++;
			GGTDM_EditTeam_TextDraw(GGTDMPlayers[killerid][PTeam]);
		}
		TextDrawHideForPlayer(playerid,GGTDMTeams[0][TeamText]);
		TextDrawHideForPlayer(playerid,GGTDMTeams[1][TeamText]);
		TextDrawHideForPlayer(playerid,GGTDMLeadTeam);
		if(GGTDM_LeadingTeam!=-1)
		{
		    if(GGTDM_LeadingTeam != GGTDMPlayers[killerid][PTeam] && GGTDMTeams[GGTDMPlayers[killerid][PTeam]][TeamScore] > GGTDMTeams[GGTDM_LeadingTeam][TeamScore])
		    {
		        GGTDM_LeadingTeam=GGTDMPlayers[killerid][PTeam];
		        GGTDM_EditLeader_TextDraw();
		    }
			else if(GGTDM_LeadingTeam==GGTDMPlayers[killerid][PTeam])
			{
			    GGTDM_EditLeader_TextDraw();
			}
		}
		else
		{
		    GGTDM_LeadingTeam=GGTDMPlayers[killerid][PTeam];
            GGTDM_EditLeader_TextDraw();
		}
		if(GGTDMPlayers[killerid][Spree] < GGTDM_PCurr_Streak[killerid] && GGTDMPlayers[killerid][Spree] < 6)
		{
			GivePlayerWeapon(killerid,GGTDMWEAPONS[GGTDM_PCurr_Streak[killerid]][0],GGTDMWEAPONS[GGTDM_PCurr_Streak[killerid]][1]);
		}
		if(GGTDMPlayers[playerid][Spree] < GGTDM_PCurr_Streak[playerid])
		{
		    GGTDMPlayers[playerid][Spree] = GGTDM_PCurr_Streak[playerid];
            GGTDM_PCurr_Streak[playerid] = 0;
		}
		if(GGTDMTeams[GGTDMPlayers[killerid][PTeam]][TeamScore] == GGTDM_Kill_Target)
		{
			if(GGTDM_LeadingTeam!=-1)
			{
				format(GGTDM_MSG, sizeof(GGTDM_MSG), "[EVENT]: %s has won the GunGameTDM.", GGTDM_TeamInfo[GGTDM_LeadingTeam][Team_Name]);
				SendClientMessageToAll(COLOR_NOTICE, GGTDM_MSG);
			}
			EndEvent();
		}
	}
	return 1;
}

public GGTDM_EventEnd()
{
	TextDrawHideForAll(GGTDMLeadTeam);
	TextDrawHideForAll(GGTDMTeams[0][TeamText]);
	TextDrawHideForAll(GGTDMTeams[1][TeamText]);
	return 1;
}


public GGTDM_PlayerJoinEvent(playerid)
{
    if(GetPVarInt(playerid, "InEvent")==0)
	{
	    if(GGTDMPlayers[playerid][PTeam] == -1)
	    {
			ResetPlayerWeapons(playerid);
			SetPlayerVirtualWorld(playerid, 1500);
			SetPlayerHealth(playerid, 99.0);
			SetPlayerArmour(playerid, 99.0);
			GGTDMPlayers[playerid][Spree]=0;
			GGTDM_PCurr_Streak[playerid]=0;
			SetPVarInt(playerid, "EventSpawnDebug", GGTDM_PlCount);
			SetPlayerPos(playerid,GGTDM_TSpawn[GGTDM_PlCount][0],GGTDM_TSpawn[GGTDM_PlCount][1],GGTDM_TSpawn[GGTDM_PlCount][2]);
			SetPlayerFacingAngle(playerid,GGTDM_TSpawn[GGTDM_PlCount][3]);
			GGTDMPlayers[playerid][PTeam] = GGTDM_PlCount % 2;
			SetPVarInt(playerid, "MotelTeamIssued", GGTDMPlayers[playerid][PTeam] + 1);
			SetPlayerSkin(playerid, GGTDM_TeamInfo[GGTDMPlayers[playerid][PTeam]][Team_Skin]);
			SetPlayerColor(playerid,GGTDM_TeamInfo[GGTDMPlayers[playerid][PTeam]][Team_Color]);
			GGTDMTeams[GGTDMPlayers[playerid][PTeam]][MemberCo]++;
			TextDrawShowForPlayer(playerid, GGTDMTeams[GGTDMPlayers[playerid][PTeam]][TeamText]);
			AutoJoin[playerid] = 1;
			TextDrawShowForPlayer(playerid, GGTDMLeadTeam);
			GivePlayerWeapon(playerid,GGTDMWEAPONS[0][0],GGTDMWEAPONS[0][1]);
			GGTDM_PlCount++;
		}
		else
		{
		    GGTDM_PlayerReJoinEvent(playerid);
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WARNING, "[ERROR:] You are already in event.");
	}
	return 1;
}

public GGTDM_PlayerReJoinEvent(playerid)
{
	if(GetPVarInt(playerid, "InEvent")==0)
	{
	    AutoJoin[playerid] = 1;
 		SetPlayerHealth(playerid, 99.0);
		SetPlayerArmour(playerid, 99.0);
		ResetPlayerWeapons(playerid);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPVarInt(playerid, "MotelTeamIssued", GGTDMPlayers[playerid][PTeam] + 1);
		new ggtdm_spawnid = random(GGTDM_PlCount);
		SetPVarInt(playerid, "EventSpawnDebug", ggtdm_spawnid);
		SetPlayerPos(playerid,GGTDM_TSpawn[ggtdm_spawnid][0],GGTDM_TSpawn[ggtdm_spawnid][1],GGTDM_TSpawn[ggtdm_spawnid][2]);
		SetPlayerFacingAngle(playerid,GGTDM_TSpawn[ggtdm_spawnid][3]);
		SetPlayerSkin(playerid, GGTDM_TeamInfo[GGTDMPlayers[playerid][PTeam]][Team_Skin]);
		SetPlayerColor(playerid,GGTDM_TeamInfo[GGTDMPlayers[playerid][PTeam]][Team_Color]);
		TextDrawShowForPlayer(playerid, GGTDMTeams[GGTDMPlayers[playerid][PTeam]][TeamText]);
		TextDrawShowForPlayer(playerid,GGTDMLeadTeam);
		for(new i = 0; i <= GGTDMPlayers[playerid][Spree], i < 6; i++)
		{
			GivePlayerWeapon(playerid, GGTDMWEAPONS[i][0], GGTDMWEAPONS[i][1]);
		}
	}
}

CMD:gt_sid(playerid, params[])
{
	new targetid, string[70];
	if(sscanf(params, "u", targetid))
	{
		format(string, sizeof(string), "Your GunGameTDM SpawnID is:> %d", GetPVarInt(playerid, "EventSpawnDebug"));
		return SendClientMessage(playerid, COLOR_GREEN, string);
	}
	else if(IsValidPlayerID(playerid, targetid))
	{
		format(string, sizeof(string), "%s(%i)'s GunGameTDM SpawnID is:> %d", PlayerName(targetid), targetid, GetPVarInt(playerid, "EventSpawnDebug"));
		return SendClientMessage(playerid, COLOR_GREEN, string);
	}
	return 1;
}

public GGTDM_OneSecond()
{
    SendClientMessageToAll(COLOR_NOTICE,"[EVENT]: GunGame TDM is now in progress and can not be joined");
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{
			TogglePlayerControllable(i, 1);
			GameTextForPlayer(i, "~R~Event Started!", 1000, 3);
		}
	}
	GGTDM_Kill_Target = GGTDM_PlCount * 3;
    GGTDM_EditLeader_TextDraw();
}

public GGTDM_PlayerStart(playerid)
{
	Event_ID = GUNGAMETDM;
	foreach(Player, i)
    {
        GGTDMPlayers[i][Spree] = 0;
        GGTDM_PCurr_Streak[i] = 0;
        GGTDMPlayers[i][PTeam] = -1;
	}
	GGTDMTeams[0][TeamScore] = GGTDMTeams[1][TeamScore] = GGTDMTeams[0][MemberCo] = GGTDMTeams[1][MemberCo] = 0;
	GGTDM_LeadingTeam = -1;
	GGTDM_Kill_Target = 999;
	Event_InProgress = 0;
	GGTDM_PlCount = 0;
 	event_start_message("GunGame TDM", playerid, TDM_COST);
 	GGTDM_EditLeader_TextDraw();
	GGTDM_EditTeam_TextDraw(0);
	GGTDM_EditTeam_TextDraw(1);
	return 1;
}

public GGTDM_PlayerLeave(playerid)
{
    GGTDMPlayers[playerid][Spree]=-1;
    GGTDM_PCurr_Streak[playerid]=0;
    AutoJoin[playerid] = 0;
	TextDrawHideForPlayer(playerid,GGTDMTeams[0][TeamText]);
	TextDrawHideForPlayer(playerid,GGTDMTeams[1][TeamText]);
	TextDrawHideForPlayer(playerid,GGTDMLeadTeam);
	return 1;
}

public GGTDM_EditTeam_TextDraw(GGTDM_TeamID)
{
    format(GGTDM_MSG, sizeof(GGTDM_MSG), "Det: ~w~Team Name - ~g~%s~n~~w~Team Score - ~g~ %i",GGTDM_TeamInfo[GGTDM_TeamID][Team_Name], GGTDMTeams[GGTDM_TeamID][TeamScore]);
	TextDrawSetString(GGTDMTeams[GGTDM_TeamID][TeamText], GGTDM_MSG);
	return 1;
}

public GGTDM_EditLeader_TextDraw()
{
	if(GGTDM_LeadingTeam != -1)
    	format(GGTDM_MSG, sizeof(GGTDM_MSG), "Leading: ~w~Team Name - ~g~%s~n~~w~Team Score - ~g~ %i~n~~b~Target Score: %i",GGTDM_TeamInfo[GGTDM_LeadingTeam][Team_Name],GGTDMTeams[GGTDM_LeadingTeam][TeamScore],GGTDM_Kill_Target);
	else
        format(GGTDM_MSG, sizeof(GGTDM_MSG), "Leading: ~w~Team Name - ~g~None~n~~w~Team Score - ~g~ 0~n~~b~Target Score: %i", GGTDM_Kill_Target);
	TextDrawSetString(GGTDMLeadTeam, GGTDM_MSG);
	return 1;
}

public GGTDM_CreateTextDraws()
{
	for(new x = 0; x < 2; x++)
	{
	    format(GGTDM_MSG, sizeof(GGTDM_MSG), "Det: ~w~Team Name - ~g~%s~n~~w~Team Score - ~g~ %i",GGTDM_TeamInfo[x][Team_Name],GGTDMTeams[x][TeamScore]);
    	GGTDMTeams[x][TeamText] = TextDrawCreate(187.500000, 400.0, GGTDM_MSG);
    	TextDrawBackgroundColor(GGTDMTeams[x][TeamText], 255);
	   	TextDrawFont(GGTDMTeams[x][TeamText], 1);
		TextDrawLetterSize(GGTDMTeams[x][TeamText], 0.240000, 1.000000);
		TextDrawColor(GGTDMTeams[x][TeamText] , 0xffbf00FF);
		TextDrawSetOutline(GGTDMTeams[x][TeamText] , 1);
		TextDrawSetProportional(GGTDMTeams[x][TeamText] , 1);
	}
    format(GGTDM_MSG, sizeof(GGTDM_MSG), "Leading: ~w~Team Name - ~g~None~n~~w~Team Score - ~g~ 0~n~~b~Target Score: %i",GGTDM_Kill_Target);
    GGTDMLeadTeam=TextDrawCreate(187.500000, 353.937500, GGTDM_MSG);
    TextDrawBackgroundColor(GGTDMLeadTeam, 255);
	TextDrawFont(GGTDMLeadTeam, 1);
	TextDrawLetterSize(GGTDMLeadTeam, 0.240000, 1.000000);
	TextDrawColor(GGTDMLeadTeam , 0xffbf00FF);
	TextDrawSetOutline(GGTDMLeadTeam , 1);
	TextDrawSetProportional(GGTDMLeadTeam , 1);
	return 1;
}

/* Commands */
/*
CMD:event_kills(playerid, params[])
{
	new string[128];
	foreach(Player, i)
	{
		if(i != INVALID_PLAYER_ID)
		{
		    format(string, sizeof(string), "[DEBUG]: %s(%d) has %d kills in the event!", PlayerName(i), i, Event_Kills[i]);
		    SendClientMessage(playerid, COLOR_SYNTAX, string);
		}
	}
	return 1;
}

CMD:event_position(playerid, params[])
{
	new string[128];
	if(Position[0] != -1)
	{
	    format(string, sizeof(string), "1st: %s(%d) with %d kills.", PlayerName(Position[0]), Position[0], Event_Kills[Position[0]]);
		SendClientMessage(playerid, COLOR_SYNTAX, string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "1st: NOONE HAS THIS YET!");
	}
	if(Position[1] != -1)
	{
	    format(string, sizeof(string), "2nd: %s(%d) with %d kills.", PlayerName(Position[1]), Position[1], Event_Kills[Position[1]]);
		SendClientMessage(playerid, COLOR_SYNTAX, string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "2nd: NOONE HAS THIS YET!");
	}
	if(Position[2] != -1)
	{
	    format(string, sizeof(string), "3rd: %s(%d) with %d kills.", PlayerName(Position[2]), Position[2], Event_Kills[Position[2]]);
		SendClientMessage(playerid, COLOR_SYNTAX, string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "3rd: NOONE HAS THIS YET!");
	}
	return 1;
}
*/

CMD:event(playerid, params[])
{
	if(IsAdmin(playerid, 1))
	{
		new
			result[50],
			string[128],
			targetid = -1;

		if(sscanf(params, "s[50]R(-1)", result, targetid))
		{
		    format(string, sizeof(string), "[USAGE]: {%06x}/event {%06x}[Start/End/Setbrawlpoint/Add/Forcecriminal]", COLOR_WHITE >>> 8, COLOR_SYNTAX >>> 8);
		    return SendClientMessage(playerid, COLOR_SYNTAX, string);
		}

		if(strcmp(result, "start", true) == 0)
		{
		    if(Event_InProgress == -1)
		    {
				ShowPlayerDialog(playerid, DIALOG_EVENTS, DIALOG_STYLE_LIST, "Events:", EVENTLIST, "Start", "Cancel");
			}

			else
			{
			    SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is already another event in progress.");
			}
		}

		else if(strcmp(result, "end", true) == 0)
		{
		    if(Event_InProgress != -1)
		    {
				if(FoCo_Criminal != -1) stop PursuitTimer;		

				if(Event_Currently_On() == 26)
				{
                	foreach(Player, i)
					{
						AutoJoin[i] = 0;
					}
					CallRemoteFunction("CEM_MEndEvent", "i", playerid);
				}
				else
				{
					EndEvent();
				}	
				
		    	
		    	format(string, sizeof(string), "[EVENT]: %s %s has stopped the event!", GetPlayerStatus(playerid), PlayerName(playerid));
				IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
				SendClientMessageToAll(COLOR_NOTICE, string);
				Event_Bet_CancelEvent();    // Refunds event bets.
		    }

		    else
		    {
		        SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: There is no event to end.");
		    }
		}

		else if(strcmp(result, "Setbrawlpoint", true) == 0)
		{
			GetPlayerPos(playerid, BrawlX, BrawlY, BrawlZ);
			GetPlayerFacingAngle(playerid, BrawlA);
			BrawlInt = GetPlayerInterior(playerid);
			BrawlVW = GetPlayerVirtualWorld(playerid);

			SendClientMessage(playerid, COLOR_ADMIN, "[SUCCESS]: Brawlpoint set to your position.");
		}
		
		else if(strcmp(result, "add", true) == 0)
		{		
			if(targetid == INVALID_PLAYER_ID)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Player is not connected");
			}
			
			if(targetid == cellmin)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Multiple matches found. Be more specific.");
			}
			
			if(targetid == -1)
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "[USAGE]: /event add [ID/Name]");				
			}
			
			if(Event_InProgress != -1)
			{
				if(GetPVarInt(targetid, "InEvent") == 1) return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The player is already in the event.");
				if(IsPlayerInAnyVehicle(targetid))
				{
					RemovePlayerFromVehicle(targetid);
				}

				SetPVarInt(targetid, "MotelSkin", GetPlayerSkin(targetid));
				SetPVarInt(targetid, "MotelColor", GetPlayerColor(targetid));
				if(FoCo_Event_Rejoin != 1)
				{
					increment = 1;
				}
				PlayerJoinEvent(targetid);
				format(string, sizeof(string), "AdmCmd(%d): %s %s has added %s to the event.", ACMD_EVENT, GetPlayerStatus(playerid), PlayerName(playerid),PlayerName(targetid));
				SendAdminMessage(ACMD_EVENT, string);
				format(string, sizeof(string), "[INFO]: %s %s has added you to the event.", GetPlayerStatus(playerid), PlayerName(playerid));
				SendClientMessage(targetid, COLOR_NOTICE, string);
				TogglePlayerControllable(targetid, 1);
			}
			
			else
			{
				SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: No event has been started yet.");
			}
		}
		else if (strcmp(result, "forcecriminal", true) == 0)
		{
			if(targetid == cellmin)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Multiple matches found. Be more specific.");
			}

			if(targetid == -1)
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "[USAGE]: /event forcecriminal [ID/Name]");
			}
			if(targetid == INVALID_PLAYER_ID)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Player is not connected");
			}
			else
			{
                ForcedCriminal = targetid;
                format(string, sizeof(string), "[Guardian]: %s(%d) has been forced to be the criminal for next event by %s", PlayerName(targetid),targetid,PlayerName(playerid));
				SendAdminMessage(1, string);
				AdminLog(string);
			}
		}
		else if (strcmp(result, "remove", true) == 0)
		{
			if(targetid == cellmin)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Multiple matches found. Be more specific.");
			}

			if(targetid == -1)
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "[USAGE]: /event remove [ID/Name]");
			}
			if(targetid == INVALID_PLAYER_ID)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Player is not connected");
			}
			if(Event_InProgress == 0 && Event_FFA == 0)
			{
				return SendClientMessage(playerid, COLOR_WARNING, "You cannot remove player from events before it start.");
			}

			if(EventPlayersCount() <= 2 && Event_ID != MADDOGG && Event_ID != BIGSMOKE && Event_ID != BRAWL)
			{
				SendClientMessage(playerid, COLOR_WARNING, "You cannot remove player from event with less than 2 players in it.");
                return SendClientMessage(playerid, COLOR_NOTICE, "[HINT]: Use '/event unbug (PlayerID)' to fix event variables for a player.");
			}
			else
			{
				if(GetPVarInt(targetid, "InEvent") != 1)
				{
				    SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The player is already in the event.");
					return SendClientMessage(playerid, COLOR_NOTICE, "[HINT]: Use '/event unbug (PlayerID)' to fix event variables for a player.");
				}
				if(IsPlayerInAnyVehicle(targetid))
				{
					RemovePlayerFromVehicle(targetid);
				}
				if(Event_Currently_On() == GUNGAME)
				{
				    GG_LeaveEvent(targetid);
				}
				else if(Event_Currently_On() == 26)
				{
					CallRemoteFunction("CEM_MLeave", "i", targetid);
				}
                else
				{
					PlayerLeftEvent(targetid);
				}
				format(string, sizeof(string), "AdmCmd(%d): %s %s has removed %s from the event.", ACMD_EVENT, GetPlayerStatus(playerid), PlayerName(playerid),PlayerName(targetid));
				SendAdminMessage(ACMD_EVENT, string);
				format(string, sizeof(string), "[INFO]: %s %s has removed you from the event.", GetPlayerStatus(playerid), PlayerName(playerid));
				SendClientMessage(targetid, COLOR_NOTICE, string);
				event_SpawnPlayer(targetid);
				if(AutoJoin[targetid] == 1)
				{
				    AutoJoin[targetid] = 0;
					SendClientMessage(targetid, COLOR_WHITE, "[INFO]: Auto-Join has been disabled.");
				}
			}
		}
		else if (strcmp(result, "unbug", true) == 0)
		{
		    return SendClientMessage(playerid, COLOR_WARNING, "[GUARDIAN]: I WILL TELL YOU WHEN ITS UP!!!! Calm your tits");
		}
	}

	return 1;
}


CMD:autojoin(playerid, params[])    // Made by pEar
{
	new dstring[128];
	if(AutoJoin[playerid] == 0 || AutoJoin[playerid] == -1)
	{
		if(GetPVarInt(playerid, "PlayerStatus") == 2)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are in a duel, leave it first.");
		}
		if(FoCo_Player[playerid][jailed] != 0)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Please wait until your admin jail is over.");
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Can't do this now..");
		}
		if(Event_InProgress == -1)
		{
		    return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: No event has been started yet.");
		}
		if(GetPVarInt(playerid, "PlayerStatus") == 1)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are already at the event, please wait until you die before using the command again.");
	 	}
  		if(Event_InProgress == 0)
		{
			if(eventSlots[Event_ID] == -1 || eventSlots[Event_ID] > EventPlayersCount())
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					RemovePlayerFromVehicle(playerid);
				}
				new ID = Event_Currently_On();
				if(ID == 0 || ID == 1 || ID == 3 || (ID = EVENT_CEM && CEM_RUNNING == FFA_DM)) // If event ID is maddogs, bigsmoke or brawl.
				{
				    if(FoCo_Event_Rejoin == 1)
				    {
						format(dstring, sizeof(dstring), "Enabling AutoJoin for PID: %d, EventID: %d, EventSlots: %d, AutoJoin[%d]: %d", playerid, Event_ID, eventSlots[Event_ID], playerid, AutoJoin[playerid]);
						DebugMsg(dstring);
				        if(Event_Currently_On() != EVENT_CEM)
				        {
							format(dstring, sizeof(dstring), "Enabling AutoJoin for PID: %d, EventID: %d, EventSlots: %d, AutoJoin[%d]: %d", playerid, Event_ID, eventSlots[Event_ID], playerid, AutoJoin[playerid]);
							SendDevMessage(dstring);
					        SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
							SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
			    			AutoJoin[playerid] = 1;
							SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been enabled!");
							PlayerJoinEvent(playerid);
						}
						else
						{
					        SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
							SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
			    			AutoJoin[playerid] = 1;
							SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been enabled!");
							PlayerJoinEvent(playerid);
							CEM_MAutoJoin(playerid);
						}
					}
				    else
				    {
				        return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is not rejoinable, please use /join!");
				    }
                    
				    
				}
				else
				{
					return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: This may only be enabled with maddogs or bigsmoke!");
				}
			}
		}
	}
	else
	{
		format(dstring, sizeof(dstring), "Disabling AutoJoin for PID: %d, EventID: %d, EventSlots: %d, AutoJoin[%d]: %d", playerid, Event_ID, eventSlots[Event_ID], playerid, AutoJoin[playerid]);
		SendDevMessage(dstring);
	    AutoJoin[playerid] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been disabled!");
	}
	return 1;
}

CMD:join(playerid, params[])
{
	if(GetPVarInt(playerid, "PlayerStatus") == 2)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are in a duel, leave it first.");
	}

	if(FoCo_Player[playerid][jailed] != 0)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: Please wait until your admin jail is over.");
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		return 1;
	}

	if(GetPVarInt(playerid, "PlayerStatus") == 1)
	{
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are already at the event!");
 	}

	if(Event_InProgress == -1)
	{
	    return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: No event has been started yet.");
	}

	if(Event_InProgress == 1)
	{
        return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is already in progress");
	}
	if(FoCo_Event_Rejoin == 0)
	{
	    if(Event_Currently_On() == 0 || Event_Currently_On() == 1)
	    {
	        if(Event_Died[playerid] > 0)
	        {
	        	return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is not rejoinable!");
	        }
	    }
	}
    if(Event_InProgress == 0)
	{
		new string[56];
		format(string, sizeof(string), "Event ID: %d", Event_ID);
		DebugMsg(string);
		if(eventSlots[Event_ID] == -1 || eventSlots[Event_ID] > EventPlayersCount())
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
			}
			
			SetPVarInt(playerid, "MotelSkin", GetPlayerSkin(playerid));
			SetPVarInt(playerid, "MotelColor", GetPlayerColor(playerid));
			format(string, sizeof(string), "Event In Progress: %d", Event_InProgress);
			DebugMsg(string);
			if(Event_Currently_On() == 26)
			{
				CallRemoteFunction("CEM_MJoin", "i", playerid);
			}
			else
			{
				PlayerJoinEvent(playerid);
			}
			GiveAchievement(playerid, 77);
		}
		
		else
		{
			return SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: The event is full.");
		}
	
	}
	return 1;
}


stock GetVehicleDriver(vid)
{
     foreach(new i : Player)
     {
          if(!IsPlayerConnected(i)) continue;
          if(GetPlayerVehicleID(i) == vid && GetPlayerVehicleSeat(i) == 0) return 1;
          break;
     }
     return 0;
}

CMD:leaveevent(playerid, params[])
{
	if(GetPVarInt(playerid, "InEvent") == 1)
	{
	    new Float:health;
	    GetPlayerHealth(playerid, health);
	   		
		if(Event_InProgress == 0 && Event_FFA == 0)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "You cannot leave the event before it starts.");
		}
		
		if(EventPlayersCount() <= 2 && Event_ID != MADDOGG && Event_ID != BIGSMOKE && Event_ID != BRAWL)
		{
			return SendClientMessage(playerid, COLOR_WARNING, "You cannot leave the event with less than 2 players in the event.");
		}
	    if(health < 75)
	    {
			return SendClientMessage(playerid, COLOR_WARNING, "You cannot leave the event with less than 75HP, use /kill (it will add a death)");
	    }
		else
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				RemovePlayerFromVehicle(playerid);
			}
			
			if(GetPVarInt(playerid, "MotelTeamIssued") == 1)
			{
				SetPVarInt(playerid, "MotelTeamIssued", 0);
			}
			if(Event_Currently_On() == GUNGAME)
			{
			    GG_LeaveEvent(playerid);
			}
			if(Event_Currently_On() == GUNGAMETDM)
			{
			    GGTDM_PlayerLeave(playerid);
			}
			if(Event_Currently_On() == 26)
			{
				CallRemoteFunction("CEM_MLeave", "i", playerid);
			}
			else
			{
				PlayerLeftEvent(playerid);
			}
			event_SpawnPlayer(playerid);
			if(AutoJoin[playerid] == 1)
			{
			    AutoJoin[playerid] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Auto-Join has been disabled.");
			}
		}
	}
	
	else
	{
		SendClientMessage(playerid, COLOR_WARNING, "[ERROR]: You are not at an event, therefore cannot leave.");
	}
	return 1;
}


public Event_EntranceFee(playerid, cost)
{
	new string[10];
	if(FoCo_Player[playerid][level] >= MIN_LVL)
	{
	    if(GetPlayerMoney(playerid) > MIN_CASH)
	    {
	    	new money = GetPlayerMoney(playerid) - cost;
	        SetPlayerMoney(playerid, money);
	        format(string, sizeof(string), "~r~-%d",cost);
			TextDrawSetString(MoneyDeathTD[playerid], string);
			TextDrawShowForPlayer(playerid, MoneyDeathTD[playerid]);
			defer cashTimer(playerid);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "[INFO]: No entrance fee paid due to low amount of money.");
		}
	}
	else
 	{
 		SendClientMessage(playerid, COLOR_GREEN, "[INFO]: No entrance fee paid due to low level.");
	}
	return 1;
}

stock SendEventPlayersMessage(str[], color)
{
	foreach(Player, i)
	{	
		if(GetPVarInt(i, "InEvent") == 1)
		{
			SendClientMessage(i, color, str);
		}
	}

	return 1;
}

stock EventPlayersCount()
{
	new cnt = 0;
	foreach(Player, i)
	{
		if(GetPVarInt(i, "InEvent") == 1)
		{	
			cnt++;
		}
	}

	return cnt;
}

stock SendEventMessage(str[], color)
{
	new i;
	for(i = 0; i < EventCount; i++)
	{
		if(color == -1)
		{
			SendClientMessage(i, COLOR_CMDNOTICE, str);
		}
		else
		{
			SendClientMessage(i, color, str);	
		}
	}
	return 1;
}

/* Spawn Player Fix by Y_Less */

stock event_SpawnPlayer(playerid)
{
	new
		vid = GetPlayerVehicleID(playerid);
		
	if (vid)
	{
		new
			Float:x,
			Float:y,
			Float:z;
		// Remove them without the animation.
		GetVehiclePos(vid, x, y, z),
		SetPlayerPos(playerid, x, y, z);
	}
	new Float:HP;
	GetPlayerHealth(playerid, HP);
	if(HP == 0.0)
	{
		return 1;
	}
	else
	{
		return SpawnPlayer(playerid);
	}
}

forward RespawnPlayer(playerid);
public RespawnPlayer(playerid)
{
	return event_SpawnPlayer(playerid);
}

forward SetEventTeamNames(type);
public SetEventTeamNames(type)
{
	switch(type)
	{
		case MADDOGG, BIGSMOKE, MINIGUN, BRAWL, HYDRA, GUNGAME, MONSTERSUMO, BANGERSUMO, SANDKSUMO, SANDKSUMORELOADED, DESTRUCTIONDERBY, PLANE, PURSUIT:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "DM");
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "DM");
		}
		
		case JEFFTDM:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT");
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Criminals");
		}
		
		case CONSTRUCTION:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "Workers");
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Engineers");
		}
		
		case AREA51:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "US Special Forces" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Nuclear Scientists" );
		}
		
		case ARMYVSTERRORISTS:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "Army" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
		
		case NAVYVSTERRORISTS:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "Navy Seals" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
		
		case COMPOUND:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
		
		case OILRIG:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}	
		
		case DRUGRUN:
		{
			format(TeamNames[team_a], sizeof(TeamNames[team_a]), "SWAT" );
			format(TeamNames[team_b], sizeof(TeamNames[team_b]), "Terrorists" );
		}
	}
}
forward event_start_message(event[], playerid, cost);
public event_start_message(event[], playerid, cost)
{
	new string[256];
	format(string, sizeof(string), "[EVENT]: %s %s has started the {%06x}%s {%06x}event. Type /join! Price: %d", GetPlayerStatus(playerid), PlayerName(playerid), COLOR_WARNING >>> 8, event,  COLOR_CMDNOTICE >>> 8, cost);
	SendClientMessageToAll(COLOR_CMDNOTICE, string);
	IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
	IRC_GroupSay(gLeads, IRC_FOCO_LEADS, string);
	return 1;
}

public FoCo_Event_Rejoin_Func(Rejoin)
{
    FoCo_Event_Rejoin = Rejoin;
}


/*Gun Game Fucking Event*/
public GG_PlayerDeath(playerid, killerid, reason)
{
	DebugMsg("Death_Called");
	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(killerid, "PlayerStatus") == 1 && lastGunGameWeapon[killerid] != reason)
		{
			SetPVarInt(playerid, "InEvent", 0);
			SetPVarInt(playerid, "JustDied", 1);
			GunGameKills[killerid]++;
			ResetPlayerWeapons(killerid);
			GivePlayerWeapon(killerid, GunGameWeapons[GunGameKills[killerid]], 500);
			lastGunGameWeapon[killerid] = GunGameWeapons[GunGameKills[killerid]-1];
			new tmpString[128];
			format(tmpString, sizeof(tmpString), "(%d / 16)", GunGameKills[killerid]);
			TextDrawSetString(GunGame_MyKills[killerid], tmpString);
			new varHigh = 0;
			foreach(new i : Player)
			{
				if(GetPVarInt(playerid, "PlayerStatus") == 1)
				{
					if(GunGameKills[killerid] < GunGameKills[i])
					{
						varHigh = 1;
					}
				}
			}
			if(varHigh == 0)
			{
				format(tmpString, sizeof(tmpString), "%s (%d / 16)", PlayerName(killerid), GunGameKills[killerid]);
				foreach(Player, i)
				{
					if(GetPVarInt(playerid, "PlayerStatus") == 1)
					{
						TextDrawSetString(CurrLeaderName, tmpString);
					}
				}
			}
			if(GunGameKills[killerid] >= 17)
			{
				format(tmpString, sizeof(tmpString), "[Event Notice]: %s has won the Gun Game.", PlayerName(killerid));
				SendClientMessageToAll(COLOR_NOTICE, tmpString);
				lastEventWon = killerid;
				EndEvent();
			}
		}
	}
	DebugMsg("Death_Ended");
	return 1;
}

public GG_RejoinPlayer(playerid)
{
    DebugMsg("Rejoin_CAlled");
	if(AutoJoin[playerid] == 1 && Event_ID == GUNGAME)
	{
		SetPlayerArmour(playerid, 0);
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);
		new randomnum = random(increment);
		SetPlayerPos(playerid, GunGameSpawns[randomnum][0], GunGameSpawns[randomnum][1], GunGameSpawns[randomnum][2]);
		SetPlayerFacingAngle(playerid, GunGameSpawns[randomnum][3]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, GunGameWeapons[GunGameKills[playerid]], 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Gun ~h~ Game!", 800, 3);
	}
	DebugMsg("Rejoin_Ended");
	return 1;
}

public GG_OnPlayerUpdate(playerid)
{
	if(Event_ID == GUNGAME)
	{
		if(GetPVarInt(playerid, "PlayerStatus") == 1)
		{
			new tmpStr[30];
			format(tmpStr, sizeof(tmpStr), "%s", WeapNames[GetPlayerWeapon(playerid)]);
			TextDrawSetString(GunGame_Weapon[playerid], tmpStr);
		}
	}
	return 1;
}

public GG_EventJoin(playerid)
{
	if(increment < GUNGAME_EVENTSLOT)
	{
		DebugMsg("Join_Called");
		SetPVarInt(playerid,"PlayerStatus",1);
		SetPlayerArmour(playerid, 0);
		SetPlayerHealth(playerid, 99);
		SetPlayerVirtualWorld(playerid, 1500);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, GunGameSpawns[increment][0], GunGameSpawns[increment][1], GunGameSpawns[increment][2]);
		SetPlayerFacingAngle(playerid, GunGameSpawns[increment][3]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, GunGameWeapons[0], 500);
		GameTextForPlayer(playerid, "~R~~n~~n~ Gun ~h~ Game!", 800, 3);
		GunGameKills[playerid] = 0;
		lastGunGameWeapon[playerid] = 38;
		AutoJoin[playerid] = 1;
		TextDrawShowForPlayer(playerid, CurrLeader);
		TextDrawShowForPlayer(playerid, CurrLeaderName);
		TextDrawShowForPlayer(playerid, GunGame_MyKills[playerid]);
		TextDrawShowForPlayer(playerid, GunGame_Weapon[playerid]);
		new tmpStr[30];
		format(tmpStr, sizeof(tmpStr), "%s", WeapNames[0]);
		TextDrawSetString(GunGame_Weapon[playerid], tmpStr);
		format(tmpStr, sizeof(tmpStr), "(%d / 16)", GunGameKills[playerid]);
		TextDrawSetString(GunGame_MyKills[playerid], tmpStr);
		TextDrawSetString(CurrLeaderName, "No Kills");
		increment++;
		DebugMsg("Join_Ended");
	}
	else	
		return SendClientMessage(playerid, COLOR_WARNING, "[ERROR] Event is full.");
	return 1;
}
	
	
public GG_LeaveEvent(playerid)
{
	if(GetPVarInt(playerid, "PlayerStatus") == 0)
	{
		return 1;
	}

	SetPlayerArmour(playerid, 0);
	SetPVarInt(playerid, "InEvent", 0);
	SetPVarInt(playerid, "PlayerStatus", 0);
	death[playerid] = 1;

	foreach(Player, i)
	{
		if(Event_Players[i] == playerid)
		{
			Event_Players[i] = -1;
			break;
		}
	}
	TextDrawHideForPlayer(playerid, CurrLeader);
	TextDrawHideForPlayer(playerid, CurrLeaderName);
	TextDrawHideForPlayer(playerid, GunGame_MyKills[playerid]);
	TextDrawHideForPlayer(playerid, GunGame_Weapon[playerid]);
	GunGameKills[playerid] = 0;
	increment--;
	event_SpawnPlayer(playerid);
	//SetEventDeath
	return 1;
}

public GG_EventStart(playerid)
{
	FoCo_Event_Rejoin = 1;

	foreach(Player, i)
	{
		FoCo_Event_Died[i] = 0;
		AutoJoin[i] = 0;
		SetPVarInt(i, "InEvent", 0);
	}
    increment = 0;
	event_start_message("GunGame Event", playerid, 50);
	Event_InProgress = 0;
	Event_FFA = 1;
	Event_ID = GUNGAME;
	return 1;
}

new Event_Status_Name[2][9] = {"Joinable", "Started"};

CMD:currentevent(playerid)
{
	new temp_msg[128];
	if(Event_InProgress > -1 && Event_InProgress < 2)
	{
		format(temp_msg, sizeof(temp_msg), "[NOTICE]: Currently running event is: %s - Status: %s", event_IRC_Array[Event_ID][eventName], Event_Status_Name[Event_InProgress]);
		SendClientMessage(playerid, COLOR_NOTICE, temp_msg);
	}
	else
	{
		SendClientMessage(playerid, COLOR_NOTICE, "[NOTICE]: There is no event running.");
	}
	return 1;
}

#if defined PTS
CMD:ggtext(playerid, params[])
{
	TextDrawShowForPlayer(playerid, GGTDMTeams[GGTDMPlayers[playerid][PTeam]][TeamText]);
	TextDrawShowForPlayer(playerid, GGTDMLeadTeam);
	return 1;
}

CMD:ggrtext(playerid, params[])
{
    GGTDM_CreateTextDraws();
	return 1;
}
#endif
